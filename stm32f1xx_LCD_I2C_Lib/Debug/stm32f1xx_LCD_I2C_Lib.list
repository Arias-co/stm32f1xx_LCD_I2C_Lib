
stm32f1xx_LCD_I2C_Lib.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000056f4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e8  08005808  08005808  00015808  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005af0  08005af0  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  08005af0  08005af0  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005af0  08005af0  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08005af0  08005af0  00015af0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08005af8  08005af8  00015af8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08005b00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000128  200001e4  08005ce4  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000030c  08005ce4  0002030c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e64d  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002f7a  00000000  00000000  0003e85a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f80  00000000  00000000  000417d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ea0  00000000  00000000  00042758  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00004b75  00000000  00000000  000435f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000dc65  00000000  00000000  0004816d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009af46  00000000  00000000  00055dd2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f0d18  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e28  00000000  00000000  000f0d94  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e4 	.word	0x200001e4
 800012c:	00000000 	.word	0x00000000
 8000130:	080057ec 	.word	0x080057ec

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e8 	.word	0x200001e8
 800014c:	080057ec 	.word	0x080057ec

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <_ZN7LCD_I2CC1EP17I2C_HandleTypeDefh>:
 *      Author: arielarias
 */

#include "LCDI2C.h"

LCD_I2C::LCD_I2C(I2C_HandleTypeDef *i2cx, uint8_t addr)
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b084      	sub	sp, #16
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	60f8      	str	r0, [r7, #12]
 8000a90:	60b9      	str	r1, [r7, #8]
 8000a92:	4613      	mov	r3, r2
 8000a94:	71fb      	strb	r3, [r7, #7]
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f000 fa8b 	bl	8000fb4 <_ZN5PrintC1Ev>
 8000a9e:	4a0e      	ldr	r2, [pc, #56]	; (8000ad8 <_ZN7LCD_I2CC1EP17I2C_HandleTypeDefh+0x50>)
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	601a      	str	r2, [r3, #0]
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	22f0      	movs	r2, #240	; 0xf0
 8000aa8:	725a      	strb	r2, [r3, #9]
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	2201      	movs	r2, #1
 8000aae:	745a      	strb	r2, [r3, #17]
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	749a      	strb	r2, [r3, #18]
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	2264      	movs	r2, #100	; 0x64
 8000aba:	74da      	strb	r2, [r3, #19]
{
    // TODO Auto-generated constructor stub
    hi2cx = i2cx;
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	68ba      	ldr	r2, [r7, #8]
 8000ac0:	605a      	str	r2, [r3, #4]
    i2cDeviceAddr = addr << 1;
 8000ac2:	79fb      	ldrb	r3, [r7, #7]
 8000ac4:	005b      	lsls	r3, r3, #1
 8000ac6:	b2da      	uxtb	r2, r3
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	721a      	strb	r2, [r3, #8]
}
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	4618      	mov	r0, r3
 8000ad0:	3710      	adds	r7, #16
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	08005864 	.word	0x08005864

08000adc <_ZN7LCD_I2C14i2cDeviceCheckEv>:
/**
*@brief: Lcd i2c device check.
*@retval: none
*/
void LCD_I2C::i2cDeviceCheck(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
    /* Checks if target device is ready for communication. */
    /* 3 is number of trials, 1000ms is timeout */
    HAL_Delay(10);
 8000ae4:	200a      	movs	r0, #10
 8000ae6:	f000 fe6f 	bl	80017c8 <HAL_Delay>
    while (HAL_I2C_IsDeviceReady(hi2cx, i2cDeviceAddr, 3, 1000) != HAL_OK)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	6858      	ldr	r0, [r3, #4]
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	7a1b      	ldrb	r3, [r3, #8]
 8000af2:	b299      	uxth	r1, r3
 8000af4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000af8:	2203      	movs	r2, #3
 8000afa:	f001 fb13 	bl	8002124 <HAL_I2C_IsDeviceReady>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	bf14      	ite	ne
 8000b04:	2301      	movne	r3, #1
 8000b06:	2300      	moveq	r3, #0
 8000b08:	b2db      	uxtb	r3, r3
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d000      	beq.n	8000b10 <_ZN7LCD_I2C14i2cDeviceCheckEv+0x34>
 8000b0e:	e7ec      	b.n	8000aea <_ZN7LCD_I2C14i2cDeviceCheckEv+0xe>
    {

    }
}
 8000b10:	bf00      	nop
 8000b12:	3708      	adds	r7, #8
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}

08000b18 <_ZN7LCD_I2C11Set_CommandEh>:
/**
*@brief: Send commands to lcd.
*@retval: none
*/
void LCD_I2C::Set_Command(uint8_t cmd)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b084      	sub	sp, #16
 8000b1c:	af02      	add	r7, sp, #8
 8000b1e:	6078      	str	r0, [r7, #4]
 8000b20:	460b      	mov	r3, r1
 8000b22:	70fb      	strb	r3, [r7, #3]
    data_M = cmd & Mask_Data;        //Most significant bit
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	7a5a      	ldrb	r2, [r3, #9]
 8000b28:	78fb      	ldrb	r3, [r7, #3]
 8000b2a:	4013      	ands	r3, r2
 8000b2c:	b2da      	uxtb	r2, r3
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	739a      	strb	r2, [r3, #14]
    data_L = (cmd << 4) & Mask_Data; //Least significant bit
 8000b32:	78fb      	ldrb	r3, [r7, #3]
 8000b34:	011b      	lsls	r3, r3, #4
 8000b36:	b25a      	sxtb	r2, r3
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	7a5b      	ldrb	r3, [r3, #9]
 8000b3c:	b25b      	sxtb	r3, r3
 8000b3e:	4013      	ands	r3, r2
 8000b40:	b25b      	sxtb	r3, r3
 8000b42:	b2da      	uxtb	r2, r3
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	73da      	strb	r2, [r3, #15]

    //For backlight On/off
    data_M |= data_BL;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	7b9a      	ldrb	r2, [r3, #14]
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	7c1b      	ldrb	r3, [r3, #16]
 8000b50:	4313      	orrs	r3, r2
 8000b52:	b2da      	uxtb	r2, r3
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	739a      	strb	r2, [r3, #14]
    data_L |= data_BL;
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	7bda      	ldrb	r2, [r3, #15]
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	7c1b      	ldrb	r3, [r3, #16]
 8000b60:	4313      	orrs	r3, r2
 8000b62:	b2da      	uxtb	r2, r3
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	73da      	strb	r2, [r3, #15]

    data[0] = data_M | LCD_E;  //Enable E pin, RS=0
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	7b9b      	ldrb	r3, [r3, #14]
 8000b6c:	f043 0304 	orr.w	r3, r3, #4
 8000b70:	b2da      	uxtb	r2, r3
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	729a      	strb	r2, [r3, #10]
    data[1] = data_M;          //Disable E pin, RS=0
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	7b9a      	ldrb	r2, [r3, #14]
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	72da      	strb	r2, [r3, #11]
    data[2] = data_L | LCD_E;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	7bdb      	ldrb	r3, [r3, #15]
 8000b82:	f043 0304 	orr.w	r3, r3, #4
 8000b86:	b2da      	uxtb	r2, r3
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	731a      	strb	r2, [r3, #12]
  data[3] = data_L;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	7bda      	ldrb	r2, [r3, #15]
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	735a      	strb	r2, [r3, #13]

    HAL_I2C_Master_Transmit(hi2cx, i2cDeviceAddr, (uint8_t*)data, 4, 200);
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	6858      	ldr	r0, [r3, #4]
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	7a1b      	ldrb	r3, [r3, #8]
 8000b9c:	b299      	uxth	r1, r3
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	f103 020a 	add.w	r2, r3, #10
 8000ba4:	23c8      	movs	r3, #200	; 0xc8
 8000ba6:	9300      	str	r3, [sp, #0]
 8000ba8:	2304      	movs	r3, #4
 8000baa:	f001 f9bd 	bl	8001f28 <HAL_I2C_Master_Transmit>
}
 8000bae:	bf00      	nop
 8000bb0:	3708      	adds	r7, #8
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}

08000bb6 <_ZN7LCD_I2C10Write_DataEh>:
/**
*@brief: Write data to lcd.
*@retval: none
*/
void LCD_I2C::Write_Data(uint8_t datax)
{
 8000bb6:	b580      	push	{r7, lr}
 8000bb8:	b084      	sub	sp, #16
 8000bba:	af02      	add	r7, sp, #8
 8000bbc:	6078      	str	r0, [r7, #4]
 8000bbe:	460b      	mov	r3, r1
 8000bc0:	70fb      	strb	r3, [r7, #3]
    data_M = datax & Mask_Data;        //Most significant bit
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	7a5a      	ldrb	r2, [r3, #9]
 8000bc6:	78fb      	ldrb	r3, [r7, #3]
 8000bc8:	4013      	ands	r3, r2
 8000bca:	b2da      	uxtb	r2, r3
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	739a      	strb	r2, [r3, #14]
    data_L = (datax << 4) & Mask_Data; //Least significant bit
 8000bd0:	78fb      	ldrb	r3, [r7, #3]
 8000bd2:	011b      	lsls	r3, r3, #4
 8000bd4:	b25a      	sxtb	r2, r3
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	7a5b      	ldrb	r3, [r3, #9]
 8000bda:	b25b      	sxtb	r3, r3
 8000bdc:	4013      	ands	r3, r2
 8000bde:	b25b      	sxtb	r3, r3
 8000be0:	b2da      	uxtb	r2, r3
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	73da      	strb	r2, [r3, #15]

    //For backlight On/off
    data_M |= data_BL;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	7b9a      	ldrb	r2, [r3, #14]
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	7c1b      	ldrb	r3, [r3, #16]
 8000bee:	4313      	orrs	r3, r2
 8000bf0:	b2da      	uxtb	r2, r3
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	739a      	strb	r2, [r3, #14]
    data_L |= data_BL;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	7bda      	ldrb	r2, [r3, #15]
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	7c1b      	ldrb	r3, [r3, #16]
 8000bfe:	4313      	orrs	r3, r2
 8000c00:	b2da      	uxtb	r2, r3
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	73da      	strb	r2, [r3, #15]

    data[0] = data_M | LCD_E|LCD_RS;  //Enable E pin, RS=1
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	7b9b      	ldrb	r3, [r3, #14]
 8000c0a:	f043 0305 	orr.w	r3, r3, #5
 8000c0e:	b2da      	uxtb	r2, r3
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	729a      	strb	r2, [r3, #10]
    data[1] = data_M | LCD_RS;        //Disable E pin, RS=1
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	7b9b      	ldrb	r3, [r3, #14]
 8000c18:	f043 0301 	orr.w	r3, r3, #1
 8000c1c:	b2da      	uxtb	r2, r3
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	72da      	strb	r2, [r3, #11]
    data[2] = data_L | LCD_E|LCD_RS;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	7bdb      	ldrb	r3, [r3, #15]
 8000c26:	f043 0305 	orr.w	r3, r3, #5
 8000c2a:	b2da      	uxtb	r2, r3
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	731a      	strb	r2, [r3, #12]
  data[3] = data_L | LCD_RS;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	7bdb      	ldrb	r3, [r3, #15]
 8000c34:	f043 0301 	orr.w	r3, r3, #1
 8000c38:	b2da      	uxtb	r2, r3
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	735a      	strb	r2, [r3, #13]

    HAL_I2C_Master_Transmit(hi2cx, i2cDeviceAddr, (uint8_t*)data, 4, 200);
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	6858      	ldr	r0, [r3, #4]
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	7a1b      	ldrb	r3, [r3, #8]
 8000c46:	b299      	uxth	r1, r3
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	f103 020a 	add.w	r2, r3, #10
 8000c4e:	23c8      	movs	r3, #200	; 0xc8
 8000c50:	9300      	str	r3, [sp, #0]
 8000c52:	2304      	movs	r3, #4
 8000c54:	f001 f968 	bl	8001f28 <HAL_I2C_Master_Transmit>
}
 8000c58:	bf00      	nop
 8000c5a:	3708      	adds	r7, #8
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}

08000c60 <_ZN7LCD_I2C5ClearEv>:
/**
*@brief: Clear lcd display.
*@retval: none
*/
void LCD_I2C::Clear(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
    Set_Command(LCD_CLEAR_DISPLAY);
 8000c68:	2101      	movs	r1, #1
 8000c6a:	6878      	ldr	r0, [r7, #4]
 8000c6c:	f7ff ff54 	bl	8000b18 <_ZN7LCD_I2C11Set_CommandEh>
    HAL_Delay(10);
 8000c70:	200a      	movs	r0, #10
 8000c72:	f000 fda9 	bl	80017c8 <HAL_Delay>
    str_len = 0;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	2200      	movs	r2, #0
 8000c7a:	749a      	strb	r2, [r3, #18]
    line_pos = 1;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	2201      	movs	r2, #1
 8000c80:	745a      	strb	r2, [r3, #17]
}
 8000c82:	bf00      	nop
 8000c84:	3708      	adds	r7, #8
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
	...

08000c8c <_ZN7LCD_I2C9SetCursorEii>:
*@brief: Set lcd cursor position.
*@param: line_x: line no, chr_x: character no.
*@retval: none
*/
void LCD_I2C::SetCursor(int line_x, int chr_x)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b084      	sub	sp, #16
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	60f8      	str	r0, [r7, #12]
 8000c94:	60b9      	str	r1, [r7, #8]
 8000c96:	607a      	str	r2, [r7, #4]
  line_pos = line_x; //hold line position.
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	b2da      	uxtb	r2, r3
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	745a      	strb	r2, [r3, #17]

    if(((line_x >=1 && line_x <= line_MAX) && (chr_x >=1 && chr_x <= chr_MAX)))
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	dd18      	ble.n	8000cd8 <_ZN7LCD_I2C9SetCursorEii+0x4c>
 8000ca6:	68bb      	ldr	r3, [r7, #8]
 8000ca8:	2b02      	cmp	r3, #2
 8000caa:	dc15      	bgt.n	8000cd8 <_ZN7LCD_I2C9SetCursorEii+0x4c>
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	dd12      	ble.n	8000cd8 <_ZN7LCD_I2C9SetCursorEii+0x4c>
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	2b10      	cmp	r3, #16
 8000cb6:	dc0f      	bgt.n	8000cd8 <_ZN7LCD_I2C9SetCursorEii+0x4c>
    {
        Set_Command(LCD_SET_DDRAMADDR | Cursor_Data[line_x - 1][chr_x - 1]);
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	1e5a      	subs	r2, r3, #1
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	3b01      	subs	r3, #1
 8000cc0:	4907      	ldr	r1, [pc, #28]	; (8000ce0 <_ZN7LCD_I2C9SetCursorEii+0x54>)
 8000cc2:	0112      	lsls	r2, r2, #4
 8000cc4:	440a      	add	r2, r1
 8000cc6:	4413      	add	r3, r2
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000cce:	b2db      	uxtb	r3, r3
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	68f8      	ldr	r0, [r7, #12]
 8000cd4:	f7ff ff20 	bl	8000b18 <_ZN7LCD_I2C11Set_CommandEh>
    }
}
 8000cd8:	bf00      	nop
 8000cda:	3710      	adds	r7, #16
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	0800583c 	.word	0x0800583c

08000ce4 <_ZN7LCD_I2C11Send_StringEPch>:
*@brief: Send string data to lcd.
*@param: str[]: string array, mode: str slide/noslide.
*@retval: none
*/
void LCD_I2C::Send_String(char *str, uint8_t mode)
{
 8000ce4:	b5b0      	push	{r4, r5, r7, lr}
 8000ce6:	b088      	sub	sp, #32
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	60f8      	str	r0, [r7, #12]
 8000cec:	60b9      	str	r1, [r7, #8]
 8000cee:	4613      	mov	r3, r2
 8000cf0:	71fb      	strb	r3, [r7, #7]
                        ch_len = 0;
                    }
            }

            break;
    }
 8000cf2:	466b      	mov	r3, sp
 8000cf4:	461d      	mov	r5, r3
    char *buffer[BFR_MAX];
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	7cdb      	ldrb	r3, [r3, #19]
 8000cfa:	3b01      	subs	r3, #1
 8000cfc:	617b      	str	r3, [r7, #20]
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	7cdb      	ldrb	r3, [r3, #19]
 8000d02:	b2d9      	uxtb	r1, r3
 8000d04:	f04f 0200 	mov.w	r2, #0
 8000d08:	f04f 0300 	mov.w	r3, #0
 8000d0c:	f04f 0400 	mov.w	r4, #0
 8000d10:	0154      	lsls	r4, r2, #5
 8000d12:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8000d16:	014b      	lsls	r3, r1, #5
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	7cdb      	ldrb	r3, [r3, #19]
 8000d1c:	b2d9      	uxtb	r1, r3
 8000d1e:	f04f 0200 	mov.w	r2, #0
 8000d22:	f04f 0300 	mov.w	r3, #0
 8000d26:	f04f 0400 	mov.w	r4, #0
 8000d2a:	0154      	lsls	r4, r2, #5
 8000d2c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8000d30:	014b      	lsls	r3, r1, #5
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	7cdb      	ldrb	r3, [r3, #19]
 8000d36:	009b      	lsls	r3, r3, #2
 8000d38:	3303      	adds	r3, #3
 8000d3a:	3307      	adds	r3, #7
 8000d3c:	08db      	lsrs	r3, r3, #3
 8000d3e:	00db      	lsls	r3, r3, #3
 8000d40:	ebad 0d03 	sub.w	sp, sp, r3
 8000d44:	466b      	mov	r3, sp
 8000d46:	3303      	adds	r3, #3
 8000d48:	089b      	lsrs	r3, r3, #2
 8000d4a:	009b      	lsls	r3, r3, #2
 8000d4c:	613b      	str	r3, [r7, #16]
  str_len = 0;
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	2200      	movs	r2, #0
 8000d52:	749a      	strb	r2, [r3, #18]
    switch(mode)
 8000d54:	79fb      	ldrb	r3, [r7, #7]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d002      	beq.n	8000d60 <_ZN7LCD_I2C11Send_StringEPch+0x7c>
 8000d5a:	2b01      	cmp	r3, #1
 8000d5c:	d024      	beq.n	8000da8 <_ZN7LCD_I2C11Send_StringEPch+0xc4>
 8000d5e:	e09f      	b.n	8000ea0 <_ZN7LCD_I2C11Send_StringEPch+0x1bc>
            while (*str)
 8000d60:	68bb      	ldr	r3, [r7, #8]
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	f000 8098 	beq.w	8000e9a <_ZN7LCD_I2C11Send_StringEPch+0x1b6>
                Write_Data (*str);
 8000d6a:	68bb      	ldr	r3, [r7, #8]
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	4619      	mov	r1, r3
 8000d70:	68f8      	ldr	r0, [r7, #12]
 8000d72:	f7ff ff20 	bl	8000bb6 <_ZN7LCD_I2C10Write_DataEh>
                str++;
 8000d76:	68bb      	ldr	r3, [r7, #8]
 8000d78:	3301      	adds	r3, #1
 8000d7a:	60bb      	str	r3, [r7, #8]
                str_len++;
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	7c9b      	ldrb	r3, [r3, #18]
 8000d80:	3301      	adds	r3, #1
 8000d82:	b2da      	uxtb	r2, r3
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	749a      	strb	r2, [r3, #18]
                if(str_len == chr_MAX)
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	7c9b      	ldrb	r3, [r3, #18]
 8000d8c:	2b10      	cmp	r3, #16
 8000d8e:	d1e7      	bne.n	8000d60 <_ZN7LCD_I2C11Send_StringEPch+0x7c>
                    SetCursor(line_pos + 1, 1);
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	7c5b      	ldrb	r3, [r3, #17]
 8000d94:	3301      	adds	r3, #1
 8000d96:	2201      	movs	r2, #1
 8000d98:	4619      	mov	r1, r3
 8000d9a:	68f8      	ldr	r0, [r7, #12]
 8000d9c:	f7ff ff76 	bl	8000c8c <_ZN7LCD_I2C9SetCursorEii>
                    str_len = 0;
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	2200      	movs	r2, #0
 8000da4:	749a      	strb	r2, [r3, #18]
            while (*str)
 8000da6:	e7db      	b.n	8000d60 <_ZN7LCD_I2C11Send_StringEPch+0x7c>
          for(int a = 0; a < BFR_MAX; a++)
 8000da8:	2300      	movs	r3, #0
 8000daa:	61bb      	str	r3, [r7, #24]
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	7cdb      	ldrb	r3, [r3, #19]
 8000db0:	461a      	mov	r2, r3
 8000db2:	69bb      	ldr	r3, [r7, #24]
 8000db4:	4293      	cmp	r3, r2
 8000db6:	da0a      	bge.n	8000dce <_ZN7LCD_I2C11Send_StringEPch+0xea>
          buffer[a]=str++;
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	1c5a      	adds	r2, r3, #1
 8000dbc:	60ba      	str	r2, [r7, #8]
 8000dbe:	693a      	ldr	r2, [r7, #16]
 8000dc0:	69b9      	ldr	r1, [r7, #24]
 8000dc2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
          for(int a = 0; a < BFR_MAX; a++)
 8000dc6:	69bb      	ldr	r3, [r7, #24]
 8000dc8:	3301      	adds	r3, #1
 8000dca:	61bb      	str	r3, [r7, #24]
 8000dcc:	e7ee      	b.n	8000dac <_ZN7LCD_I2C11Send_StringEPch+0xc8>
            ch_len = strlen(*buffer);
 8000dce:	693b      	ldr	r3, [r7, #16]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f7ff f9bc 	bl	8000150 <strlen>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	b2da      	uxtb	r2, r3
 8000ddc:	4b33      	ldr	r3, [pc, #204]	; (8000eac <_ZN7LCD_I2C11Send_StringEPch+0x1c8>)
 8000dde:	701a      	strb	r2, [r3, #0]
            SetCursor(line_pos, i[line_pos - 1]);
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	7c5b      	ldrb	r3, [r3, #17]
 8000de4:	4619      	mov	r1, r3
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	7c5b      	ldrb	r3, [r3, #17]
 8000dea:	3b01      	subs	r3, #1
 8000dec:	4a30      	ldr	r2, [pc, #192]	; (8000eb0 <_ZN7LCD_I2C11Send_StringEPch+0x1cc>)
 8000dee:	5cd3      	ldrb	r3, [r2, r3]
 8000df0:	461a      	mov	r2, r3
 8000df2:	68f8      	ldr	r0, [r7, #12]
 8000df4:	f7ff ff4a 	bl	8000c8c <_ZN7LCD_I2C9SetCursorEii>
            for(int k = c[line_pos - 1];k < ch_len; k++)
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	7c5b      	ldrb	r3, [r3, #17]
 8000dfc:	3b01      	subs	r3, #1
 8000dfe:	4a2d      	ldr	r2, [pc, #180]	; (8000eb4 <_ZN7LCD_I2C11Send_StringEPch+0x1d0>)
 8000e00:	5cd3      	ldrb	r3, [r2, r3]
 8000e02:	61fb      	str	r3, [r7, #28]
 8000e04:	4b29      	ldr	r3, [pc, #164]	; (8000eac <_ZN7LCD_I2C11Send_StringEPch+0x1c8>)
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	461a      	mov	r2, r3
 8000e0a:	69fb      	ldr	r3, [r7, #28]
 8000e0c:	4293      	cmp	r3, r2
 8000e0e:	da0c      	bge.n	8000e2a <_ZN7LCD_I2C11Send_StringEPch+0x146>
            Write_Data (*buffer[k]);
 8000e10:	693b      	ldr	r3, [r7, #16]
 8000e12:	69fa      	ldr	r2, [r7, #28]
 8000e14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	68f8      	ldr	r0, [r7, #12]
 8000e1e:	f7ff feca 	bl	8000bb6 <_ZN7LCD_I2C10Write_DataEh>
            for(int k = c[line_pos - 1];k < ch_len; k++)
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	3301      	adds	r3, #1
 8000e26:	61fb      	str	r3, [r7, #28]
 8000e28:	e7ec      	b.n	8000e04 <_ZN7LCD_I2C11Send_StringEPch+0x120>
            i[line_pos - 1]--;
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	7c5b      	ldrb	r3, [r3, #17]
 8000e2e:	3b01      	subs	r3, #1
 8000e30:	4a1f      	ldr	r2, [pc, #124]	; (8000eb0 <_ZN7LCD_I2C11Send_StringEPch+0x1cc>)
 8000e32:	5cd2      	ldrb	r2, [r2, r3]
 8000e34:	3a01      	subs	r2, #1
 8000e36:	b2d1      	uxtb	r1, r2
 8000e38:	4a1d      	ldr	r2, [pc, #116]	; (8000eb0 <_ZN7LCD_I2C11Send_StringEPch+0x1cc>)
 8000e3a:	54d1      	strb	r1, [r2, r3]
            if(i[line_pos -1] == 0)
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	7c5b      	ldrb	r3, [r3, #17]
 8000e40:	3b01      	subs	r3, #1
 8000e42:	4a1b      	ldr	r2, [pc, #108]	; (8000eb0 <_ZN7LCD_I2C11Send_StringEPch+0x1cc>)
 8000e44:	5cd3      	ldrb	r3, [r2, r3]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d129      	bne.n	8000e9e <_ZN7LCD_I2C11Send_StringEPch+0x1ba>
                i[line_pos - 1] = 1;
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	7c5b      	ldrb	r3, [r3, #17]
 8000e4e:	3b01      	subs	r3, #1
 8000e50:	4a17      	ldr	r2, [pc, #92]	; (8000eb0 <_ZN7LCD_I2C11Send_StringEPch+0x1cc>)
 8000e52:	2101      	movs	r1, #1
 8000e54:	54d1      	strb	r1, [r2, r3]
                c[line_pos - 1]++;
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	7c5b      	ldrb	r3, [r3, #17]
 8000e5a:	3b01      	subs	r3, #1
 8000e5c:	4a15      	ldr	r2, [pc, #84]	; (8000eb4 <_ZN7LCD_I2C11Send_StringEPch+0x1d0>)
 8000e5e:	5cd2      	ldrb	r2, [r2, r3]
 8000e60:	3201      	adds	r2, #1
 8000e62:	b2d1      	uxtb	r1, r2
 8000e64:	4a13      	ldr	r2, [pc, #76]	; (8000eb4 <_ZN7LCD_I2C11Send_StringEPch+0x1d0>)
 8000e66:	54d1      	strb	r1, [r2, r3]
        if(c[line_pos - 1] == ch_len)
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	7c5b      	ldrb	r3, [r3, #17]
 8000e6c:	3b01      	subs	r3, #1
 8000e6e:	4a11      	ldr	r2, [pc, #68]	; (8000eb4 <_ZN7LCD_I2C11Send_StringEPch+0x1d0>)
 8000e70:	5cd2      	ldrb	r2, [r2, r3]
 8000e72:	4b0e      	ldr	r3, [pc, #56]	; (8000eac <_ZN7LCD_I2C11Send_StringEPch+0x1c8>)
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	429a      	cmp	r2, r3
 8000e78:	d111      	bne.n	8000e9e <_ZN7LCD_I2C11Send_StringEPch+0x1ba>
                        i[line_pos - 1] = chr_MAX;
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	7c5b      	ldrb	r3, [r3, #17]
 8000e7e:	3b01      	subs	r3, #1
 8000e80:	4a0b      	ldr	r2, [pc, #44]	; (8000eb0 <_ZN7LCD_I2C11Send_StringEPch+0x1cc>)
 8000e82:	2110      	movs	r1, #16
 8000e84:	54d1      	strb	r1, [r2, r3]
                        c[line_pos - 1] = 0;
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	7c5b      	ldrb	r3, [r3, #17]
 8000e8a:	3b01      	subs	r3, #1
 8000e8c:	4a09      	ldr	r2, [pc, #36]	; (8000eb4 <_ZN7LCD_I2C11Send_StringEPch+0x1d0>)
 8000e8e:	2100      	movs	r1, #0
 8000e90:	54d1      	strb	r1, [r2, r3]
                        ch_len = 0;
 8000e92:	4b06      	ldr	r3, [pc, #24]	; (8000eac <_ZN7LCD_I2C11Send_StringEPch+0x1c8>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	701a      	strb	r2, [r3, #0]
            break;
 8000e98:	e001      	b.n	8000e9e <_ZN7LCD_I2C11Send_StringEPch+0x1ba>
            break;
 8000e9a:	bf00      	nop
 8000e9c:	e000      	b.n	8000ea0 <_ZN7LCD_I2C11Send_StringEPch+0x1bc>
            break;
 8000e9e:	bf00      	nop
 8000ea0:	46ad      	mov	sp, r5
}
 8000ea2:	bf00      	nop
 8000ea4:	3720      	adds	r7, #32
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bdb0      	pop	{r4, r5, r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	20000204 	.word	0x20000204
 8000eb0:	20000000 	.word	0x20000000
 8000eb4:	20000200 	.word	0x20000200

08000eb8 <_ZN7LCD_I2C5writeEPh>:
*@brief: write funcion virtual
*@param: *ch: "string + %f", value: float data variable
*@retval: none
*/
void LCD_I2C::write(uint8_t * text)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
 8000ec0:	6039      	str	r1, [r7, #0]
    Send_String((char *)text, STR_NOSLIDE);
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	6839      	ldr	r1, [r7, #0]
 8000ec6:	6878      	ldr	r0, [r7, #4]
 8000ec8:	f7ff ff0c 	bl	8000ce4 <_ZN7LCD_I2C11Send_StringEPch>
}
 8000ecc:	bf00      	nop
 8000ece:	3708      	adds	r7, #8
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}

08000ed4 <_ZN7LCD_I2C9BackLightEh>:
*@brief: Backlight control
*@param: light_state: BL on/off
*@retval: none
*/
void LCD_I2C::BackLight(uint8_t light_state)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
 8000edc:	460b      	mov	r3, r1
 8000ede:	70fb      	strb	r3, [r7, #3]
    if(light_state == LCD_BL_ON)
 8000ee0:	78fb      	ldrb	r3, [r7, #3]
 8000ee2:	2b08      	cmp	r3, #8
 8000ee4:	d107      	bne.n	8000ef6 <_ZN7LCD_I2C9BackLightEh+0x22>
    {
    data_BL = LCD_BL_ON;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2208      	movs	r2, #8
 8000eea:	741a      	strb	r2, [r3, #16]
        Write_Data(0x20); //Empty character
 8000eec:	2120      	movs	r1, #32
 8000eee:	6878      	ldr	r0, [r7, #4]
 8000ef0:	f7ff fe61 	bl	8000bb6 <_ZN7LCD_I2C10Write_DataEh>
    else if (light_state == LCD_BL_OFF)
    {
        data_BL = LCD_BL_OFF;
        Write_Data(0x20);
    }
}
 8000ef4:	e009      	b.n	8000f0a <_ZN7LCD_I2C9BackLightEh+0x36>
    else if (light_state == LCD_BL_OFF)
 8000ef6:	78fb      	ldrb	r3, [r7, #3]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d106      	bne.n	8000f0a <_ZN7LCD_I2C9BackLightEh+0x36>
        data_BL = LCD_BL_OFF;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2200      	movs	r2, #0
 8000f00:	741a      	strb	r2, [r3, #16]
        Write_Data(0x20);
 8000f02:	2120      	movs	r1, #32
 8000f04:	6878      	ldr	r0, [r7, #4]
 8000f06:	f7ff fe56 	bl	8000bb6 <_ZN7LCD_I2C10Write_DataEh>
}
 8000f0a:	bf00      	nop
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}

08000f12 <_ZN7LCD_I2C4InitEv>:
/**
*@brief: Lcd initiliazing settings.
*@retval: none
*/
void LCD_I2C::Init(void)
{
 8000f12:	b580      	push	{r7, lr}
 8000f14:	b082      	sub	sp, #8
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	6078      	str	r0, [r7, #4]
    i2cDeviceCheck();
 8000f1a:	6878      	ldr	r0, [r7, #4]
 8000f1c:	f7ff fdde 	bl	8000adc <_ZN7LCD_I2C14i2cDeviceCheckEv>
    Set_Command(LCD_CLEAR_DISPLAY);
 8000f20:	2101      	movs	r1, #1
 8000f22:	6878      	ldr	r0, [r7, #4]
 8000f24:	f7ff fdf8 	bl	8000b18 <_ZN7LCD_I2C11Set_CommandEh>
    HAL_Delay(500);
 8000f28:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f2c:	f000 fc4c 	bl	80017c8 <HAL_Delay>
    Set_Command(LCD_RETURN_HOME);
 8000f30:	2102      	movs	r1, #2
 8000f32:	6878      	ldr	r0, [r7, #4]
 8000f34:	f7ff fdf0 	bl	8000b18 <_ZN7LCD_I2C11Set_CommandEh>
    HAL_Delay(5);
 8000f38:	2005      	movs	r0, #5
 8000f3a:	f000 fc45 	bl	80017c8 <HAL_Delay>
    Set_Command(LCD_FUNCTION_SET|MODE_4B|MODE_2L|MODE_5X8_DOTS);
 8000f3e:	2128      	movs	r1, #40	; 0x28
 8000f40:	6878      	ldr	r0, [r7, #4]
 8000f42:	f7ff fde9 	bl	8000b18 <_ZN7LCD_I2C11Set_CommandEh>
    HAL_Delay(5);
 8000f46:	2005      	movs	r0, #5
 8000f48:	f000 fc3e 	bl	80017c8 <HAL_Delay>
    Set_Command(LCD_DISPLAY_CONTROL|DISPLAY_ON|CURSOR_OFF|BLINK_OFF);
 8000f4c:	210c      	movs	r1, #12
 8000f4e:	6878      	ldr	r0, [r7, #4]
 8000f50:	f7ff fde2 	bl	8000b18 <_ZN7LCD_I2C11Set_CommandEh>
    HAL_Delay(5);
 8000f54:	2005      	movs	r0, #5
 8000f56:	f000 fc37 	bl	80017c8 <HAL_Delay>
    Set_Command(LCD_SET_DDRAMADDR);
 8000f5a:	2180      	movs	r1, #128	; 0x80
 8000f5c:	6878      	ldr	r0, [r7, #4]
 8000f5e:	f7ff fddb 	bl	8000b18 <_ZN7LCD_I2C11Set_CommandEh>
    HAL_Delay(500);
 8000f62:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f66:	f000 fc2f 	bl	80017c8 <HAL_Delay>
}
 8000f6a:	bf00      	nop
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
	...

08000f74 <_ZN7LCD_I2CD1Ev>:

/*************************END OF FILE*****************************/


LCD_I2C::~LCD_I2C()
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
 8000f7c:	4a04      	ldr	r2, [pc, #16]	; (8000f90 <_ZN7LCD_I2CD1Ev+0x1c>)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	601a      	str	r2, [r3, #0]
{
    // TODO Auto-generated destructor stub
}
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4618      	mov	r0, r3
 8000f86:	370c      	adds	r7, #12
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bc80      	pop	{r7}
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	08005864 	.word	0x08005864

08000f94 <_ZN7LCD_I2CD0Ev>:
LCD_I2C::~LCD_I2C()
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
}
 8000f9c:	6878      	ldr	r0, [r7, #4]
 8000f9e:	f7ff ffe9 	bl	8000f74 <_ZN7LCD_I2CD1Ev>
 8000fa2:	2114      	movs	r1, #20
 8000fa4:	6878      	ldr	r0, [r7, #4]
 8000fa6:	f002 fb47 	bl	8003638 <_ZdlPvj>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4618      	mov	r0, r3
 8000fae:	3708      	adds	r7, #8
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <_ZN5PrintC1Ev>:
using namespace std;

/**
 *  Constructor
 */
Print::Print()
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
 8000fbc:	4a04      	ldr	r2, [pc, #16]	; (8000fd0 <_ZN5PrintC1Ev+0x1c>)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	601a      	str	r2, [r3, #0]
{

}
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	370c      	adds	r7, #12
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bc80      	pop	{r7}
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	08005878 	.word	0x08005878

08000fd4 <_ZN5Print5printEPKcz>:
 * @param format  contiene una cadena de formato que sigue las mismas
 *        especificaciones que el formato en printf
 * @note  la funcion que utiliza para el formato es sprintf
 */
void Print::print( const char * format, ... )
{
 8000fd4:	b40e      	push	{r1, r2, r3}
 8000fd6:	b580      	push	{r7, lr}
 8000fd8:	b0b7      	sub	sp, #220	; 0xdc
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	6078      	str	r0, [r7, #4]
     un número variable de argumentos. */
    va_list argp;

    /* va_start es una macro que acepta dos argumentos, un va_list y el nombre
     de la variable que precede directamente a la elipsis ("..."). */
    va_start( argp, format );
 8000fde:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8000fe2:	60fb      	str	r3, [r7, #12]

    if ( 0 < vsprintf( string, format, argp ) ) // build string
 8000fe4:	f107 0310 	add.w	r3, r7, #16
 8000fe8:	68fa      	ldr	r2, [r7, #12]
 8000fea:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f003 f916 	bl	8004220 <vsiprintf>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	bfcc      	ite	gt
 8000ffa:	2301      	movgt	r3, #1
 8000ffc:	2300      	movle	r3, #0
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	2b00      	cmp	r3, #0
 8001002:	d007      	beq.n	8001014 <_ZN5Print5printEPKcz+0x40>
    {
        write( (uint8_t*) string );  // funcion virtual
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f107 0210 	add.w	r2, r7, #16
 800100e:	4611      	mov	r1, r2
 8001010:	6878      	ldr	r0, [r7, #4]
 8001012:	4798      	blx	r3
    }

    va_end( argp );

}
 8001014:	bf00      	nop
 8001016:	37dc      	adds	r7, #220	; 0xdc
 8001018:	46bd      	mov	sp, r7
 800101a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800101e:	b003      	add	sp, #12
 8001020:	4770      	bx	lr
	...

08001024 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main( void )
{
 8001024:	b590      	push	{r4, r7, lr}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 800102a:	f000 fb6b 	bl	8001704 <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 800102e:	f000 f841 	bl	80010b4 <_Z18SystemClock_Configv>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8001032:	f000 f94d 	bl	80012d0 <_ZL12MX_GPIO_Initv>
    MX_I2C1_Init();
 8001036:	f000 f88d 	bl	8001154 <_ZL12MX_I2C1_Initv>
    MX_TIM2_Init();
 800103a:	f000 f8bf 	bl	80011bc <_ZL12MX_TIM2_Initv>
    MX_USART1_UART_Init();
 800103e:	f000 f919 	bl	8001274 <_ZL19MX_USART1_UART_Initv>
//    LCD_i2cDeviceCheck();
//    LCD_Init();
//    LCD_BackLight( LCD_BL_ON );
//    LCD_SetCursor( 1, 1 );

    lcd.Init();
 8001042:	4818      	ldr	r0, [pc, #96]	; (80010a4 <main+0x80>)
 8001044:	f7ff ff65 	bl	8000f12 <_ZN7LCD_I2C4InitEv>
    lcd.BackLight(LCD_BL_ON);
 8001048:	2108      	movs	r1, #8
 800104a:	4816      	ldr	r0, [pc, #88]	; (80010a4 <main+0x80>)
 800104c:	f7ff ff42 	bl	8000ed4 <_ZN7LCD_I2C9BackLightEh>
    while ( 1 )
    {

        //----------------------------------------------/
        //Example 1
          int current = 10; //Example integer value
 8001050:	230a      	movs	r3, #10
 8001052:	607b      	str	r3, [r7, #4]
          float volt = 227.89; //Example float value
 8001054:	4b14      	ldr	r3, [pc, #80]	; (80010a8 <main+0x84>)
 8001056:	603b      	str	r3, [r7, #0]
        //  LCD_SetCursor(2,1);
        //  LCD_Print("current:%.0f A", (float)current); //Example of  printing integer value
        //  HAL_Delay(1000);
        //  LCD_Clear();
        //  HAL_Delay(20);
          lcd.SetCursor(1, 1);
 8001058:	2201      	movs	r2, #1
 800105a:	2101      	movs	r1, #1
 800105c:	4811      	ldr	r0, [pc, #68]	; (80010a4 <main+0x80>)
 800105e:	f7ff fe15 	bl	8000c8c <_ZN7LCD_I2C9SetCursorEii>
          lcd.print("volt: %.2f V", volt);
 8001062:	6838      	ldr	r0, [r7, #0]
 8001064:	f7ff f9e0 	bl	8000428 <__aeabi_f2d>
 8001068:	4603      	mov	r3, r0
 800106a:	460c      	mov	r4, r1
 800106c:	461a      	mov	r2, r3
 800106e:	4623      	mov	r3, r4
 8001070:	490e      	ldr	r1, [pc, #56]	; (80010ac <main+0x88>)
 8001072:	480c      	ldr	r0, [pc, #48]	; (80010a4 <main+0x80>)
 8001074:	f7ff ffae 	bl	8000fd4 <_ZN5Print5printEPKcz>
          lcd.SetCursor(2, 1);
 8001078:	2201      	movs	r2, #1
 800107a:	2102      	movs	r1, #2
 800107c:	4809      	ldr	r0, [pc, #36]	; (80010a4 <main+0x80>)
 800107e:	f7ff fe05 	bl	8000c8c <_ZN7LCD_I2C9SetCursorEii>
          lcd.print("current: %d A", current);
 8001082:	687a      	ldr	r2, [r7, #4]
 8001084:	490a      	ldr	r1, [pc, #40]	; (80010b0 <main+0x8c>)
 8001086:	4807      	ldr	r0, [pc, #28]	; (80010a4 <main+0x80>)
 8001088:	f7ff ffa4 	bl	8000fd4 <_ZN5Print5printEPKcz>
          HAL_Delay(1000);
 800108c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001090:	f000 fb9a 	bl	80017c8 <HAL_Delay>
          lcd.Clear();
 8001094:	4803      	ldr	r0, [pc, #12]	; (80010a4 <main+0x80>)
 8001096:	f7ff fde3 	bl	8000c60 <_ZN7LCD_I2C5ClearEv>
          HAL_Delay(20);
 800109a:	2014      	movs	r0, #20
 800109c:	f000 fb94 	bl	80017c8 <HAL_Delay>
        //----------------------------------------------/

        /* USER CODE END WHILE */

        /* USER CODE BEGIN 3 */
    }
 80010a0:	e7d6      	b.n	8001050 <main+0x2c>
 80010a2:	bf00      	nop
 80010a4:	200002e4 	.word	0x200002e4
 80010a8:	4363e3d7 	.word	0x4363e3d7
 80010ac:	08005808 	.word	0x08005808
 80010b0:	08005818 	.word	0x08005818

080010b4 <_Z18SystemClock_Configv>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config( void )
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b090      	sub	sp, #64	; 0x40
 80010b8:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct =
 80010ba:	f107 0318 	add.w	r3, r7, #24
 80010be:	2228      	movs	r2, #40	; 0x28
 80010c0:	2100      	movs	r1, #0
 80010c2:	4618      	mov	r0, r3
 80010c4:	f002 fb44 	bl	8003750 <memset>
    { 0 };
    RCC_ClkInitTypeDef RCC_ClkInitStruct =
 80010c8:	1d3b      	adds	r3, r7, #4
 80010ca:	2200      	movs	r2, #0
 80010cc:	601a      	str	r2, [r3, #0]
 80010ce:	605a      	str	r2, [r3, #4]
 80010d0:	609a      	str	r2, [r3, #8]
 80010d2:	60da      	str	r2, [r3, #12]
 80010d4:	611a      	str	r2, [r3, #16]
    { 0 };

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010d6:	2301      	movs	r3, #1
 80010d8:	61bb      	str	r3, [r7, #24]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010de:	61fb      	str	r3, [r7, #28]
    RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80010e0:	2300      	movs	r3, #0
 80010e2:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010e4:	2301      	movs	r3, #1
 80010e6:	62bb      	str	r3, [r7, #40]	; 0x28
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010e8:	2302      	movs	r3, #2
 80010ea:	637b      	str	r3, [r7, #52]	; 0x34
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010f0:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80010f2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80010f6:	63fb      	str	r3, [r7, #60]	; 0x3c
    if ( HAL_RCC_OscConfig( &RCC_OscInitStruct ) != HAL_OK )
 80010f8:	f107 0318 	add.w	r3, r7, #24
 80010fc:	4618      	mov	r0, r3
 80010fe:	f001 fb47 	bl	8002790 <HAL_RCC_OscConfig>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	bf14      	ite	ne
 8001108:	2301      	movne	r3, #1
 800110a:	2300      	moveq	r3, #0
 800110c:	b2db      	uxtb	r3, r3
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <_Z18SystemClock_Configv+0x62>
    {
        Error_Handler();
 8001112:	f000 f935 	bl	8001380 <Error_Handler>
    }
    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001116:	230f      	movs	r3, #15
 8001118:	607b      	str	r3, [r7, #4]
            | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800111a:	2302      	movs	r3, #2
 800111c:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800111e:	2300      	movs	r3, #0
 8001120:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001122:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001126:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001128:	2300      	movs	r3, #0
 800112a:	617b      	str	r3, [r7, #20]

    if ( HAL_RCC_ClockConfig( &RCC_ClkInitStruct, FLASH_LATENCY_2 ) != HAL_OK )
 800112c:	1d3b      	adds	r3, r7, #4
 800112e:	2102      	movs	r1, #2
 8001130:	4618      	mov	r0, r3
 8001132:	f001 fdad 	bl	8002c90 <HAL_RCC_ClockConfig>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	bf14      	ite	ne
 800113c:	2301      	movne	r3, #1
 800113e:	2300      	moveq	r3, #0
 8001140:	b2db      	uxtb	r3, r3
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <_Z18SystemClock_Configv+0x96>
    {
        Error_Handler();
 8001146:	f000 f91b 	bl	8001380 <Error_Handler>
    }
}
 800114a:	bf00      	nop
 800114c:	3740      	adds	r7, #64	; 0x40
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
	...

08001154 <_ZL12MX_I2C1_Initv>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init( void )
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
    /* USER CODE END I2C1_Init 0 */

    /* USER CODE BEGIN I2C1_Init 1 */

    /* USER CODE END I2C1_Init 1 */
    hi2c1.Instance = I2C1;
 8001158:	4b15      	ldr	r3, [pc, #84]	; (80011b0 <_ZL12MX_I2C1_Initv+0x5c>)
 800115a:	4a16      	ldr	r2, [pc, #88]	; (80011b4 <_ZL12MX_I2C1_Initv+0x60>)
 800115c:	601a      	str	r2, [r3, #0]
    hi2c1.Init.ClockSpeed = 100000;
 800115e:	4b14      	ldr	r3, [pc, #80]	; (80011b0 <_ZL12MX_I2C1_Initv+0x5c>)
 8001160:	4a15      	ldr	r2, [pc, #84]	; (80011b8 <_ZL12MX_I2C1_Initv+0x64>)
 8001162:	605a      	str	r2, [r3, #4]
    hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001164:	4b12      	ldr	r3, [pc, #72]	; (80011b0 <_ZL12MX_I2C1_Initv+0x5c>)
 8001166:	2200      	movs	r2, #0
 8001168:	609a      	str	r2, [r3, #8]
    hi2c1.Init.OwnAddress1 = 0;
 800116a:	4b11      	ldr	r3, [pc, #68]	; (80011b0 <_ZL12MX_I2C1_Initv+0x5c>)
 800116c:	2200      	movs	r2, #0
 800116e:	60da      	str	r2, [r3, #12]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001170:	4b0f      	ldr	r3, [pc, #60]	; (80011b0 <_ZL12MX_I2C1_Initv+0x5c>)
 8001172:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001176:	611a      	str	r2, [r3, #16]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001178:	4b0d      	ldr	r3, [pc, #52]	; (80011b0 <_ZL12MX_I2C1_Initv+0x5c>)
 800117a:	2200      	movs	r2, #0
 800117c:	615a      	str	r2, [r3, #20]
    hi2c1.Init.OwnAddress2 = 0;
 800117e:	4b0c      	ldr	r3, [pc, #48]	; (80011b0 <_ZL12MX_I2C1_Initv+0x5c>)
 8001180:	2200      	movs	r2, #0
 8001182:	619a      	str	r2, [r3, #24]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001184:	4b0a      	ldr	r3, [pc, #40]	; (80011b0 <_ZL12MX_I2C1_Initv+0x5c>)
 8001186:	2200      	movs	r2, #0
 8001188:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800118a:	4b09      	ldr	r3, [pc, #36]	; (80011b0 <_ZL12MX_I2C1_Initv+0x5c>)
 800118c:	2200      	movs	r2, #0
 800118e:	621a      	str	r2, [r3, #32]
    if ( HAL_I2C_Init( &hi2c1 ) != HAL_OK )
 8001190:	4807      	ldr	r0, [pc, #28]	; (80011b0 <_ZL12MX_I2C1_Initv+0x5c>)
 8001192:	f000 fd91 	bl	8001cb8 <HAL_I2C_Init>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	bf14      	ite	ne
 800119c:	2301      	movne	r3, #1
 800119e:	2300      	moveq	r3, #0
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <_ZL12MX_I2C1_Initv+0x56>
    {
        Error_Handler();
 80011a6:	f000 f8eb 	bl	8001380 <Error_Handler>
    }
    /* USER CODE BEGIN I2C1_Init 2 */

    /* USER CODE END I2C1_Init 2 */

}
 80011aa:	bf00      	nop
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	20000208 	.word	0x20000208
 80011b4:	40005400 	.word	0x40005400
 80011b8:	000186a0 	.word	0x000186a0

080011bc <_ZL12MX_TIM2_Initv>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init( void )
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b086      	sub	sp, #24
 80011c0:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM2_Init 0 */

    /* USER CODE END TIM2_Init 0 */

    TIM_ClockConfigTypeDef sClockSourceConfig =
 80011c2:	f107 0308 	add.w	r3, r7, #8
 80011c6:	2200      	movs	r2, #0
 80011c8:	601a      	str	r2, [r3, #0]
 80011ca:	605a      	str	r2, [r3, #4]
 80011cc:	609a      	str	r2, [r3, #8]
 80011ce:	60da      	str	r2, [r3, #12]
    { 0 };
    TIM_MasterConfigTypeDef sMasterConfig =
 80011d0:	463b      	mov	r3, r7
 80011d2:	2200      	movs	r2, #0
 80011d4:	601a      	str	r2, [r3, #0]
 80011d6:	605a      	str	r2, [r3, #4]
    { 0 };

    /* USER CODE BEGIN TIM2_Init 1 */

    /* USER CODE END TIM2_Init 1 */
    htim2.Instance = TIM2;
 80011d8:	4b25      	ldr	r3, [pc, #148]	; (8001270 <_ZL12MX_TIM2_Initv+0xb4>)
 80011da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011de:	601a      	str	r2, [r3, #0]
    htim2.Init.Prescaler = 0;
 80011e0:	4b23      	ldr	r3, [pc, #140]	; (8001270 <_ZL12MX_TIM2_Initv+0xb4>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	605a      	str	r2, [r3, #4]
    htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011e6:	4b22      	ldr	r3, [pc, #136]	; (8001270 <_ZL12MX_TIM2_Initv+0xb4>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	609a      	str	r2, [r3, #8]
    htim2.Init.Period = 65535;
 80011ec:	4b20      	ldr	r3, [pc, #128]	; (8001270 <_ZL12MX_TIM2_Initv+0xb4>)
 80011ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011f2:	60da      	str	r2, [r3, #12]
    htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011f4:	4b1e      	ldr	r3, [pc, #120]	; (8001270 <_ZL12MX_TIM2_Initv+0xb4>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	611a      	str	r2, [r3, #16]
    htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011fa:	4b1d      	ldr	r3, [pc, #116]	; (8001270 <_ZL12MX_TIM2_Initv+0xb4>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	619a      	str	r2, [r3, #24]
    if ( HAL_TIM_Base_Init( &htim2 ) != HAL_OK )
 8001200:	481b      	ldr	r0, [pc, #108]	; (8001270 <_ZL12MX_TIM2_Initv+0xb4>)
 8001202:	f001 fee1 	bl	8002fc8 <HAL_TIM_Base_Init>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	bf14      	ite	ne
 800120c:	2301      	movne	r3, #1
 800120e:	2300      	moveq	r3, #0
 8001210:	b2db      	uxtb	r3, r3
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <_ZL12MX_TIM2_Initv+0x5e>
    {
        Error_Handler();
 8001216:	f000 f8b3 	bl	8001380 <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800121a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800121e:	60bb      	str	r3, [r7, #8]
    if ( HAL_TIM_ConfigClockSource( &htim2, &sClockSourceConfig ) != HAL_OK )
 8001220:	f107 0308 	add.w	r3, r7, #8
 8001224:	4619      	mov	r1, r3
 8001226:	4812      	ldr	r0, [pc, #72]	; (8001270 <_ZL12MX_TIM2_Initv+0xb4>)
 8001228:	f001 ff1d 	bl	8003066 <HAL_TIM_ConfigClockSource>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	bf14      	ite	ne
 8001232:	2301      	movne	r3, #1
 8001234:	2300      	moveq	r3, #0
 8001236:	b2db      	uxtb	r3, r3
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <_ZL12MX_TIM2_Initv+0x84>
    {
        Error_Handler();
 800123c:	f000 f8a0 	bl	8001380 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001240:	2300      	movs	r3, #0
 8001242:	603b      	str	r3, [r7, #0]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001244:	2300      	movs	r3, #0
 8001246:	607b      	str	r3, [r7, #4]
    if ( HAL_TIMEx_MasterConfigSynchronization( &htim2, &sMasterConfig )
 8001248:	463b      	mov	r3, r7
 800124a:	4619      	mov	r1, r3
 800124c:	4808      	ldr	r0, [pc, #32]	; (8001270 <_ZL12MX_TIM2_Initv+0xb4>)
 800124e:	f002 f8b9 	bl	80033c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001252:	4603      	mov	r3, r0
            != HAL_OK )
 8001254:	2b00      	cmp	r3, #0
 8001256:	bf14      	ite	ne
 8001258:	2301      	movne	r3, #1
 800125a:	2300      	moveq	r3, #0
 800125c:	b2db      	uxtb	r3, r3
    if ( HAL_TIMEx_MasterConfigSynchronization( &htim2, &sMasterConfig )
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <_ZL12MX_TIM2_Initv+0xaa>
    {
        Error_Handler();
 8001262:	f000 f88d 	bl	8001380 <Error_Handler>
    }
    /* USER CODE BEGIN TIM2_Init 2 */

    /* USER CODE END TIM2_Init 2 */

}
 8001266:	bf00      	nop
 8001268:	3718      	adds	r7, #24
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	2000025c 	.word	0x2000025c

08001274 <_ZL19MX_USART1_UART_Initv>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init( void )
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
    /* USER CODE END USART1_Init 0 */

    /* USER CODE BEGIN USART1_Init 1 */

    /* USER CODE END USART1_Init 1 */
    huart1.Instance = USART1;
 8001278:	4b13      	ldr	r3, [pc, #76]	; (80012c8 <_ZL19MX_USART1_UART_Initv+0x54>)
 800127a:	4a14      	ldr	r2, [pc, #80]	; (80012cc <_ZL19MX_USART1_UART_Initv+0x58>)
 800127c:	601a      	str	r2, [r3, #0]
    huart1.Init.BaudRate = 115200;
 800127e:	4b12      	ldr	r3, [pc, #72]	; (80012c8 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001280:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001284:	605a      	str	r2, [r3, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001286:	4b10      	ldr	r3, [pc, #64]	; (80012c8 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001288:	2200      	movs	r2, #0
 800128a:	609a      	str	r2, [r3, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 800128c:	4b0e      	ldr	r3, [pc, #56]	; (80012c8 <_ZL19MX_USART1_UART_Initv+0x54>)
 800128e:	2200      	movs	r2, #0
 8001290:	60da      	str	r2, [r3, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 8001292:	4b0d      	ldr	r3, [pc, #52]	; (80012c8 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001294:	2200      	movs	r2, #0
 8001296:	611a      	str	r2, [r3, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 8001298:	4b0b      	ldr	r3, [pc, #44]	; (80012c8 <_ZL19MX_USART1_UART_Initv+0x54>)
 800129a:	220c      	movs	r2, #12
 800129c:	615a      	str	r2, [r3, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800129e:	4b0a      	ldr	r3, [pc, #40]	; (80012c8 <_ZL19MX_USART1_UART_Initv+0x54>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	619a      	str	r2, [r3, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012a4:	4b08      	ldr	r3, [pc, #32]	; (80012c8 <_ZL19MX_USART1_UART_Initv+0x54>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	61da      	str	r2, [r3, #28]
    if ( HAL_UART_Init( &huart1 ) != HAL_OK )
 80012aa:	4807      	ldr	r0, [pc, #28]	; (80012c8 <_ZL19MX_USART1_UART_Initv+0x54>)
 80012ac:	f002 f8e8 	bl	8003480 <HAL_UART_Init>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	bf14      	ite	ne
 80012b6:	2301      	movne	r3, #1
 80012b8:	2300      	moveq	r3, #0
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <_ZL19MX_USART1_UART_Initv+0x50>
    {
        Error_Handler();
 80012c0:	f000 f85e 	bl	8001380 <Error_Handler>
    }
    /* USER CODE BEGIN USART1_Init 2 */

    /* USER CODE END USART1_Init 2 */

}
 80012c4:	bf00      	nop
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	200002a4 	.word	0x200002a4
 80012cc:	40013800 	.word	0x40013800

080012d0 <_ZL12MX_GPIO_Initv>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init( void )
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b088      	sub	sp, #32
 80012d4:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct =
 80012d6:	f107 0310 	add.w	r3, r7, #16
 80012da:	2200      	movs	r2, #0
 80012dc:	601a      	str	r2, [r3, #0]
 80012de:	605a      	str	r2, [r3, #4]
 80012e0:	609a      	str	r2, [r3, #8]
 80012e2:	60da      	str	r2, [r3, #12]
    { 0 };

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE( );
 80012e4:	4b24      	ldr	r3, [pc, #144]	; (8001378 <_ZL12MX_GPIO_Initv+0xa8>)
 80012e6:	699b      	ldr	r3, [r3, #24]
 80012e8:	4a23      	ldr	r2, [pc, #140]	; (8001378 <_ZL12MX_GPIO_Initv+0xa8>)
 80012ea:	f043 0310 	orr.w	r3, r3, #16
 80012ee:	6193      	str	r3, [r2, #24]
 80012f0:	4b21      	ldr	r3, [pc, #132]	; (8001378 <_ZL12MX_GPIO_Initv+0xa8>)
 80012f2:	699b      	ldr	r3, [r3, #24]
 80012f4:	f003 0310 	and.w	r3, r3, #16
 80012f8:	60fb      	str	r3, [r7, #12]
 80012fa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE( );
 80012fc:	4b1e      	ldr	r3, [pc, #120]	; (8001378 <_ZL12MX_GPIO_Initv+0xa8>)
 80012fe:	699b      	ldr	r3, [r3, #24]
 8001300:	4a1d      	ldr	r2, [pc, #116]	; (8001378 <_ZL12MX_GPIO_Initv+0xa8>)
 8001302:	f043 0320 	orr.w	r3, r3, #32
 8001306:	6193      	str	r3, [r2, #24]
 8001308:	4b1b      	ldr	r3, [pc, #108]	; (8001378 <_ZL12MX_GPIO_Initv+0xa8>)
 800130a:	699b      	ldr	r3, [r3, #24]
 800130c:	f003 0320 	and.w	r3, r3, #32
 8001310:	60bb      	str	r3, [r7, #8]
 8001312:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE( );
 8001314:	4b18      	ldr	r3, [pc, #96]	; (8001378 <_ZL12MX_GPIO_Initv+0xa8>)
 8001316:	699b      	ldr	r3, [r3, #24]
 8001318:	4a17      	ldr	r2, [pc, #92]	; (8001378 <_ZL12MX_GPIO_Initv+0xa8>)
 800131a:	f043 0304 	orr.w	r3, r3, #4
 800131e:	6193      	str	r3, [r2, #24]
 8001320:	4b15      	ldr	r3, [pc, #84]	; (8001378 <_ZL12MX_GPIO_Initv+0xa8>)
 8001322:	699b      	ldr	r3, [r3, #24]
 8001324:	f003 0304 	and.w	r3, r3, #4
 8001328:	607b      	str	r3, [r7, #4]
 800132a:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE( );
 800132c:	4b12      	ldr	r3, [pc, #72]	; (8001378 <_ZL12MX_GPIO_Initv+0xa8>)
 800132e:	699b      	ldr	r3, [r3, #24]
 8001330:	4a11      	ldr	r2, [pc, #68]	; (8001378 <_ZL12MX_GPIO_Initv+0xa8>)
 8001332:	f043 0308 	orr.w	r3, r3, #8
 8001336:	6193      	str	r3, [r2, #24]
 8001338:	4b0f      	ldr	r3, [pc, #60]	; (8001378 <_ZL12MX_GPIO_Initv+0xa8>)
 800133a:	699b      	ldr	r3, [r3, #24]
 800133c:	f003 0308 	and.w	r3, r3, #8
 8001340:	603b      	str	r3, [r7, #0]
 8001342:	683b      	ldr	r3, [r7, #0]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin( GPIOC, GPIO_PIN_13, GPIO_PIN_RESET );
 8001344:	2200      	movs	r2, #0
 8001346:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800134a:	480c      	ldr	r0, [pc, #48]	; (800137c <_ZL12MX_GPIO_Initv+0xac>)
 800134c:	f000 fc9c 	bl	8001c88 <HAL_GPIO_WritePin>

    /*Configure GPIO pin : PC13 */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001350:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001354:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001356:	2301      	movs	r3, #1
 8001358:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135a:	2300      	movs	r3, #0
 800135c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135e:	2302      	movs	r3, #2
 8001360:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init( GPIOC, &GPIO_InitStruct );
 8001362:	f107 0310 	add.w	r3, r7, #16
 8001366:	4619      	mov	r1, r3
 8001368:	4804      	ldr	r0, [pc, #16]	; (800137c <_ZL12MX_GPIO_Initv+0xac>)
 800136a:	f000 fb33 	bl	80019d4 <HAL_GPIO_Init>

}
 800136e:	bf00      	nop
 8001370:	3720      	adds	r7, #32
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	40021000 	.word	0x40021000
 800137c:	40011000 	.word	0x40011000

08001380 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler( void )
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */

    /* USER CODE END Error_Handler_Debug */
}
 8001384:	bf00      	nop
 8001386:	46bd      	mov	sp, r7
 8001388:	bc80      	pop	{r7}
 800138a:	4770      	bx	lr

0800138c <_Z41__static_initialization_and_destruction_0ii>:
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	6039      	str	r1, [r7, #0]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2b01      	cmp	r3, #1
 800139a:	d109      	bne.n	80013b0 <_Z41__static_initialization_and_destruction_0ii+0x24>
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d104      	bne.n	80013b0 <_Z41__static_initialization_and_destruction_0ii+0x24>
LCD_I2C lcd(&hi2c1);
 80013a6:	2227      	movs	r2, #39	; 0x27
 80013a8:	4909      	ldr	r1, [pc, #36]	; (80013d0 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 80013aa:	480a      	ldr	r0, [pc, #40]	; (80013d4 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 80013ac:	f7ff fb6c 	bl	8000a88 <_ZN7LCD_I2CC1EP17I2C_HandleTypeDefh>
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d107      	bne.n	80013c6 <_Z41__static_initialization_and_destruction_0ii+0x3a>
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013bc:	4293      	cmp	r3, r2
 80013be:	d102      	bne.n	80013c6 <_Z41__static_initialization_and_destruction_0ii+0x3a>
 80013c0:	4804      	ldr	r0, [pc, #16]	; (80013d4 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 80013c2:	f7ff fdd7 	bl	8000f74 <_ZN7LCD_I2CD1Ev>
}
 80013c6:	bf00      	nop
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	20000208 	.word	0x20000208
 80013d4:	200002e4 	.word	0x200002e4

080013d8 <_GLOBAL__sub_I_hi2c1>:
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
 80013dc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80013e0:	2001      	movs	r0, #1
 80013e2:	f7ff ffd3 	bl	800138c <_Z41__static_initialization_and_destruction_0ii>
 80013e6:	bd80      	pop	{r7, pc}

080013e8 <_GLOBAL__sub_D_hi2c1>:
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80013f0:	2000      	movs	r0, #0
 80013f2:	f7ff ffcb 	bl	800138c <_Z41__static_initialization_and_destruction_0ii>
 80013f6:	bd80      	pop	{r7, pc}

080013f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b085      	sub	sp, #20
 80013fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80013fe:	4b15      	ldr	r3, [pc, #84]	; (8001454 <HAL_MspInit+0x5c>)
 8001400:	699b      	ldr	r3, [r3, #24]
 8001402:	4a14      	ldr	r2, [pc, #80]	; (8001454 <HAL_MspInit+0x5c>)
 8001404:	f043 0301 	orr.w	r3, r3, #1
 8001408:	6193      	str	r3, [r2, #24]
 800140a:	4b12      	ldr	r3, [pc, #72]	; (8001454 <HAL_MspInit+0x5c>)
 800140c:	699b      	ldr	r3, [r3, #24]
 800140e:	f003 0301 	and.w	r3, r3, #1
 8001412:	60bb      	str	r3, [r7, #8]
 8001414:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001416:	4b0f      	ldr	r3, [pc, #60]	; (8001454 <HAL_MspInit+0x5c>)
 8001418:	69db      	ldr	r3, [r3, #28]
 800141a:	4a0e      	ldr	r2, [pc, #56]	; (8001454 <HAL_MspInit+0x5c>)
 800141c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001420:	61d3      	str	r3, [r2, #28]
 8001422:	4b0c      	ldr	r3, [pc, #48]	; (8001454 <HAL_MspInit+0x5c>)
 8001424:	69db      	ldr	r3, [r3, #28]
 8001426:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800142a:	607b      	str	r3, [r7, #4]
 800142c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800142e:	4b0a      	ldr	r3, [pc, #40]	; (8001458 <HAL_MspInit+0x60>)
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	60fb      	str	r3, [r7, #12]
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800143a:	60fb      	str	r3, [r7, #12]
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001442:	60fb      	str	r3, [r7, #12]
 8001444:	4a04      	ldr	r2, [pc, #16]	; (8001458 <HAL_MspInit+0x60>)
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800144a:	bf00      	nop
 800144c:	3714      	adds	r7, #20
 800144e:	46bd      	mov	sp, r7
 8001450:	bc80      	pop	{r7}
 8001452:	4770      	bx	lr
 8001454:	40021000 	.word	0x40021000
 8001458:	40010000 	.word	0x40010000

0800145c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b088      	sub	sp, #32
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001464:	f107 0310 	add.w	r3, r7, #16
 8001468:	2200      	movs	r2, #0
 800146a:	601a      	str	r2, [r3, #0]
 800146c:	605a      	str	r2, [r3, #4]
 800146e:	609a      	str	r2, [r3, #8]
 8001470:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a15      	ldr	r2, [pc, #84]	; (80014cc <HAL_I2C_MspInit+0x70>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d123      	bne.n	80014c4 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800147c:	4b14      	ldr	r3, [pc, #80]	; (80014d0 <HAL_I2C_MspInit+0x74>)
 800147e:	699b      	ldr	r3, [r3, #24]
 8001480:	4a13      	ldr	r2, [pc, #76]	; (80014d0 <HAL_I2C_MspInit+0x74>)
 8001482:	f043 0308 	orr.w	r3, r3, #8
 8001486:	6193      	str	r3, [r2, #24]
 8001488:	4b11      	ldr	r3, [pc, #68]	; (80014d0 <HAL_I2C_MspInit+0x74>)
 800148a:	699b      	ldr	r3, [r3, #24]
 800148c:	f003 0308 	and.w	r3, r3, #8
 8001490:	60fb      	str	r3, [r7, #12]
 8001492:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001494:	23c0      	movs	r3, #192	; 0xc0
 8001496:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001498:	2312      	movs	r3, #18
 800149a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800149c:	2303      	movs	r3, #3
 800149e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014a0:	f107 0310 	add.w	r3, r7, #16
 80014a4:	4619      	mov	r1, r3
 80014a6:	480b      	ldr	r0, [pc, #44]	; (80014d4 <HAL_I2C_MspInit+0x78>)
 80014a8:	f000 fa94 	bl	80019d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014ac:	4b08      	ldr	r3, [pc, #32]	; (80014d0 <HAL_I2C_MspInit+0x74>)
 80014ae:	69db      	ldr	r3, [r3, #28]
 80014b0:	4a07      	ldr	r2, [pc, #28]	; (80014d0 <HAL_I2C_MspInit+0x74>)
 80014b2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014b6:	61d3      	str	r3, [r2, #28]
 80014b8:	4b05      	ldr	r3, [pc, #20]	; (80014d0 <HAL_I2C_MspInit+0x74>)
 80014ba:	69db      	ldr	r3, [r3, #28]
 80014bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014c0:	60bb      	str	r3, [r7, #8]
 80014c2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80014c4:	bf00      	nop
 80014c6:	3720      	adds	r7, #32
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	40005400 	.word	0x40005400
 80014d0:	40021000 	.word	0x40021000
 80014d4:	40010c00 	.word	0x40010c00

080014d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014d8:	b480      	push	{r7}
 80014da:	b085      	sub	sp, #20
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014e8:	d10b      	bne.n	8001502 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014ea:	4b08      	ldr	r3, [pc, #32]	; (800150c <HAL_TIM_Base_MspInit+0x34>)
 80014ec:	69db      	ldr	r3, [r3, #28]
 80014ee:	4a07      	ldr	r2, [pc, #28]	; (800150c <HAL_TIM_Base_MspInit+0x34>)
 80014f0:	f043 0301 	orr.w	r3, r3, #1
 80014f4:	61d3      	str	r3, [r2, #28]
 80014f6:	4b05      	ldr	r3, [pc, #20]	; (800150c <HAL_TIM_Base_MspInit+0x34>)
 80014f8:	69db      	ldr	r3, [r3, #28]
 80014fa:	f003 0301 	and.w	r3, r3, #1
 80014fe:	60fb      	str	r3, [r7, #12]
 8001500:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001502:	bf00      	nop
 8001504:	3714      	adds	r7, #20
 8001506:	46bd      	mov	sp, r7
 8001508:	bc80      	pop	{r7}
 800150a:	4770      	bx	lr
 800150c:	40021000 	.word	0x40021000

08001510 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b088      	sub	sp, #32
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001518:	f107 0310 	add.w	r3, r7, #16
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]
 8001520:	605a      	str	r2, [r3, #4]
 8001522:	609a      	str	r2, [r3, #8]
 8001524:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a1c      	ldr	r2, [pc, #112]	; (800159c <HAL_UART_MspInit+0x8c>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d131      	bne.n	8001594 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001530:	4b1b      	ldr	r3, [pc, #108]	; (80015a0 <HAL_UART_MspInit+0x90>)
 8001532:	699b      	ldr	r3, [r3, #24]
 8001534:	4a1a      	ldr	r2, [pc, #104]	; (80015a0 <HAL_UART_MspInit+0x90>)
 8001536:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800153a:	6193      	str	r3, [r2, #24]
 800153c:	4b18      	ldr	r3, [pc, #96]	; (80015a0 <HAL_UART_MspInit+0x90>)
 800153e:	699b      	ldr	r3, [r3, #24]
 8001540:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001544:	60fb      	str	r3, [r7, #12]
 8001546:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001548:	4b15      	ldr	r3, [pc, #84]	; (80015a0 <HAL_UART_MspInit+0x90>)
 800154a:	699b      	ldr	r3, [r3, #24]
 800154c:	4a14      	ldr	r2, [pc, #80]	; (80015a0 <HAL_UART_MspInit+0x90>)
 800154e:	f043 0304 	orr.w	r3, r3, #4
 8001552:	6193      	str	r3, [r2, #24]
 8001554:	4b12      	ldr	r3, [pc, #72]	; (80015a0 <HAL_UART_MspInit+0x90>)
 8001556:	699b      	ldr	r3, [r3, #24]
 8001558:	f003 0304 	and.w	r3, r3, #4
 800155c:	60bb      	str	r3, [r7, #8]
 800155e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001560:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001564:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001566:	2302      	movs	r3, #2
 8001568:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800156a:	2303      	movs	r3, #3
 800156c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800156e:	f107 0310 	add.w	r3, r7, #16
 8001572:	4619      	mov	r1, r3
 8001574:	480b      	ldr	r0, [pc, #44]	; (80015a4 <HAL_UART_MspInit+0x94>)
 8001576:	f000 fa2d 	bl	80019d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800157a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800157e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001580:	2300      	movs	r3, #0
 8001582:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001584:	2300      	movs	r3, #0
 8001586:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001588:	f107 0310 	add.w	r3, r7, #16
 800158c:	4619      	mov	r1, r3
 800158e:	4805      	ldr	r0, [pc, #20]	; (80015a4 <HAL_UART_MspInit+0x94>)
 8001590:	f000 fa20 	bl	80019d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001594:	bf00      	nop
 8001596:	3720      	adds	r7, #32
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	40013800 	.word	0x40013800
 80015a0:	40021000 	.word	0x40021000
 80015a4:	40010800 	.word	0x40010800

080015a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80015ac:	bf00      	nop
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bc80      	pop	{r7}
 80015b2:	4770      	bx	lr

080015b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015b8:	e7fe      	b.n	80015b8 <HardFault_Handler+0x4>

080015ba <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015ba:	b480      	push	{r7}
 80015bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015be:	e7fe      	b.n	80015be <MemManage_Handler+0x4>

080015c0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015c4:	e7fe      	b.n	80015c4 <BusFault_Handler+0x4>

080015c6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015c6:	b480      	push	{r7}
 80015c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015ca:	e7fe      	b.n	80015ca <UsageFault_Handler+0x4>

080015cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015d0:	bf00      	nop
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bc80      	pop	{r7}
 80015d6:	4770      	bx	lr

080015d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015dc:	bf00      	nop
 80015de:	46bd      	mov	sp, r7
 80015e0:	bc80      	pop	{r7}
 80015e2:	4770      	bx	lr

080015e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015e8:	bf00      	nop
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bc80      	pop	{r7}
 80015ee:	4770      	bx	lr

080015f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015f4:	f000 f8cc 	bl	8001790 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015f8:	bf00      	nop
 80015fa:	bd80      	pop	{r7, pc}

080015fc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
	return 1;
 8001600:	2301      	movs	r3, #1
}
 8001602:	4618      	mov	r0, r3
 8001604:	46bd      	mov	sp, r7
 8001606:	bc80      	pop	{r7}
 8001608:	4770      	bx	lr

0800160a <_kill>:

int _kill(int pid, int sig)
{
 800160a:	b580      	push	{r7, lr}
 800160c:	b082      	sub	sp, #8
 800160e:	af00      	add	r7, sp, #0
 8001610:	6078      	str	r0, [r7, #4]
 8001612:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001614:	f002 f830 	bl	8003678 <__errno>
 8001618:	4602      	mov	r2, r0
 800161a:	2316      	movs	r3, #22
 800161c:	6013      	str	r3, [r2, #0]
	return -1;
 800161e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001622:	4618      	mov	r0, r3
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}

0800162a <_exit>:

void _exit (int status)
{
 800162a:	b580      	push	{r7, lr}
 800162c:	b082      	sub	sp, #8
 800162e:	af00      	add	r7, sp, #0
 8001630:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001632:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	f7ff ffe7 	bl	800160a <_kill>
	while (1) {}		/* Make sure we hang here */
 800163c:	e7fe      	b.n	800163c <_exit+0x12>
	...

08001640 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b086      	sub	sp, #24
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001648:	4a14      	ldr	r2, [pc, #80]	; (800169c <_sbrk+0x5c>)
 800164a:	4b15      	ldr	r3, [pc, #84]	; (80016a0 <_sbrk+0x60>)
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001654:	4b13      	ldr	r3, [pc, #76]	; (80016a4 <_sbrk+0x64>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d102      	bne.n	8001662 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800165c:	4b11      	ldr	r3, [pc, #68]	; (80016a4 <_sbrk+0x64>)
 800165e:	4a12      	ldr	r2, [pc, #72]	; (80016a8 <_sbrk+0x68>)
 8001660:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001662:	4b10      	ldr	r3, [pc, #64]	; (80016a4 <_sbrk+0x64>)
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	4413      	add	r3, r2
 800166a:	693a      	ldr	r2, [r7, #16]
 800166c:	429a      	cmp	r2, r3
 800166e:	d207      	bcs.n	8001680 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001670:	f002 f802 	bl	8003678 <__errno>
 8001674:	4602      	mov	r2, r0
 8001676:	230c      	movs	r3, #12
 8001678:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800167a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800167e:	e009      	b.n	8001694 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001680:	4b08      	ldr	r3, [pc, #32]	; (80016a4 <_sbrk+0x64>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001686:	4b07      	ldr	r3, [pc, #28]	; (80016a4 <_sbrk+0x64>)
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4413      	add	r3, r2
 800168e:	4a05      	ldr	r2, [pc, #20]	; (80016a4 <_sbrk+0x64>)
 8001690:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001692:	68fb      	ldr	r3, [r7, #12]
}
 8001694:	4618      	mov	r0, r3
 8001696:	3718      	adds	r7, #24
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	20005000 	.word	0x20005000
 80016a0:	00000400 	.word	0x00000400
 80016a4:	200002f8 	.word	0x200002f8
 80016a8:	20000310 	.word	0x20000310

080016ac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016b0:	bf00      	nop
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bc80      	pop	{r7}
 80016b6:	4770      	bx	lr

080016b8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80016b8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80016ba:	e003      	b.n	80016c4 <LoopCopyDataInit>

080016bc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80016bc:	4b0b      	ldr	r3, [pc, #44]	; (80016ec <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80016be:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80016c0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80016c2:	3104      	adds	r1, #4

080016c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80016c4:	480a      	ldr	r0, [pc, #40]	; (80016f0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80016c6:	4b0b      	ldr	r3, [pc, #44]	; (80016f4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80016c8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80016ca:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80016cc:	d3f6      	bcc.n	80016bc <CopyDataInit>
  ldr r2, =_sbss
 80016ce:	4a0a      	ldr	r2, [pc, #40]	; (80016f8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80016d0:	e002      	b.n	80016d8 <LoopFillZerobss>

080016d2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80016d2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80016d4:	f842 3b04 	str.w	r3, [r2], #4

080016d8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80016d8:	4b08      	ldr	r3, [pc, #32]	; (80016fc <LoopFillZerobss+0x24>)
  cmp r2, r3
 80016da:	429a      	cmp	r2, r3
  bcc FillZerobss
 80016dc:	d3f9      	bcc.n	80016d2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80016de:	f7ff ffe5 	bl	80016ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016e2:	f001 ffcf 	bl	8003684 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80016e6:	f7ff fc9d 	bl	8001024 <main>
  bx lr
 80016ea:	4770      	bx	lr
  ldr r3, =_sidata
 80016ec:	08005b00 	.word	0x08005b00
  ldr r0, =_sdata
 80016f0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80016f4:	200001e4 	.word	0x200001e4
  ldr r2, =_sbss
 80016f8:	200001e4 	.word	0x200001e4
  ldr r3, = _ebss
 80016fc:	2000030c 	.word	0x2000030c

08001700 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001700:	e7fe      	b.n	8001700 <ADC1_2_IRQHandler>
	...

08001704 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001708:	4b08      	ldr	r3, [pc, #32]	; (800172c <HAL_Init+0x28>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a07      	ldr	r2, [pc, #28]	; (800172c <HAL_Init+0x28>)
 800170e:	f043 0310 	orr.w	r3, r3, #16
 8001712:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001714:	2003      	movs	r0, #3
 8001716:	f000 f929 	bl	800196c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800171a:	2000      	movs	r0, #0
 800171c:	f000 f808 	bl	8001730 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001720:	f7ff fe6a 	bl	80013f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001724:	2300      	movs	r3, #0
}
 8001726:	4618      	mov	r0, r3
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	40022000 	.word	0x40022000

08001730 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001738:	4b12      	ldr	r3, [pc, #72]	; (8001784 <HAL_InitTick+0x54>)
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	4b12      	ldr	r3, [pc, #72]	; (8001788 <HAL_InitTick+0x58>)
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	4619      	mov	r1, r3
 8001742:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001746:	fbb3 f3f1 	udiv	r3, r3, r1
 800174a:	fbb2 f3f3 	udiv	r3, r2, r3
 800174e:	4618      	mov	r0, r3
 8001750:	f000 f933 	bl	80019ba <HAL_SYSTICK_Config>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e00e      	b.n	800177c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2b0f      	cmp	r3, #15
 8001762:	d80a      	bhi.n	800177a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001764:	2200      	movs	r2, #0
 8001766:	6879      	ldr	r1, [r7, #4]
 8001768:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800176c:	f000 f909 	bl	8001982 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001770:	4a06      	ldr	r2, [pc, #24]	; (800178c <HAL_InitTick+0x5c>)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001776:	2300      	movs	r3, #0
 8001778:	e000      	b.n	800177c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
}
 800177c:	4618      	mov	r0, r3
 800177e:	3708      	adds	r7, #8
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	20000004 	.word	0x20000004
 8001788:	2000000c 	.word	0x2000000c
 800178c:	20000008 	.word	0x20000008

08001790 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001794:	4b05      	ldr	r3, [pc, #20]	; (80017ac <HAL_IncTick+0x1c>)
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	461a      	mov	r2, r3
 800179a:	4b05      	ldr	r3, [pc, #20]	; (80017b0 <HAL_IncTick+0x20>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4413      	add	r3, r2
 80017a0:	4a03      	ldr	r2, [pc, #12]	; (80017b0 <HAL_IncTick+0x20>)
 80017a2:	6013      	str	r3, [r2, #0]
}
 80017a4:	bf00      	nop
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bc80      	pop	{r7}
 80017aa:	4770      	bx	lr
 80017ac:	2000000c 	.word	0x2000000c
 80017b0:	20000304 	.word	0x20000304

080017b4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  return uwTick;
 80017b8:	4b02      	ldr	r3, [pc, #8]	; (80017c4 <HAL_GetTick+0x10>)
 80017ba:	681b      	ldr	r3, [r3, #0]
}
 80017bc:	4618      	mov	r0, r3
 80017be:	46bd      	mov	sp, r7
 80017c0:	bc80      	pop	{r7}
 80017c2:	4770      	bx	lr
 80017c4:	20000304 	.word	0x20000304

080017c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b084      	sub	sp, #16
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017d0:	f7ff fff0 	bl	80017b4 <HAL_GetTick>
 80017d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80017e0:	d005      	beq.n	80017ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017e2:	4b09      	ldr	r3, [pc, #36]	; (8001808 <HAL_Delay+0x40>)
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	461a      	mov	r2, r3
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	4413      	add	r3, r2
 80017ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017ee:	bf00      	nop
 80017f0:	f7ff ffe0 	bl	80017b4 <HAL_GetTick>
 80017f4:	4602      	mov	r2, r0
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	68fa      	ldr	r2, [r7, #12]
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d8f7      	bhi.n	80017f0 <HAL_Delay+0x28>
  {
  }
}
 8001800:	bf00      	nop
 8001802:	3710      	adds	r7, #16
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	2000000c 	.word	0x2000000c

0800180c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800180c:	b480      	push	{r7}
 800180e:	b085      	sub	sp, #20
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	f003 0307 	and.w	r3, r3, #7
 800181a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800181c:	4b0c      	ldr	r3, [pc, #48]	; (8001850 <__NVIC_SetPriorityGrouping+0x44>)
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001822:	68ba      	ldr	r2, [r7, #8]
 8001824:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001828:	4013      	ands	r3, r2
 800182a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001834:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001838:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800183c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800183e:	4a04      	ldr	r2, [pc, #16]	; (8001850 <__NVIC_SetPriorityGrouping+0x44>)
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	60d3      	str	r3, [r2, #12]
}
 8001844:	bf00      	nop
 8001846:	3714      	adds	r7, #20
 8001848:	46bd      	mov	sp, r7
 800184a:	bc80      	pop	{r7}
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	e000ed00 	.word	0xe000ed00

08001854 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001858:	4b04      	ldr	r3, [pc, #16]	; (800186c <__NVIC_GetPriorityGrouping+0x18>)
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	0a1b      	lsrs	r3, r3, #8
 800185e:	f003 0307 	and.w	r3, r3, #7
}
 8001862:	4618      	mov	r0, r3
 8001864:	46bd      	mov	sp, r7
 8001866:	bc80      	pop	{r7}
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	e000ed00 	.word	0xe000ed00

08001870 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	4603      	mov	r3, r0
 8001878:	6039      	str	r1, [r7, #0]
 800187a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800187c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001880:	2b00      	cmp	r3, #0
 8001882:	db0a      	blt.n	800189a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	b2da      	uxtb	r2, r3
 8001888:	490c      	ldr	r1, [pc, #48]	; (80018bc <__NVIC_SetPriority+0x4c>)
 800188a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800188e:	0112      	lsls	r2, r2, #4
 8001890:	b2d2      	uxtb	r2, r2
 8001892:	440b      	add	r3, r1
 8001894:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001898:	e00a      	b.n	80018b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	b2da      	uxtb	r2, r3
 800189e:	4908      	ldr	r1, [pc, #32]	; (80018c0 <__NVIC_SetPriority+0x50>)
 80018a0:	79fb      	ldrb	r3, [r7, #7]
 80018a2:	f003 030f 	and.w	r3, r3, #15
 80018a6:	3b04      	subs	r3, #4
 80018a8:	0112      	lsls	r2, r2, #4
 80018aa:	b2d2      	uxtb	r2, r2
 80018ac:	440b      	add	r3, r1
 80018ae:	761a      	strb	r2, [r3, #24]
}
 80018b0:	bf00      	nop
 80018b2:	370c      	adds	r7, #12
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bc80      	pop	{r7}
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	e000e100 	.word	0xe000e100
 80018c0:	e000ed00 	.word	0xe000ed00

080018c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b089      	sub	sp, #36	; 0x24
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	60f8      	str	r0, [r7, #12]
 80018cc:	60b9      	str	r1, [r7, #8]
 80018ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	f003 0307 	and.w	r3, r3, #7
 80018d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	f1c3 0307 	rsb	r3, r3, #7
 80018de:	2b04      	cmp	r3, #4
 80018e0:	bf28      	it	cs
 80018e2:	2304      	movcs	r3, #4
 80018e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	3304      	adds	r3, #4
 80018ea:	2b06      	cmp	r3, #6
 80018ec:	d902      	bls.n	80018f4 <NVIC_EncodePriority+0x30>
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	3b03      	subs	r3, #3
 80018f2:	e000      	b.n	80018f6 <NVIC_EncodePriority+0x32>
 80018f4:	2300      	movs	r3, #0
 80018f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80018fc:	69bb      	ldr	r3, [r7, #24]
 80018fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001902:	43da      	mvns	r2, r3
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	401a      	ands	r2, r3
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800190c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	fa01 f303 	lsl.w	r3, r1, r3
 8001916:	43d9      	mvns	r1, r3
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800191c:	4313      	orrs	r3, r2
         );
}
 800191e:	4618      	mov	r0, r3
 8001920:	3724      	adds	r7, #36	; 0x24
 8001922:	46bd      	mov	sp, r7
 8001924:	bc80      	pop	{r7}
 8001926:	4770      	bx	lr

08001928 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	3b01      	subs	r3, #1
 8001934:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001938:	d301      	bcc.n	800193e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800193a:	2301      	movs	r3, #1
 800193c:	e00f      	b.n	800195e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800193e:	4a0a      	ldr	r2, [pc, #40]	; (8001968 <SysTick_Config+0x40>)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	3b01      	subs	r3, #1
 8001944:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001946:	210f      	movs	r1, #15
 8001948:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800194c:	f7ff ff90 	bl	8001870 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001950:	4b05      	ldr	r3, [pc, #20]	; (8001968 <SysTick_Config+0x40>)
 8001952:	2200      	movs	r2, #0
 8001954:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001956:	4b04      	ldr	r3, [pc, #16]	; (8001968 <SysTick_Config+0x40>)
 8001958:	2207      	movs	r2, #7
 800195a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800195c:	2300      	movs	r3, #0
}
 800195e:	4618      	mov	r0, r3
 8001960:	3708      	adds	r7, #8
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	e000e010 	.word	0xe000e010

0800196c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001974:	6878      	ldr	r0, [r7, #4]
 8001976:	f7ff ff49 	bl	800180c <__NVIC_SetPriorityGrouping>
}
 800197a:	bf00      	nop
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}

08001982 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001982:	b580      	push	{r7, lr}
 8001984:	b086      	sub	sp, #24
 8001986:	af00      	add	r7, sp, #0
 8001988:	4603      	mov	r3, r0
 800198a:	60b9      	str	r1, [r7, #8]
 800198c:	607a      	str	r2, [r7, #4]
 800198e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001990:	2300      	movs	r3, #0
 8001992:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001994:	f7ff ff5e 	bl	8001854 <__NVIC_GetPriorityGrouping>
 8001998:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800199a:	687a      	ldr	r2, [r7, #4]
 800199c:	68b9      	ldr	r1, [r7, #8]
 800199e:	6978      	ldr	r0, [r7, #20]
 80019a0:	f7ff ff90 	bl	80018c4 <NVIC_EncodePriority>
 80019a4:	4602      	mov	r2, r0
 80019a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019aa:	4611      	mov	r1, r2
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7ff ff5f 	bl	8001870 <__NVIC_SetPriority>
}
 80019b2:	bf00      	nop
 80019b4:	3718      	adds	r7, #24
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}

080019ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019ba:	b580      	push	{r7, lr}
 80019bc:	b082      	sub	sp, #8
 80019be:	af00      	add	r7, sp, #0
 80019c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f7ff ffb0 	bl	8001928 <SysTick_Config>
 80019c8:	4603      	mov	r3, r0
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3708      	adds	r7, #8
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
	...

080019d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b08b      	sub	sp, #44	; 0x2c
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019de:	2300      	movs	r3, #0
 80019e0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80019e2:	2300      	movs	r3, #0
 80019e4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019e6:	e127      	b.n	8001c38 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80019e8:	2201      	movs	r2, #1
 80019ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ec:	fa02 f303 	lsl.w	r3, r2, r3
 80019f0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	69fa      	ldr	r2, [r7, #28]
 80019f8:	4013      	ands	r3, r2
 80019fa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80019fc:	69ba      	ldr	r2, [r7, #24]
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	429a      	cmp	r2, r3
 8001a02:	f040 8116 	bne.w	8001c32 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	2b12      	cmp	r3, #18
 8001a0c:	d034      	beq.n	8001a78 <HAL_GPIO_Init+0xa4>
 8001a0e:	2b12      	cmp	r3, #18
 8001a10:	d80d      	bhi.n	8001a2e <HAL_GPIO_Init+0x5a>
 8001a12:	2b02      	cmp	r3, #2
 8001a14:	d02b      	beq.n	8001a6e <HAL_GPIO_Init+0x9a>
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d804      	bhi.n	8001a24 <HAL_GPIO_Init+0x50>
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d031      	beq.n	8001a82 <HAL_GPIO_Init+0xae>
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d01c      	beq.n	8001a5c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a22:	e048      	b.n	8001ab6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001a24:	2b03      	cmp	r3, #3
 8001a26:	d043      	beq.n	8001ab0 <HAL_GPIO_Init+0xdc>
 8001a28:	2b11      	cmp	r3, #17
 8001a2a:	d01b      	beq.n	8001a64 <HAL_GPIO_Init+0x90>
          break;
 8001a2c:	e043      	b.n	8001ab6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001a2e:	4a89      	ldr	r2, [pc, #548]	; (8001c54 <HAL_GPIO_Init+0x280>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d026      	beq.n	8001a82 <HAL_GPIO_Init+0xae>
 8001a34:	4a87      	ldr	r2, [pc, #540]	; (8001c54 <HAL_GPIO_Init+0x280>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d806      	bhi.n	8001a48 <HAL_GPIO_Init+0x74>
 8001a3a:	4a87      	ldr	r2, [pc, #540]	; (8001c58 <HAL_GPIO_Init+0x284>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d020      	beq.n	8001a82 <HAL_GPIO_Init+0xae>
 8001a40:	4a86      	ldr	r2, [pc, #536]	; (8001c5c <HAL_GPIO_Init+0x288>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d01d      	beq.n	8001a82 <HAL_GPIO_Init+0xae>
          break;
 8001a46:	e036      	b.n	8001ab6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001a48:	4a85      	ldr	r2, [pc, #532]	; (8001c60 <HAL_GPIO_Init+0x28c>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d019      	beq.n	8001a82 <HAL_GPIO_Init+0xae>
 8001a4e:	4a85      	ldr	r2, [pc, #532]	; (8001c64 <HAL_GPIO_Init+0x290>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d016      	beq.n	8001a82 <HAL_GPIO_Init+0xae>
 8001a54:	4a84      	ldr	r2, [pc, #528]	; (8001c68 <HAL_GPIO_Init+0x294>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d013      	beq.n	8001a82 <HAL_GPIO_Init+0xae>
          break;
 8001a5a:	e02c      	b.n	8001ab6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	623b      	str	r3, [r7, #32]
          break;
 8001a62:	e028      	b.n	8001ab6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	3304      	adds	r3, #4
 8001a6a:	623b      	str	r3, [r7, #32]
          break;
 8001a6c:	e023      	b.n	8001ab6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	68db      	ldr	r3, [r3, #12]
 8001a72:	3308      	adds	r3, #8
 8001a74:	623b      	str	r3, [r7, #32]
          break;
 8001a76:	e01e      	b.n	8001ab6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	330c      	adds	r3, #12
 8001a7e:	623b      	str	r3, [r7, #32]
          break;
 8001a80:	e019      	b.n	8001ab6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d102      	bne.n	8001a90 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a8a:	2304      	movs	r3, #4
 8001a8c:	623b      	str	r3, [r7, #32]
          break;
 8001a8e:	e012      	b.n	8001ab6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d105      	bne.n	8001aa4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a98:	2308      	movs	r3, #8
 8001a9a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	69fa      	ldr	r2, [r7, #28]
 8001aa0:	611a      	str	r2, [r3, #16]
          break;
 8001aa2:	e008      	b.n	8001ab6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001aa4:	2308      	movs	r3, #8
 8001aa6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	69fa      	ldr	r2, [r7, #28]
 8001aac:	615a      	str	r2, [r3, #20]
          break;
 8001aae:	e002      	b.n	8001ab6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	623b      	str	r3, [r7, #32]
          break;
 8001ab4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ab6:	69bb      	ldr	r3, [r7, #24]
 8001ab8:	2bff      	cmp	r3, #255	; 0xff
 8001aba:	d801      	bhi.n	8001ac0 <HAL_GPIO_Init+0xec>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	e001      	b.n	8001ac4 <HAL_GPIO_Init+0xf0>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	3304      	adds	r3, #4
 8001ac4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ac6:	69bb      	ldr	r3, [r7, #24]
 8001ac8:	2bff      	cmp	r3, #255	; 0xff
 8001aca:	d802      	bhi.n	8001ad2 <HAL_GPIO_Init+0xfe>
 8001acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	e002      	b.n	8001ad8 <HAL_GPIO_Init+0x104>
 8001ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad4:	3b08      	subs	r3, #8
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	210f      	movs	r1, #15
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ae6:	43db      	mvns	r3, r3
 8001ae8:	401a      	ands	r2, r3
 8001aea:	6a39      	ldr	r1, [r7, #32]
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	fa01 f303 	lsl.w	r3, r1, r3
 8001af2:	431a      	orrs	r2, r3
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	f000 8096 	beq.w	8001c32 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b06:	4b59      	ldr	r3, [pc, #356]	; (8001c6c <HAL_GPIO_Init+0x298>)
 8001b08:	699b      	ldr	r3, [r3, #24]
 8001b0a:	4a58      	ldr	r2, [pc, #352]	; (8001c6c <HAL_GPIO_Init+0x298>)
 8001b0c:	f043 0301 	orr.w	r3, r3, #1
 8001b10:	6193      	str	r3, [r2, #24]
 8001b12:	4b56      	ldr	r3, [pc, #344]	; (8001c6c <HAL_GPIO_Init+0x298>)
 8001b14:	699b      	ldr	r3, [r3, #24]
 8001b16:	f003 0301 	and.w	r3, r3, #1
 8001b1a:	60bb      	str	r3, [r7, #8]
 8001b1c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b1e:	4a54      	ldr	r2, [pc, #336]	; (8001c70 <HAL_GPIO_Init+0x29c>)
 8001b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b22:	089b      	lsrs	r3, r3, #2
 8001b24:	3302      	adds	r3, #2
 8001b26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b2a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2e:	f003 0303 	and.w	r3, r3, #3
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	220f      	movs	r2, #15
 8001b36:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3a:	43db      	mvns	r3, r3
 8001b3c:	68fa      	ldr	r2, [r7, #12]
 8001b3e:	4013      	ands	r3, r2
 8001b40:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	4a4b      	ldr	r2, [pc, #300]	; (8001c74 <HAL_GPIO_Init+0x2a0>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d013      	beq.n	8001b72 <HAL_GPIO_Init+0x19e>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	4a4a      	ldr	r2, [pc, #296]	; (8001c78 <HAL_GPIO_Init+0x2a4>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d00d      	beq.n	8001b6e <HAL_GPIO_Init+0x19a>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4a49      	ldr	r2, [pc, #292]	; (8001c7c <HAL_GPIO_Init+0x2a8>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d007      	beq.n	8001b6a <HAL_GPIO_Init+0x196>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4a48      	ldr	r2, [pc, #288]	; (8001c80 <HAL_GPIO_Init+0x2ac>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d101      	bne.n	8001b66 <HAL_GPIO_Init+0x192>
 8001b62:	2303      	movs	r3, #3
 8001b64:	e006      	b.n	8001b74 <HAL_GPIO_Init+0x1a0>
 8001b66:	2304      	movs	r3, #4
 8001b68:	e004      	b.n	8001b74 <HAL_GPIO_Init+0x1a0>
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	e002      	b.n	8001b74 <HAL_GPIO_Init+0x1a0>
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e000      	b.n	8001b74 <HAL_GPIO_Init+0x1a0>
 8001b72:	2300      	movs	r3, #0
 8001b74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b76:	f002 0203 	and.w	r2, r2, #3
 8001b7a:	0092      	lsls	r2, r2, #2
 8001b7c:	4093      	lsls	r3, r2
 8001b7e:	68fa      	ldr	r2, [r7, #12]
 8001b80:	4313      	orrs	r3, r2
 8001b82:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b84:	493a      	ldr	r1, [pc, #232]	; (8001c70 <HAL_GPIO_Init+0x29c>)
 8001b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b88:	089b      	lsrs	r3, r3, #2
 8001b8a:	3302      	adds	r3, #2
 8001b8c:	68fa      	ldr	r2, [r7, #12]
 8001b8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d006      	beq.n	8001bac <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b9e:	4b39      	ldr	r3, [pc, #228]	; (8001c84 <HAL_GPIO_Init+0x2b0>)
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	4938      	ldr	r1, [pc, #224]	; (8001c84 <HAL_GPIO_Init+0x2b0>)
 8001ba4:	69bb      	ldr	r3, [r7, #24]
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	600b      	str	r3, [r1, #0]
 8001baa:	e006      	b.n	8001bba <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001bac:	4b35      	ldr	r3, [pc, #212]	; (8001c84 <HAL_GPIO_Init+0x2b0>)
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	69bb      	ldr	r3, [r7, #24]
 8001bb2:	43db      	mvns	r3, r3
 8001bb4:	4933      	ldr	r1, [pc, #204]	; (8001c84 <HAL_GPIO_Init+0x2b0>)
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d006      	beq.n	8001bd4 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001bc6:	4b2f      	ldr	r3, [pc, #188]	; (8001c84 <HAL_GPIO_Init+0x2b0>)
 8001bc8:	685a      	ldr	r2, [r3, #4]
 8001bca:	492e      	ldr	r1, [pc, #184]	; (8001c84 <HAL_GPIO_Init+0x2b0>)
 8001bcc:	69bb      	ldr	r3, [r7, #24]
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	604b      	str	r3, [r1, #4]
 8001bd2:	e006      	b.n	8001be2 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001bd4:	4b2b      	ldr	r3, [pc, #172]	; (8001c84 <HAL_GPIO_Init+0x2b0>)
 8001bd6:	685a      	ldr	r2, [r3, #4]
 8001bd8:	69bb      	ldr	r3, [r7, #24]
 8001bda:	43db      	mvns	r3, r3
 8001bdc:	4929      	ldr	r1, [pc, #164]	; (8001c84 <HAL_GPIO_Init+0x2b0>)
 8001bde:	4013      	ands	r3, r2
 8001be0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d006      	beq.n	8001bfc <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001bee:	4b25      	ldr	r3, [pc, #148]	; (8001c84 <HAL_GPIO_Init+0x2b0>)
 8001bf0:	689a      	ldr	r2, [r3, #8]
 8001bf2:	4924      	ldr	r1, [pc, #144]	; (8001c84 <HAL_GPIO_Init+0x2b0>)
 8001bf4:	69bb      	ldr	r3, [r7, #24]
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	608b      	str	r3, [r1, #8]
 8001bfa:	e006      	b.n	8001c0a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001bfc:	4b21      	ldr	r3, [pc, #132]	; (8001c84 <HAL_GPIO_Init+0x2b0>)
 8001bfe:	689a      	ldr	r2, [r3, #8]
 8001c00:	69bb      	ldr	r3, [r7, #24]
 8001c02:	43db      	mvns	r3, r3
 8001c04:	491f      	ldr	r1, [pc, #124]	; (8001c84 <HAL_GPIO_Init+0x2b0>)
 8001c06:	4013      	ands	r3, r2
 8001c08:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d006      	beq.n	8001c24 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c16:	4b1b      	ldr	r3, [pc, #108]	; (8001c84 <HAL_GPIO_Init+0x2b0>)
 8001c18:	68da      	ldr	r2, [r3, #12]
 8001c1a:	491a      	ldr	r1, [pc, #104]	; (8001c84 <HAL_GPIO_Init+0x2b0>)
 8001c1c:	69bb      	ldr	r3, [r7, #24]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	60cb      	str	r3, [r1, #12]
 8001c22:	e006      	b.n	8001c32 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c24:	4b17      	ldr	r3, [pc, #92]	; (8001c84 <HAL_GPIO_Init+0x2b0>)
 8001c26:	68da      	ldr	r2, [r3, #12]
 8001c28:	69bb      	ldr	r3, [r7, #24]
 8001c2a:	43db      	mvns	r3, r3
 8001c2c:	4915      	ldr	r1, [pc, #84]	; (8001c84 <HAL_GPIO_Init+0x2b0>)
 8001c2e:	4013      	ands	r3, r2
 8001c30:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c34:	3301      	adds	r3, #1
 8001c36:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3e:	fa22 f303 	lsr.w	r3, r2, r3
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	f47f aed0 	bne.w	80019e8 <HAL_GPIO_Init+0x14>
  }
}
 8001c48:	bf00      	nop
 8001c4a:	372c      	adds	r7, #44	; 0x2c
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bc80      	pop	{r7}
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	10210000 	.word	0x10210000
 8001c58:	10110000 	.word	0x10110000
 8001c5c:	10120000 	.word	0x10120000
 8001c60:	10310000 	.word	0x10310000
 8001c64:	10320000 	.word	0x10320000
 8001c68:	10220000 	.word	0x10220000
 8001c6c:	40021000 	.word	0x40021000
 8001c70:	40010000 	.word	0x40010000
 8001c74:	40010800 	.word	0x40010800
 8001c78:	40010c00 	.word	0x40010c00
 8001c7c:	40011000 	.word	0x40011000
 8001c80:	40011400 	.word	0x40011400
 8001c84:	40010400 	.word	0x40010400

08001c88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	460b      	mov	r3, r1
 8001c92:	807b      	strh	r3, [r7, #2]
 8001c94:	4613      	mov	r3, r2
 8001c96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c98:	787b      	ldrb	r3, [r7, #1]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d003      	beq.n	8001ca6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c9e:	887a      	ldrh	r2, [r7, #2]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ca4:	e003      	b.n	8001cae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ca6:	887b      	ldrh	r3, [r7, #2]
 8001ca8:	041a      	lsls	r2, r3, #16
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	611a      	str	r2, [r3, #16]
}
 8001cae:	bf00      	nop
 8001cb0:	370c      	adds	r7, #12
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bc80      	pop	{r7}
 8001cb6:	4770      	bx	lr

08001cb8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d101      	bne.n	8001cca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e11f      	b.n	8001f0a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d106      	bne.n	8001ce4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f7ff fbbc 	bl	800145c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2224      	movs	r2, #36	; 0x24
 8001ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f022 0201 	bic.w	r2, r2, #1
 8001cfa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d0a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d1a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001d1c:	f001 f90e 	bl	8002f3c <HAL_RCC_GetPCLK1Freq>
 8001d20:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	4a7b      	ldr	r2, [pc, #492]	; (8001f14 <HAL_I2C_Init+0x25c>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d807      	bhi.n	8001d3c <HAL_I2C_Init+0x84>
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	4a7a      	ldr	r2, [pc, #488]	; (8001f18 <HAL_I2C_Init+0x260>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	bf94      	ite	ls
 8001d34:	2301      	movls	r3, #1
 8001d36:	2300      	movhi	r3, #0
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	e006      	b.n	8001d4a <HAL_I2C_Init+0x92>
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	4a77      	ldr	r2, [pc, #476]	; (8001f1c <HAL_I2C_Init+0x264>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	bf94      	ite	ls
 8001d44:	2301      	movls	r3, #1
 8001d46:	2300      	movhi	r3, #0
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d001      	beq.n	8001d52 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e0db      	b.n	8001f0a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	4a72      	ldr	r2, [pc, #456]	; (8001f20 <HAL_I2C_Init+0x268>)
 8001d56:	fba2 2303 	umull	r2, r3, r2, r3
 8001d5a:	0c9b      	lsrs	r3, r3, #18
 8001d5c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	68ba      	ldr	r2, [r7, #8]
 8001d6e:	430a      	orrs	r2, r1
 8001d70:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	6a1b      	ldr	r3, [r3, #32]
 8001d78:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	4a64      	ldr	r2, [pc, #400]	; (8001f14 <HAL_I2C_Init+0x25c>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d802      	bhi.n	8001d8c <HAL_I2C_Init+0xd4>
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	3301      	adds	r3, #1
 8001d8a:	e009      	b.n	8001da0 <HAL_I2C_Init+0xe8>
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001d92:	fb02 f303 	mul.w	r3, r2, r3
 8001d96:	4a63      	ldr	r2, [pc, #396]	; (8001f24 <HAL_I2C_Init+0x26c>)
 8001d98:	fba2 2303 	umull	r2, r3, r2, r3
 8001d9c:	099b      	lsrs	r3, r3, #6
 8001d9e:	3301      	adds	r3, #1
 8001da0:	687a      	ldr	r2, [r7, #4]
 8001da2:	6812      	ldr	r2, [r2, #0]
 8001da4:	430b      	orrs	r3, r1
 8001da6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	69db      	ldr	r3, [r3, #28]
 8001dae:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001db2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	4956      	ldr	r1, [pc, #344]	; (8001f14 <HAL_I2C_Init+0x25c>)
 8001dbc:	428b      	cmp	r3, r1
 8001dbe:	d80d      	bhi.n	8001ddc <HAL_I2C_Init+0x124>
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	1e59      	subs	r1, r3, #1
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	005b      	lsls	r3, r3, #1
 8001dca:	fbb1 f3f3 	udiv	r3, r1, r3
 8001dce:	3301      	adds	r3, #1
 8001dd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dd4:	2b04      	cmp	r3, #4
 8001dd6:	bf38      	it	cc
 8001dd8:	2304      	movcc	r3, #4
 8001dda:	e04f      	b.n	8001e7c <HAL_I2C_Init+0x1c4>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d111      	bne.n	8001e08 <HAL_I2C_Init+0x150>
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	1e58      	subs	r0, r3, #1
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6859      	ldr	r1, [r3, #4]
 8001dec:	460b      	mov	r3, r1
 8001dee:	005b      	lsls	r3, r3, #1
 8001df0:	440b      	add	r3, r1
 8001df2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001df6:	3301      	adds	r3, #1
 8001df8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	bf0c      	ite	eq
 8001e00:	2301      	moveq	r3, #1
 8001e02:	2300      	movne	r3, #0
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	e012      	b.n	8001e2e <HAL_I2C_Init+0x176>
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	1e58      	subs	r0, r3, #1
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6859      	ldr	r1, [r3, #4]
 8001e10:	460b      	mov	r3, r1
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	440b      	add	r3, r1
 8001e16:	0099      	lsls	r1, r3, #2
 8001e18:	440b      	add	r3, r1
 8001e1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e1e:	3301      	adds	r3, #1
 8001e20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	bf0c      	ite	eq
 8001e28:	2301      	moveq	r3, #1
 8001e2a:	2300      	movne	r3, #0
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <HAL_I2C_Init+0x17e>
 8001e32:	2301      	movs	r3, #1
 8001e34:	e022      	b.n	8001e7c <HAL_I2C_Init+0x1c4>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d10e      	bne.n	8001e5c <HAL_I2C_Init+0x1a4>
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	1e58      	subs	r0, r3, #1
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6859      	ldr	r1, [r3, #4]
 8001e46:	460b      	mov	r3, r1
 8001e48:	005b      	lsls	r3, r3, #1
 8001e4a:	440b      	add	r3, r1
 8001e4c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e50:	3301      	adds	r3, #1
 8001e52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e5a:	e00f      	b.n	8001e7c <HAL_I2C_Init+0x1c4>
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	1e58      	subs	r0, r3, #1
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6859      	ldr	r1, [r3, #4]
 8001e64:	460b      	mov	r3, r1
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	440b      	add	r3, r1
 8001e6a:	0099      	lsls	r1, r3, #2
 8001e6c:	440b      	add	r3, r1
 8001e6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e72:	3301      	adds	r3, #1
 8001e74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e78:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e7c:	6879      	ldr	r1, [r7, #4]
 8001e7e:	6809      	ldr	r1, [r1, #0]
 8001e80:	4313      	orrs	r3, r2
 8001e82:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	69da      	ldr	r2, [r3, #28]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6a1b      	ldr	r3, [r3, #32]
 8001e96:	431a      	orrs	r2, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	430a      	orrs	r2, r1
 8001e9e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001eaa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	6911      	ldr	r1, [r2, #16]
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	68d2      	ldr	r2, [r2, #12]
 8001eb6:	4311      	orrs	r1, r2
 8001eb8:	687a      	ldr	r2, [r7, #4]
 8001eba:	6812      	ldr	r2, [r2, #0]
 8001ebc:	430b      	orrs	r3, r1
 8001ebe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	68db      	ldr	r3, [r3, #12]
 8001ec6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	695a      	ldr	r2, [r3, #20]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	699b      	ldr	r3, [r3, #24]
 8001ed2:	431a      	orrs	r2, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	430a      	orrs	r2, r1
 8001eda:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f042 0201 	orr.w	r2, r2, #1
 8001eea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2220      	movs	r2, #32
 8001ef6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2200      	movs	r2, #0
 8001efe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2200      	movs	r2, #0
 8001f04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001f08:	2300      	movs	r3, #0
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3710      	adds	r7, #16
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	000186a0 	.word	0x000186a0
 8001f18:	001e847f 	.word	0x001e847f
 8001f1c:	003d08ff 	.word	0x003d08ff
 8001f20:	431bde83 	.word	0x431bde83
 8001f24:	10624dd3 	.word	0x10624dd3

08001f28 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b088      	sub	sp, #32
 8001f2c:	af02      	add	r7, sp, #8
 8001f2e:	60f8      	str	r0, [r7, #12]
 8001f30:	607a      	str	r2, [r7, #4]
 8001f32:	461a      	mov	r2, r3
 8001f34:	460b      	mov	r3, r1
 8001f36:	817b      	strh	r3, [r7, #10]
 8001f38:	4613      	mov	r3, r2
 8001f3a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001f3c:	f7ff fc3a 	bl	80017b4 <HAL_GetTick>
 8001f40:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	2b20      	cmp	r3, #32
 8001f4c:	f040 80e0 	bne.w	8002110 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	9300      	str	r3, [sp, #0]
 8001f54:	2319      	movs	r3, #25
 8001f56:	2201      	movs	r2, #1
 8001f58:	4970      	ldr	r1, [pc, #448]	; (800211c <HAL_I2C_Master_Transmit+0x1f4>)
 8001f5a:	68f8      	ldr	r0, [r7, #12]
 8001f5c:	f000 fa92 	bl	8002484 <I2C_WaitOnFlagUntilTimeout>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d001      	beq.n	8001f6a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001f66:	2302      	movs	r3, #2
 8001f68:	e0d3      	b.n	8002112 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d101      	bne.n	8001f78 <HAL_I2C_Master_Transmit+0x50>
 8001f74:	2302      	movs	r3, #2
 8001f76:	e0cc      	b.n	8002112 <HAL_I2C_Master_Transmit+0x1ea>
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0301 	and.w	r3, r3, #1
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d007      	beq.n	8001f9e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f042 0201 	orr.w	r2, r2, #1
 8001f9c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fac:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	2221      	movs	r2, #33	; 0x21
 8001fb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	2210      	movs	r2, #16
 8001fba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	893a      	ldrh	r2, [r7, #8]
 8001fce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fd4:	b29a      	uxth	r2, r3
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	4a50      	ldr	r2, [pc, #320]	; (8002120 <HAL_I2C_Master_Transmit+0x1f8>)
 8001fde:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001fe0:	8979      	ldrh	r1, [r7, #10]
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	6a3a      	ldr	r2, [r7, #32]
 8001fe6:	68f8      	ldr	r0, [r7, #12]
 8001fe8:	f000 f9ca 	bl	8002380 <I2C_MasterRequestWrite>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d001      	beq.n	8001ff6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e08d      	b.n	8002112 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	613b      	str	r3, [r7, #16]
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	695b      	ldr	r3, [r3, #20]
 8002000:	613b      	str	r3, [r7, #16]
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	699b      	ldr	r3, [r3, #24]
 8002008:	613b      	str	r3, [r7, #16]
 800200a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800200c:	e066      	b.n	80020dc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800200e:	697a      	ldr	r2, [r7, #20]
 8002010:	6a39      	ldr	r1, [r7, #32]
 8002012:	68f8      	ldr	r0, [r7, #12]
 8002014:	f000 fb0c 	bl	8002630 <I2C_WaitOnTXEFlagUntilTimeout>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d00d      	beq.n	800203a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002022:	2b04      	cmp	r3, #4
 8002024:	d107      	bne.n	8002036 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002034:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e06b      	b.n	8002112 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800203e:	781a      	ldrb	r2, [r3, #0]
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800204a:	1c5a      	adds	r2, r3, #1
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002054:	b29b      	uxth	r3, r3
 8002056:	3b01      	subs	r3, #1
 8002058:	b29a      	uxth	r2, r3
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002062:	3b01      	subs	r3, #1
 8002064:	b29a      	uxth	r2, r3
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	695b      	ldr	r3, [r3, #20]
 8002070:	f003 0304 	and.w	r3, r3, #4
 8002074:	2b04      	cmp	r3, #4
 8002076:	d11b      	bne.n	80020b0 <HAL_I2C_Master_Transmit+0x188>
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800207c:	2b00      	cmp	r3, #0
 800207e:	d017      	beq.n	80020b0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002084:	781a      	ldrb	r2, [r3, #0]
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002090:	1c5a      	adds	r2, r3, #1
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800209a:	b29b      	uxth	r3, r3
 800209c:	3b01      	subs	r3, #1
 800209e:	b29a      	uxth	r2, r3
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020a8:	3b01      	subs	r3, #1
 80020aa:	b29a      	uxth	r2, r3
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020b0:	697a      	ldr	r2, [r7, #20]
 80020b2:	6a39      	ldr	r1, [r7, #32]
 80020b4:	68f8      	ldr	r0, [r7, #12]
 80020b6:	f000 fafc 	bl	80026b2 <I2C_WaitOnBTFFlagUntilTimeout>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d00d      	beq.n	80020dc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c4:	2b04      	cmp	r3, #4
 80020c6:	d107      	bne.n	80020d8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020d6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	e01a      	b.n	8002112 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d194      	bne.n	800200e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	2220      	movs	r2, #32
 80020f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	2200      	movs	r2, #0
 8002100:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	2200      	movs	r2, #0
 8002108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800210c:	2300      	movs	r3, #0
 800210e:	e000      	b.n	8002112 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002110:	2302      	movs	r3, #2
  }
}
 8002112:	4618      	mov	r0, r3
 8002114:	3718      	adds	r7, #24
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	00100002 	.word	0x00100002
 8002120:	ffff0000 	.word	0xffff0000

08002124 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b08a      	sub	sp, #40	; 0x28
 8002128:	af02      	add	r7, sp, #8
 800212a:	60f8      	str	r0, [r7, #12]
 800212c:	607a      	str	r2, [r7, #4]
 800212e:	603b      	str	r3, [r7, #0]
 8002130:	460b      	mov	r3, r1
 8002132:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002134:	f7ff fb3e 	bl	80017b4 <HAL_GetTick>
 8002138:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800213a:	2301      	movs	r3, #1
 800213c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002144:	b2db      	uxtb	r3, r3
 8002146:	2b20      	cmp	r3, #32
 8002148:	f040 8111 	bne.w	800236e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	9300      	str	r3, [sp, #0]
 8002150:	2319      	movs	r3, #25
 8002152:	2201      	movs	r2, #1
 8002154:	4988      	ldr	r1, [pc, #544]	; (8002378 <HAL_I2C_IsDeviceReady+0x254>)
 8002156:	68f8      	ldr	r0, [r7, #12]
 8002158:	f000 f994 	bl	8002484 <I2C_WaitOnFlagUntilTimeout>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d001      	beq.n	8002166 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002162:	2302      	movs	r3, #2
 8002164:	e104      	b.n	8002370 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800216c:	2b01      	cmp	r3, #1
 800216e:	d101      	bne.n	8002174 <HAL_I2C_IsDeviceReady+0x50>
 8002170:	2302      	movs	r3, #2
 8002172:	e0fd      	b.n	8002370 <HAL_I2C_IsDeviceReady+0x24c>
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2201      	movs	r2, #1
 8002178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0301 	and.w	r3, r3, #1
 8002186:	2b01      	cmp	r3, #1
 8002188:	d007      	beq.n	800219a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f042 0201 	orr.w	r2, r2, #1
 8002198:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021a8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	2224      	movs	r2, #36	; 0x24
 80021ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2200      	movs	r2, #0
 80021b6:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	4a70      	ldr	r2, [pc, #448]	; (800237c <HAL_I2C_IsDeviceReady+0x258>)
 80021bc:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80021cc:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	9300      	str	r3, [sp, #0]
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	2200      	movs	r2, #0
 80021d6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80021da:	68f8      	ldr	r0, [r7, #12]
 80021dc:	f000 f952 	bl	8002484 <I2C_WaitOnFlagUntilTimeout>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d00d      	beq.n	8002202 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021f4:	d103      	bne.n	80021fe <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021fc:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80021fe:	2303      	movs	r3, #3
 8002200:	e0b6      	b.n	8002370 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002202:	897b      	ldrh	r3, [r7, #10]
 8002204:	b2db      	uxtb	r3, r3
 8002206:	461a      	mov	r2, r3
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002210:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002212:	f7ff facf 	bl	80017b4 <HAL_GetTick>
 8002216:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	695b      	ldr	r3, [r3, #20]
 800221e:	f003 0302 	and.w	r3, r3, #2
 8002222:	2b02      	cmp	r3, #2
 8002224:	bf0c      	ite	eq
 8002226:	2301      	moveq	r3, #1
 8002228:	2300      	movne	r3, #0
 800222a:	b2db      	uxtb	r3, r3
 800222c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	695b      	ldr	r3, [r3, #20]
 8002234:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002238:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800223c:	bf0c      	ite	eq
 800223e:	2301      	moveq	r3, #1
 8002240:	2300      	movne	r3, #0
 8002242:	b2db      	uxtb	r3, r3
 8002244:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002246:	e025      	b.n	8002294 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002248:	f7ff fab4 	bl	80017b4 <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	683a      	ldr	r2, [r7, #0]
 8002254:	429a      	cmp	r2, r3
 8002256:	d302      	bcc.n	800225e <HAL_I2C_IsDeviceReady+0x13a>
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d103      	bne.n	8002266 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	22a0      	movs	r2, #160	; 0xa0
 8002262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	695b      	ldr	r3, [r3, #20]
 800226c:	f003 0302 	and.w	r3, r3, #2
 8002270:	2b02      	cmp	r3, #2
 8002272:	bf0c      	ite	eq
 8002274:	2301      	moveq	r3, #1
 8002276:	2300      	movne	r3, #0
 8002278:	b2db      	uxtb	r3, r3
 800227a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	695b      	ldr	r3, [r3, #20]
 8002282:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002286:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800228a:	bf0c      	ite	eq
 800228c:	2301      	moveq	r3, #1
 800228e:	2300      	movne	r3, #0
 8002290:	b2db      	uxtb	r3, r3
 8002292:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800229a:	b2db      	uxtb	r3, r3
 800229c:	2ba0      	cmp	r3, #160	; 0xa0
 800229e:	d005      	beq.n	80022ac <HAL_I2C_IsDeviceReady+0x188>
 80022a0:	7dfb      	ldrb	r3, [r7, #23]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d102      	bne.n	80022ac <HAL_I2C_IsDeviceReady+0x188>
 80022a6:	7dbb      	ldrb	r3, [r7, #22]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d0cd      	beq.n	8002248 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2220      	movs	r2, #32
 80022b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	695b      	ldr	r3, [r3, #20]
 80022ba:	f003 0302 	and.w	r3, r3, #2
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d129      	bne.n	8002316 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022d0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022d2:	2300      	movs	r3, #0
 80022d4:	613b      	str	r3, [r7, #16]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	695b      	ldr	r3, [r3, #20]
 80022dc:	613b      	str	r3, [r7, #16]
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	699b      	ldr	r3, [r3, #24]
 80022e4:	613b      	str	r3, [r7, #16]
 80022e6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	9300      	str	r3, [sp, #0]
 80022ec:	2319      	movs	r3, #25
 80022ee:	2201      	movs	r2, #1
 80022f0:	4921      	ldr	r1, [pc, #132]	; (8002378 <HAL_I2C_IsDeviceReady+0x254>)
 80022f2:	68f8      	ldr	r0, [r7, #12]
 80022f4:	f000 f8c6 	bl	8002484 <I2C_WaitOnFlagUntilTimeout>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d001      	beq.n	8002302 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e036      	b.n	8002370 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2220      	movs	r2, #32
 8002306:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2200      	movs	r2, #0
 800230e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002312:	2300      	movs	r3, #0
 8002314:	e02c      	b.n	8002370 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002324:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800232e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002330:	69fb      	ldr	r3, [r7, #28]
 8002332:	9300      	str	r3, [sp, #0]
 8002334:	2319      	movs	r3, #25
 8002336:	2201      	movs	r2, #1
 8002338:	490f      	ldr	r1, [pc, #60]	; (8002378 <HAL_I2C_IsDeviceReady+0x254>)
 800233a:	68f8      	ldr	r0, [r7, #12]
 800233c:	f000 f8a2 	bl	8002484 <I2C_WaitOnFlagUntilTimeout>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d001      	beq.n	800234a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e012      	b.n	8002370 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800234a:	69bb      	ldr	r3, [r7, #24]
 800234c:	3301      	adds	r3, #1
 800234e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002350:	69ba      	ldr	r2, [r7, #24]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	429a      	cmp	r2, r3
 8002356:	f4ff af32 	bcc.w	80021be <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	2220      	movs	r2, #32
 800235e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	2200      	movs	r2, #0
 8002366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e000      	b.n	8002370 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800236e:	2302      	movs	r3, #2
  }
}
 8002370:	4618      	mov	r0, r3
 8002372:	3720      	adds	r7, #32
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	00100002 	.word	0x00100002
 800237c:	ffff0000 	.word	0xffff0000

08002380 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b088      	sub	sp, #32
 8002384:	af02      	add	r7, sp, #8
 8002386:	60f8      	str	r0, [r7, #12]
 8002388:	607a      	str	r2, [r7, #4]
 800238a:	603b      	str	r3, [r7, #0]
 800238c:	460b      	mov	r3, r1
 800238e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002394:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	2b08      	cmp	r3, #8
 800239a:	d006      	beq.n	80023aa <I2C_MasterRequestWrite+0x2a>
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d003      	beq.n	80023aa <I2C_MasterRequestWrite+0x2a>
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80023a8:	d108      	bne.n	80023bc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023b8:	601a      	str	r2, [r3, #0]
 80023ba:	e00b      	b.n	80023d4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c0:	2b12      	cmp	r3, #18
 80023c2:	d107      	bne.n	80023d4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023d2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	9300      	str	r3, [sp, #0]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2200      	movs	r2, #0
 80023dc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80023e0:	68f8      	ldr	r0, [r7, #12]
 80023e2:	f000 f84f 	bl	8002484 <I2C_WaitOnFlagUntilTimeout>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d00d      	beq.n	8002408 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023fa:	d103      	bne.n	8002404 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002402:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002404:	2303      	movs	r3, #3
 8002406:	e035      	b.n	8002474 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	691b      	ldr	r3, [r3, #16]
 800240c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002410:	d108      	bne.n	8002424 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002412:	897b      	ldrh	r3, [r7, #10]
 8002414:	b2db      	uxtb	r3, r3
 8002416:	461a      	mov	r2, r3
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002420:	611a      	str	r2, [r3, #16]
 8002422:	e01b      	b.n	800245c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002424:	897b      	ldrh	r3, [r7, #10]
 8002426:	11db      	asrs	r3, r3, #7
 8002428:	b2db      	uxtb	r3, r3
 800242a:	f003 0306 	and.w	r3, r3, #6
 800242e:	b2db      	uxtb	r3, r3
 8002430:	f063 030f 	orn	r3, r3, #15
 8002434:	b2da      	uxtb	r2, r3
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	490e      	ldr	r1, [pc, #56]	; (800247c <I2C_MasterRequestWrite+0xfc>)
 8002442:	68f8      	ldr	r0, [r7, #12]
 8002444:	f000 f875 	bl	8002532 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d001      	beq.n	8002452 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e010      	b.n	8002474 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002452:	897b      	ldrh	r3, [r7, #10]
 8002454:	b2da      	uxtb	r2, r3
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	687a      	ldr	r2, [r7, #4]
 8002460:	4907      	ldr	r1, [pc, #28]	; (8002480 <I2C_MasterRequestWrite+0x100>)
 8002462:	68f8      	ldr	r0, [r7, #12]
 8002464:	f000 f865 	bl	8002532 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d001      	beq.n	8002472 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e000      	b.n	8002474 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002472:	2300      	movs	r3, #0
}
 8002474:	4618      	mov	r0, r3
 8002476:	3718      	adds	r7, #24
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	00010008 	.word	0x00010008
 8002480:	00010002 	.word	0x00010002

08002484 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	60f8      	str	r0, [r7, #12]
 800248c:	60b9      	str	r1, [r7, #8]
 800248e:	603b      	str	r3, [r7, #0]
 8002490:	4613      	mov	r3, r2
 8002492:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002494:	e025      	b.n	80024e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800249c:	d021      	beq.n	80024e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800249e:	f7ff f989 	bl	80017b4 <HAL_GetTick>
 80024a2:	4602      	mov	r2, r0
 80024a4:	69bb      	ldr	r3, [r7, #24]
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	683a      	ldr	r2, [r7, #0]
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d302      	bcc.n	80024b4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d116      	bne.n	80024e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2200      	movs	r2, #0
 80024b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2220      	movs	r2, #32
 80024be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2200      	movs	r2, #0
 80024c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ce:	f043 0220 	orr.w	r2, r3, #32
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2200      	movs	r2, #0
 80024da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e023      	b.n	800252a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	0c1b      	lsrs	r3, r3, #16
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d10d      	bne.n	8002508 <I2C_WaitOnFlagUntilTimeout+0x84>
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	695b      	ldr	r3, [r3, #20]
 80024f2:	43da      	mvns	r2, r3
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	4013      	ands	r3, r2
 80024f8:	b29b      	uxth	r3, r3
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	bf0c      	ite	eq
 80024fe:	2301      	moveq	r3, #1
 8002500:	2300      	movne	r3, #0
 8002502:	b2db      	uxtb	r3, r3
 8002504:	461a      	mov	r2, r3
 8002506:	e00c      	b.n	8002522 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	699b      	ldr	r3, [r3, #24]
 800250e:	43da      	mvns	r2, r3
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	4013      	ands	r3, r2
 8002514:	b29b      	uxth	r3, r3
 8002516:	2b00      	cmp	r3, #0
 8002518:	bf0c      	ite	eq
 800251a:	2301      	moveq	r3, #1
 800251c:	2300      	movne	r3, #0
 800251e:	b2db      	uxtb	r3, r3
 8002520:	461a      	mov	r2, r3
 8002522:	79fb      	ldrb	r3, [r7, #7]
 8002524:	429a      	cmp	r2, r3
 8002526:	d0b6      	beq.n	8002496 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002528:	2300      	movs	r3, #0
}
 800252a:	4618      	mov	r0, r3
 800252c:	3710      	adds	r7, #16
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}

08002532 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002532:	b580      	push	{r7, lr}
 8002534:	b084      	sub	sp, #16
 8002536:	af00      	add	r7, sp, #0
 8002538:	60f8      	str	r0, [r7, #12]
 800253a:	60b9      	str	r1, [r7, #8]
 800253c:	607a      	str	r2, [r7, #4]
 800253e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002540:	e051      	b.n	80025e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	695b      	ldr	r3, [r3, #20]
 8002548:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800254c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002550:	d123      	bne.n	800259a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002560:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800256a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2200      	movs	r2, #0
 8002570:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2220      	movs	r2, #32
 8002576:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	2200      	movs	r2, #0
 800257e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002586:	f043 0204 	orr.w	r2, r3, #4
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2200      	movs	r2, #0
 8002592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e046      	b.n	8002628 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80025a0:	d021      	beq.n	80025e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025a2:	f7ff f907 	bl	80017b4 <HAL_GetTick>
 80025a6:	4602      	mov	r2, r0
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	687a      	ldr	r2, [r7, #4]
 80025ae:	429a      	cmp	r2, r3
 80025b0:	d302      	bcc.n	80025b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d116      	bne.n	80025e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2200      	movs	r2, #0
 80025bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2220      	movs	r2, #32
 80025c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2200      	movs	r2, #0
 80025ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d2:	f043 0220 	orr.w	r2, r3, #32
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2200      	movs	r2, #0
 80025de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e020      	b.n	8002628 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	0c1b      	lsrs	r3, r3, #16
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d10c      	bne.n	800260a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	695b      	ldr	r3, [r3, #20]
 80025f6:	43da      	mvns	r2, r3
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	4013      	ands	r3, r2
 80025fc:	b29b      	uxth	r3, r3
 80025fe:	2b00      	cmp	r3, #0
 8002600:	bf14      	ite	ne
 8002602:	2301      	movne	r3, #1
 8002604:	2300      	moveq	r3, #0
 8002606:	b2db      	uxtb	r3, r3
 8002608:	e00b      	b.n	8002622 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	699b      	ldr	r3, [r3, #24]
 8002610:	43da      	mvns	r2, r3
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	4013      	ands	r3, r2
 8002616:	b29b      	uxth	r3, r3
 8002618:	2b00      	cmp	r3, #0
 800261a:	bf14      	ite	ne
 800261c:	2301      	movne	r3, #1
 800261e:	2300      	moveq	r3, #0
 8002620:	b2db      	uxtb	r3, r3
 8002622:	2b00      	cmp	r3, #0
 8002624:	d18d      	bne.n	8002542 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002626:	2300      	movs	r3, #0
}
 8002628:	4618      	mov	r0, r3
 800262a:	3710      	adds	r7, #16
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}

08002630 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b084      	sub	sp, #16
 8002634:	af00      	add	r7, sp, #0
 8002636:	60f8      	str	r0, [r7, #12]
 8002638:	60b9      	str	r1, [r7, #8]
 800263a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800263c:	e02d      	b.n	800269a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800263e:	68f8      	ldr	r0, [r7, #12]
 8002640:	f000 f878 	bl	8002734 <I2C_IsAcknowledgeFailed>
 8002644:	4603      	mov	r3, r0
 8002646:	2b00      	cmp	r3, #0
 8002648:	d001      	beq.n	800264e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e02d      	b.n	80026aa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002654:	d021      	beq.n	800269a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002656:	f7ff f8ad 	bl	80017b4 <HAL_GetTick>
 800265a:	4602      	mov	r2, r0
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	68ba      	ldr	r2, [r7, #8]
 8002662:	429a      	cmp	r2, r3
 8002664:	d302      	bcc.n	800266c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d116      	bne.n	800269a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2200      	movs	r2, #0
 8002670:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2220      	movs	r2, #32
 8002676:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2200      	movs	r2, #0
 800267e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002686:	f043 0220 	orr.w	r2, r3, #32
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2200      	movs	r2, #0
 8002692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e007      	b.n	80026aa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	695b      	ldr	r3, [r3, #20]
 80026a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026a4:	2b80      	cmp	r3, #128	; 0x80
 80026a6:	d1ca      	bne.n	800263e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80026a8:	2300      	movs	r3, #0
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3710      	adds	r7, #16
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}

080026b2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80026b2:	b580      	push	{r7, lr}
 80026b4:	b084      	sub	sp, #16
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	60f8      	str	r0, [r7, #12]
 80026ba:	60b9      	str	r1, [r7, #8]
 80026bc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80026be:	e02d      	b.n	800271c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80026c0:	68f8      	ldr	r0, [r7, #12]
 80026c2:	f000 f837 	bl	8002734 <I2C_IsAcknowledgeFailed>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d001      	beq.n	80026d0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	e02d      	b.n	800272c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026d6:	d021      	beq.n	800271c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026d8:	f7ff f86c 	bl	80017b4 <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	68ba      	ldr	r2, [r7, #8]
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d302      	bcc.n	80026ee <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d116      	bne.n	800271c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	2200      	movs	r2, #0
 80026f2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2220      	movs	r2, #32
 80026f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2200      	movs	r2, #0
 8002700:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002708:	f043 0220 	orr.w	r2, r3, #32
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2200      	movs	r2, #0
 8002714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	e007      	b.n	800272c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	695b      	ldr	r3, [r3, #20]
 8002722:	f003 0304 	and.w	r3, r3, #4
 8002726:	2b04      	cmp	r3, #4
 8002728:	d1ca      	bne.n	80026c0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800272a:	2300      	movs	r3, #0
}
 800272c:	4618      	mov	r0, r3
 800272e:	3710      	adds	r7, #16
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}

08002734 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	695b      	ldr	r3, [r3, #20]
 8002742:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002746:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800274a:	d11b      	bne.n	8002784 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002754:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2200      	movs	r2, #0
 800275a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2220      	movs	r2, #32
 8002760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2200      	movs	r2, #0
 8002768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002770:	f043 0204 	orr.w	r2, r3, #4
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2200      	movs	r2, #0
 800277c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e000      	b.n	8002786 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002784:	2300      	movs	r3, #0
}
 8002786:	4618      	mov	r0, r3
 8002788:	370c      	adds	r7, #12
 800278a:	46bd      	mov	sp, r7
 800278c:	bc80      	pop	{r7}
 800278e:	4770      	bx	lr

08002790 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b086      	sub	sp, #24
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d101      	bne.n	80027a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e26c      	b.n	8002c7c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0301 	and.w	r3, r3, #1
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	f000 8087 	beq.w	80028be <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80027b0:	4b92      	ldr	r3, [pc, #584]	; (80029fc <HAL_RCC_OscConfig+0x26c>)
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f003 030c 	and.w	r3, r3, #12
 80027b8:	2b04      	cmp	r3, #4
 80027ba:	d00c      	beq.n	80027d6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80027bc:	4b8f      	ldr	r3, [pc, #572]	; (80029fc <HAL_RCC_OscConfig+0x26c>)
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f003 030c 	and.w	r3, r3, #12
 80027c4:	2b08      	cmp	r3, #8
 80027c6:	d112      	bne.n	80027ee <HAL_RCC_OscConfig+0x5e>
 80027c8:	4b8c      	ldr	r3, [pc, #560]	; (80029fc <HAL_RCC_OscConfig+0x26c>)
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027d4:	d10b      	bne.n	80027ee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027d6:	4b89      	ldr	r3, [pc, #548]	; (80029fc <HAL_RCC_OscConfig+0x26c>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d06c      	beq.n	80028bc <HAL_RCC_OscConfig+0x12c>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d168      	bne.n	80028bc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e246      	b.n	8002c7c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027f6:	d106      	bne.n	8002806 <HAL_RCC_OscConfig+0x76>
 80027f8:	4b80      	ldr	r3, [pc, #512]	; (80029fc <HAL_RCC_OscConfig+0x26c>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a7f      	ldr	r2, [pc, #508]	; (80029fc <HAL_RCC_OscConfig+0x26c>)
 80027fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002802:	6013      	str	r3, [r2, #0]
 8002804:	e02e      	b.n	8002864 <HAL_RCC_OscConfig+0xd4>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d10c      	bne.n	8002828 <HAL_RCC_OscConfig+0x98>
 800280e:	4b7b      	ldr	r3, [pc, #492]	; (80029fc <HAL_RCC_OscConfig+0x26c>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a7a      	ldr	r2, [pc, #488]	; (80029fc <HAL_RCC_OscConfig+0x26c>)
 8002814:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002818:	6013      	str	r3, [r2, #0]
 800281a:	4b78      	ldr	r3, [pc, #480]	; (80029fc <HAL_RCC_OscConfig+0x26c>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a77      	ldr	r2, [pc, #476]	; (80029fc <HAL_RCC_OscConfig+0x26c>)
 8002820:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002824:	6013      	str	r3, [r2, #0]
 8002826:	e01d      	b.n	8002864 <HAL_RCC_OscConfig+0xd4>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002830:	d10c      	bne.n	800284c <HAL_RCC_OscConfig+0xbc>
 8002832:	4b72      	ldr	r3, [pc, #456]	; (80029fc <HAL_RCC_OscConfig+0x26c>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a71      	ldr	r2, [pc, #452]	; (80029fc <HAL_RCC_OscConfig+0x26c>)
 8002838:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800283c:	6013      	str	r3, [r2, #0]
 800283e:	4b6f      	ldr	r3, [pc, #444]	; (80029fc <HAL_RCC_OscConfig+0x26c>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a6e      	ldr	r2, [pc, #440]	; (80029fc <HAL_RCC_OscConfig+0x26c>)
 8002844:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002848:	6013      	str	r3, [r2, #0]
 800284a:	e00b      	b.n	8002864 <HAL_RCC_OscConfig+0xd4>
 800284c:	4b6b      	ldr	r3, [pc, #428]	; (80029fc <HAL_RCC_OscConfig+0x26c>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a6a      	ldr	r2, [pc, #424]	; (80029fc <HAL_RCC_OscConfig+0x26c>)
 8002852:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002856:	6013      	str	r3, [r2, #0]
 8002858:	4b68      	ldr	r3, [pc, #416]	; (80029fc <HAL_RCC_OscConfig+0x26c>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a67      	ldr	r2, [pc, #412]	; (80029fc <HAL_RCC_OscConfig+0x26c>)
 800285e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002862:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d013      	beq.n	8002894 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800286c:	f7fe ffa2 	bl	80017b4 <HAL_GetTick>
 8002870:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002872:	e008      	b.n	8002886 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002874:	f7fe ff9e 	bl	80017b4 <HAL_GetTick>
 8002878:	4602      	mov	r2, r0
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	2b64      	cmp	r3, #100	; 0x64
 8002880:	d901      	bls.n	8002886 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	e1fa      	b.n	8002c7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002886:	4b5d      	ldr	r3, [pc, #372]	; (80029fc <HAL_RCC_OscConfig+0x26c>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d0f0      	beq.n	8002874 <HAL_RCC_OscConfig+0xe4>
 8002892:	e014      	b.n	80028be <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002894:	f7fe ff8e 	bl	80017b4 <HAL_GetTick>
 8002898:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800289a:	e008      	b.n	80028ae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800289c:	f7fe ff8a 	bl	80017b4 <HAL_GetTick>
 80028a0:	4602      	mov	r2, r0
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	2b64      	cmp	r3, #100	; 0x64
 80028a8:	d901      	bls.n	80028ae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e1e6      	b.n	8002c7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028ae:	4b53      	ldr	r3, [pc, #332]	; (80029fc <HAL_RCC_OscConfig+0x26c>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d1f0      	bne.n	800289c <HAL_RCC_OscConfig+0x10c>
 80028ba:	e000      	b.n	80028be <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 0302 	and.w	r3, r3, #2
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d063      	beq.n	8002992 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80028ca:	4b4c      	ldr	r3, [pc, #304]	; (80029fc <HAL_RCC_OscConfig+0x26c>)
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f003 030c 	and.w	r3, r3, #12
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d00b      	beq.n	80028ee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80028d6:	4b49      	ldr	r3, [pc, #292]	; (80029fc <HAL_RCC_OscConfig+0x26c>)
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	f003 030c 	and.w	r3, r3, #12
 80028de:	2b08      	cmp	r3, #8
 80028e0:	d11c      	bne.n	800291c <HAL_RCC_OscConfig+0x18c>
 80028e2:	4b46      	ldr	r3, [pc, #280]	; (80029fc <HAL_RCC_OscConfig+0x26c>)
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d116      	bne.n	800291c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028ee:	4b43      	ldr	r3, [pc, #268]	; (80029fc <HAL_RCC_OscConfig+0x26c>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0302 	and.w	r3, r3, #2
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d005      	beq.n	8002906 <HAL_RCC_OscConfig+0x176>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	691b      	ldr	r3, [r3, #16]
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d001      	beq.n	8002906 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e1ba      	b.n	8002c7c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002906:	4b3d      	ldr	r3, [pc, #244]	; (80029fc <HAL_RCC_OscConfig+0x26c>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	695b      	ldr	r3, [r3, #20]
 8002912:	00db      	lsls	r3, r3, #3
 8002914:	4939      	ldr	r1, [pc, #228]	; (80029fc <HAL_RCC_OscConfig+0x26c>)
 8002916:	4313      	orrs	r3, r2
 8002918:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800291a:	e03a      	b.n	8002992 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	691b      	ldr	r3, [r3, #16]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d020      	beq.n	8002966 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002924:	4b36      	ldr	r3, [pc, #216]	; (8002a00 <HAL_RCC_OscConfig+0x270>)
 8002926:	2201      	movs	r2, #1
 8002928:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800292a:	f7fe ff43 	bl	80017b4 <HAL_GetTick>
 800292e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002930:	e008      	b.n	8002944 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002932:	f7fe ff3f 	bl	80017b4 <HAL_GetTick>
 8002936:	4602      	mov	r2, r0
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	2b02      	cmp	r3, #2
 800293e:	d901      	bls.n	8002944 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002940:	2303      	movs	r3, #3
 8002942:	e19b      	b.n	8002c7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002944:	4b2d      	ldr	r3, [pc, #180]	; (80029fc <HAL_RCC_OscConfig+0x26c>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0302 	and.w	r3, r3, #2
 800294c:	2b00      	cmp	r3, #0
 800294e:	d0f0      	beq.n	8002932 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002950:	4b2a      	ldr	r3, [pc, #168]	; (80029fc <HAL_RCC_OscConfig+0x26c>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	695b      	ldr	r3, [r3, #20]
 800295c:	00db      	lsls	r3, r3, #3
 800295e:	4927      	ldr	r1, [pc, #156]	; (80029fc <HAL_RCC_OscConfig+0x26c>)
 8002960:	4313      	orrs	r3, r2
 8002962:	600b      	str	r3, [r1, #0]
 8002964:	e015      	b.n	8002992 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002966:	4b26      	ldr	r3, [pc, #152]	; (8002a00 <HAL_RCC_OscConfig+0x270>)
 8002968:	2200      	movs	r2, #0
 800296a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800296c:	f7fe ff22 	bl	80017b4 <HAL_GetTick>
 8002970:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002972:	e008      	b.n	8002986 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002974:	f7fe ff1e 	bl	80017b4 <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	2b02      	cmp	r3, #2
 8002980:	d901      	bls.n	8002986 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e17a      	b.n	8002c7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002986:	4b1d      	ldr	r3, [pc, #116]	; (80029fc <HAL_RCC_OscConfig+0x26c>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0302 	and.w	r3, r3, #2
 800298e:	2b00      	cmp	r3, #0
 8002990:	d1f0      	bne.n	8002974 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0308 	and.w	r3, r3, #8
 800299a:	2b00      	cmp	r3, #0
 800299c:	d03a      	beq.n	8002a14 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	699b      	ldr	r3, [r3, #24]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d019      	beq.n	80029da <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029a6:	4b17      	ldr	r3, [pc, #92]	; (8002a04 <HAL_RCC_OscConfig+0x274>)
 80029a8:	2201      	movs	r2, #1
 80029aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029ac:	f7fe ff02 	bl	80017b4 <HAL_GetTick>
 80029b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029b2:	e008      	b.n	80029c6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029b4:	f7fe fefe 	bl	80017b4 <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d901      	bls.n	80029c6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	e15a      	b.n	8002c7c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029c6:	4b0d      	ldr	r3, [pc, #52]	; (80029fc <HAL_RCC_OscConfig+0x26c>)
 80029c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ca:	f003 0302 	and.w	r3, r3, #2
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d0f0      	beq.n	80029b4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80029d2:	2001      	movs	r0, #1
 80029d4:	f000 fada 	bl	8002f8c <RCC_Delay>
 80029d8:	e01c      	b.n	8002a14 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029da:	4b0a      	ldr	r3, [pc, #40]	; (8002a04 <HAL_RCC_OscConfig+0x274>)
 80029dc:	2200      	movs	r2, #0
 80029de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029e0:	f7fe fee8 	bl	80017b4 <HAL_GetTick>
 80029e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029e6:	e00f      	b.n	8002a08 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029e8:	f7fe fee4 	bl	80017b4 <HAL_GetTick>
 80029ec:	4602      	mov	r2, r0
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	2b02      	cmp	r3, #2
 80029f4:	d908      	bls.n	8002a08 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80029f6:	2303      	movs	r3, #3
 80029f8:	e140      	b.n	8002c7c <HAL_RCC_OscConfig+0x4ec>
 80029fa:	bf00      	nop
 80029fc:	40021000 	.word	0x40021000
 8002a00:	42420000 	.word	0x42420000
 8002a04:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a08:	4b9e      	ldr	r3, [pc, #632]	; (8002c84 <HAL_RCC_OscConfig+0x4f4>)
 8002a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a0c:	f003 0302 	and.w	r3, r3, #2
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d1e9      	bne.n	80029e8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0304 	and.w	r3, r3, #4
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	f000 80a6 	beq.w	8002b6e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a22:	2300      	movs	r3, #0
 8002a24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a26:	4b97      	ldr	r3, [pc, #604]	; (8002c84 <HAL_RCC_OscConfig+0x4f4>)
 8002a28:	69db      	ldr	r3, [r3, #28]
 8002a2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d10d      	bne.n	8002a4e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a32:	4b94      	ldr	r3, [pc, #592]	; (8002c84 <HAL_RCC_OscConfig+0x4f4>)
 8002a34:	69db      	ldr	r3, [r3, #28]
 8002a36:	4a93      	ldr	r2, [pc, #588]	; (8002c84 <HAL_RCC_OscConfig+0x4f4>)
 8002a38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a3c:	61d3      	str	r3, [r2, #28]
 8002a3e:	4b91      	ldr	r3, [pc, #580]	; (8002c84 <HAL_RCC_OscConfig+0x4f4>)
 8002a40:	69db      	ldr	r3, [r3, #28]
 8002a42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a46:	60bb      	str	r3, [r7, #8]
 8002a48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a4e:	4b8e      	ldr	r3, [pc, #568]	; (8002c88 <HAL_RCC_OscConfig+0x4f8>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d118      	bne.n	8002a8c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a5a:	4b8b      	ldr	r3, [pc, #556]	; (8002c88 <HAL_RCC_OscConfig+0x4f8>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a8a      	ldr	r2, [pc, #552]	; (8002c88 <HAL_RCC_OscConfig+0x4f8>)
 8002a60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a66:	f7fe fea5 	bl	80017b4 <HAL_GetTick>
 8002a6a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a6c:	e008      	b.n	8002a80 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a6e:	f7fe fea1 	bl	80017b4 <HAL_GetTick>
 8002a72:	4602      	mov	r2, r0
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	1ad3      	subs	r3, r2, r3
 8002a78:	2b64      	cmp	r3, #100	; 0x64
 8002a7a:	d901      	bls.n	8002a80 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	e0fd      	b.n	8002c7c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a80:	4b81      	ldr	r3, [pc, #516]	; (8002c88 <HAL_RCC_OscConfig+0x4f8>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d0f0      	beq.n	8002a6e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d106      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x312>
 8002a94:	4b7b      	ldr	r3, [pc, #492]	; (8002c84 <HAL_RCC_OscConfig+0x4f4>)
 8002a96:	6a1b      	ldr	r3, [r3, #32]
 8002a98:	4a7a      	ldr	r2, [pc, #488]	; (8002c84 <HAL_RCC_OscConfig+0x4f4>)
 8002a9a:	f043 0301 	orr.w	r3, r3, #1
 8002a9e:	6213      	str	r3, [r2, #32]
 8002aa0:	e02d      	b.n	8002afe <HAL_RCC_OscConfig+0x36e>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	68db      	ldr	r3, [r3, #12]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d10c      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x334>
 8002aaa:	4b76      	ldr	r3, [pc, #472]	; (8002c84 <HAL_RCC_OscConfig+0x4f4>)
 8002aac:	6a1b      	ldr	r3, [r3, #32]
 8002aae:	4a75      	ldr	r2, [pc, #468]	; (8002c84 <HAL_RCC_OscConfig+0x4f4>)
 8002ab0:	f023 0301 	bic.w	r3, r3, #1
 8002ab4:	6213      	str	r3, [r2, #32]
 8002ab6:	4b73      	ldr	r3, [pc, #460]	; (8002c84 <HAL_RCC_OscConfig+0x4f4>)
 8002ab8:	6a1b      	ldr	r3, [r3, #32]
 8002aba:	4a72      	ldr	r2, [pc, #456]	; (8002c84 <HAL_RCC_OscConfig+0x4f4>)
 8002abc:	f023 0304 	bic.w	r3, r3, #4
 8002ac0:	6213      	str	r3, [r2, #32]
 8002ac2:	e01c      	b.n	8002afe <HAL_RCC_OscConfig+0x36e>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	2b05      	cmp	r3, #5
 8002aca:	d10c      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x356>
 8002acc:	4b6d      	ldr	r3, [pc, #436]	; (8002c84 <HAL_RCC_OscConfig+0x4f4>)
 8002ace:	6a1b      	ldr	r3, [r3, #32]
 8002ad0:	4a6c      	ldr	r2, [pc, #432]	; (8002c84 <HAL_RCC_OscConfig+0x4f4>)
 8002ad2:	f043 0304 	orr.w	r3, r3, #4
 8002ad6:	6213      	str	r3, [r2, #32]
 8002ad8:	4b6a      	ldr	r3, [pc, #424]	; (8002c84 <HAL_RCC_OscConfig+0x4f4>)
 8002ada:	6a1b      	ldr	r3, [r3, #32]
 8002adc:	4a69      	ldr	r2, [pc, #420]	; (8002c84 <HAL_RCC_OscConfig+0x4f4>)
 8002ade:	f043 0301 	orr.w	r3, r3, #1
 8002ae2:	6213      	str	r3, [r2, #32]
 8002ae4:	e00b      	b.n	8002afe <HAL_RCC_OscConfig+0x36e>
 8002ae6:	4b67      	ldr	r3, [pc, #412]	; (8002c84 <HAL_RCC_OscConfig+0x4f4>)
 8002ae8:	6a1b      	ldr	r3, [r3, #32]
 8002aea:	4a66      	ldr	r2, [pc, #408]	; (8002c84 <HAL_RCC_OscConfig+0x4f4>)
 8002aec:	f023 0301 	bic.w	r3, r3, #1
 8002af0:	6213      	str	r3, [r2, #32]
 8002af2:	4b64      	ldr	r3, [pc, #400]	; (8002c84 <HAL_RCC_OscConfig+0x4f4>)
 8002af4:	6a1b      	ldr	r3, [r3, #32]
 8002af6:	4a63      	ldr	r2, [pc, #396]	; (8002c84 <HAL_RCC_OscConfig+0x4f4>)
 8002af8:	f023 0304 	bic.w	r3, r3, #4
 8002afc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d015      	beq.n	8002b32 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b06:	f7fe fe55 	bl	80017b4 <HAL_GetTick>
 8002b0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b0c:	e00a      	b.n	8002b24 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b0e:	f7fe fe51 	bl	80017b4 <HAL_GetTick>
 8002b12:	4602      	mov	r2, r0
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d901      	bls.n	8002b24 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002b20:	2303      	movs	r3, #3
 8002b22:	e0ab      	b.n	8002c7c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b24:	4b57      	ldr	r3, [pc, #348]	; (8002c84 <HAL_RCC_OscConfig+0x4f4>)
 8002b26:	6a1b      	ldr	r3, [r3, #32]
 8002b28:	f003 0302 	and.w	r3, r3, #2
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d0ee      	beq.n	8002b0e <HAL_RCC_OscConfig+0x37e>
 8002b30:	e014      	b.n	8002b5c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b32:	f7fe fe3f 	bl	80017b4 <HAL_GetTick>
 8002b36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b38:	e00a      	b.n	8002b50 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b3a:	f7fe fe3b 	bl	80017b4 <HAL_GetTick>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	1ad3      	subs	r3, r2, r3
 8002b44:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d901      	bls.n	8002b50 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	e095      	b.n	8002c7c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b50:	4b4c      	ldr	r3, [pc, #304]	; (8002c84 <HAL_RCC_OscConfig+0x4f4>)
 8002b52:	6a1b      	ldr	r3, [r3, #32]
 8002b54:	f003 0302 	and.w	r3, r3, #2
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d1ee      	bne.n	8002b3a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002b5c:	7dfb      	ldrb	r3, [r7, #23]
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d105      	bne.n	8002b6e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b62:	4b48      	ldr	r3, [pc, #288]	; (8002c84 <HAL_RCC_OscConfig+0x4f4>)
 8002b64:	69db      	ldr	r3, [r3, #28]
 8002b66:	4a47      	ldr	r2, [pc, #284]	; (8002c84 <HAL_RCC_OscConfig+0x4f4>)
 8002b68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b6c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	69db      	ldr	r3, [r3, #28]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	f000 8081 	beq.w	8002c7a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b78:	4b42      	ldr	r3, [pc, #264]	; (8002c84 <HAL_RCC_OscConfig+0x4f4>)
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	f003 030c 	and.w	r3, r3, #12
 8002b80:	2b08      	cmp	r3, #8
 8002b82:	d061      	beq.n	8002c48 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	69db      	ldr	r3, [r3, #28]
 8002b88:	2b02      	cmp	r3, #2
 8002b8a:	d146      	bne.n	8002c1a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b8c:	4b3f      	ldr	r3, [pc, #252]	; (8002c8c <HAL_RCC_OscConfig+0x4fc>)
 8002b8e:	2200      	movs	r2, #0
 8002b90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b92:	f7fe fe0f 	bl	80017b4 <HAL_GetTick>
 8002b96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b98:	e008      	b.n	8002bac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b9a:	f7fe fe0b 	bl	80017b4 <HAL_GetTick>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	1ad3      	subs	r3, r2, r3
 8002ba4:	2b02      	cmp	r3, #2
 8002ba6:	d901      	bls.n	8002bac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002ba8:	2303      	movs	r3, #3
 8002baa:	e067      	b.n	8002c7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bac:	4b35      	ldr	r3, [pc, #212]	; (8002c84 <HAL_RCC_OscConfig+0x4f4>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d1f0      	bne.n	8002b9a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6a1b      	ldr	r3, [r3, #32]
 8002bbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bc0:	d108      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002bc2:	4b30      	ldr	r3, [pc, #192]	; (8002c84 <HAL_RCC_OscConfig+0x4f4>)
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	492d      	ldr	r1, [pc, #180]	; (8002c84 <HAL_RCC_OscConfig+0x4f4>)
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bd4:	4b2b      	ldr	r3, [pc, #172]	; (8002c84 <HAL_RCC_OscConfig+0x4f4>)
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6a19      	ldr	r1, [r3, #32]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be4:	430b      	orrs	r3, r1
 8002be6:	4927      	ldr	r1, [pc, #156]	; (8002c84 <HAL_RCC_OscConfig+0x4f4>)
 8002be8:	4313      	orrs	r3, r2
 8002bea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bec:	4b27      	ldr	r3, [pc, #156]	; (8002c8c <HAL_RCC_OscConfig+0x4fc>)
 8002bee:	2201      	movs	r2, #1
 8002bf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bf2:	f7fe fddf 	bl	80017b4 <HAL_GetTick>
 8002bf6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002bf8:	e008      	b.n	8002c0c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bfa:	f7fe fddb 	bl	80017b4 <HAL_GetTick>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	1ad3      	subs	r3, r2, r3
 8002c04:	2b02      	cmp	r3, #2
 8002c06:	d901      	bls.n	8002c0c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002c08:	2303      	movs	r3, #3
 8002c0a:	e037      	b.n	8002c7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c0c:	4b1d      	ldr	r3, [pc, #116]	; (8002c84 <HAL_RCC_OscConfig+0x4f4>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d0f0      	beq.n	8002bfa <HAL_RCC_OscConfig+0x46a>
 8002c18:	e02f      	b.n	8002c7a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c1a:	4b1c      	ldr	r3, [pc, #112]	; (8002c8c <HAL_RCC_OscConfig+0x4fc>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c20:	f7fe fdc8 	bl	80017b4 <HAL_GetTick>
 8002c24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c26:	e008      	b.n	8002c3a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c28:	f7fe fdc4 	bl	80017b4 <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d901      	bls.n	8002c3a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e020      	b.n	8002c7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c3a:	4b12      	ldr	r3, [pc, #72]	; (8002c84 <HAL_RCC_OscConfig+0x4f4>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d1f0      	bne.n	8002c28 <HAL_RCC_OscConfig+0x498>
 8002c46:	e018      	b.n	8002c7a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	69db      	ldr	r3, [r3, #28]
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d101      	bne.n	8002c54 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e013      	b.n	8002c7c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002c54:	4b0b      	ldr	r3, [pc, #44]	; (8002c84 <HAL_RCC_OscConfig+0x4f4>)
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6a1b      	ldr	r3, [r3, #32]
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d106      	bne.n	8002c76 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c72:	429a      	cmp	r2, r3
 8002c74:	d001      	beq.n	8002c7a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e000      	b.n	8002c7c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002c7a:	2300      	movs	r3, #0
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	3718      	adds	r7, #24
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	40021000 	.word	0x40021000
 8002c88:	40007000 	.word	0x40007000
 8002c8c:	42420060 	.word	0x42420060

08002c90 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b084      	sub	sp, #16
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
 8002c98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d101      	bne.n	8002ca4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e0d0      	b.n	8002e46 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ca4:	4b6a      	ldr	r3, [pc, #424]	; (8002e50 <HAL_RCC_ClockConfig+0x1c0>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 0307 	and.w	r3, r3, #7
 8002cac:	683a      	ldr	r2, [r7, #0]
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d910      	bls.n	8002cd4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cb2:	4b67      	ldr	r3, [pc, #412]	; (8002e50 <HAL_RCC_ClockConfig+0x1c0>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f023 0207 	bic.w	r2, r3, #7
 8002cba:	4965      	ldr	r1, [pc, #404]	; (8002e50 <HAL_RCC_ClockConfig+0x1c0>)
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cc2:	4b63      	ldr	r3, [pc, #396]	; (8002e50 <HAL_RCC_ClockConfig+0x1c0>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 0307 	and.w	r3, r3, #7
 8002cca:	683a      	ldr	r2, [r7, #0]
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d001      	beq.n	8002cd4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e0b8      	b.n	8002e46 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 0302 	and.w	r3, r3, #2
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d020      	beq.n	8002d22 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 0304 	and.w	r3, r3, #4
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d005      	beq.n	8002cf8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cec:	4b59      	ldr	r3, [pc, #356]	; (8002e54 <HAL_RCC_ClockConfig+0x1c4>)
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	4a58      	ldr	r2, [pc, #352]	; (8002e54 <HAL_RCC_ClockConfig+0x1c4>)
 8002cf2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002cf6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 0308 	and.w	r3, r3, #8
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d005      	beq.n	8002d10 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d04:	4b53      	ldr	r3, [pc, #332]	; (8002e54 <HAL_RCC_ClockConfig+0x1c4>)
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	4a52      	ldr	r2, [pc, #328]	; (8002e54 <HAL_RCC_ClockConfig+0x1c4>)
 8002d0a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002d0e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d10:	4b50      	ldr	r3, [pc, #320]	; (8002e54 <HAL_RCC_ClockConfig+0x1c4>)
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	494d      	ldr	r1, [pc, #308]	; (8002e54 <HAL_RCC_ClockConfig+0x1c4>)
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0301 	and.w	r3, r3, #1
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d040      	beq.n	8002db0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d107      	bne.n	8002d46 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d36:	4b47      	ldr	r3, [pc, #284]	; (8002e54 <HAL_RCC_ClockConfig+0x1c4>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d115      	bne.n	8002d6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e07f      	b.n	8002e46 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	2b02      	cmp	r3, #2
 8002d4c:	d107      	bne.n	8002d5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d4e:	4b41      	ldr	r3, [pc, #260]	; (8002e54 <HAL_RCC_ClockConfig+0x1c4>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d109      	bne.n	8002d6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e073      	b.n	8002e46 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d5e:	4b3d      	ldr	r3, [pc, #244]	; (8002e54 <HAL_RCC_ClockConfig+0x1c4>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 0302 	and.w	r3, r3, #2
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d101      	bne.n	8002d6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e06b      	b.n	8002e46 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d6e:	4b39      	ldr	r3, [pc, #228]	; (8002e54 <HAL_RCC_ClockConfig+0x1c4>)
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	f023 0203 	bic.w	r2, r3, #3
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	4936      	ldr	r1, [pc, #216]	; (8002e54 <HAL_RCC_ClockConfig+0x1c4>)
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d80:	f7fe fd18 	bl	80017b4 <HAL_GetTick>
 8002d84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d86:	e00a      	b.n	8002d9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d88:	f7fe fd14 	bl	80017b4 <HAL_GetTick>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d901      	bls.n	8002d9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	e053      	b.n	8002e46 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d9e:	4b2d      	ldr	r3, [pc, #180]	; (8002e54 <HAL_RCC_ClockConfig+0x1c4>)
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	f003 020c 	and.w	r2, r3, #12
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d1eb      	bne.n	8002d88 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002db0:	4b27      	ldr	r3, [pc, #156]	; (8002e50 <HAL_RCC_ClockConfig+0x1c0>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 0307 	and.w	r3, r3, #7
 8002db8:	683a      	ldr	r2, [r7, #0]
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	d210      	bcs.n	8002de0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dbe:	4b24      	ldr	r3, [pc, #144]	; (8002e50 <HAL_RCC_ClockConfig+0x1c0>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f023 0207 	bic.w	r2, r3, #7
 8002dc6:	4922      	ldr	r1, [pc, #136]	; (8002e50 <HAL_RCC_ClockConfig+0x1c0>)
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dce:	4b20      	ldr	r3, [pc, #128]	; (8002e50 <HAL_RCC_ClockConfig+0x1c0>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 0307 	and.w	r3, r3, #7
 8002dd6:	683a      	ldr	r2, [r7, #0]
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d001      	beq.n	8002de0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e032      	b.n	8002e46 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0304 	and.w	r3, r3, #4
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d008      	beq.n	8002dfe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002dec:	4b19      	ldr	r3, [pc, #100]	; (8002e54 <HAL_RCC_ClockConfig+0x1c4>)
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	4916      	ldr	r1, [pc, #88]	; (8002e54 <HAL_RCC_ClockConfig+0x1c4>)
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0308 	and.w	r3, r3, #8
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d009      	beq.n	8002e1e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002e0a:	4b12      	ldr	r3, [pc, #72]	; (8002e54 <HAL_RCC_ClockConfig+0x1c4>)
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	691b      	ldr	r3, [r3, #16]
 8002e16:	00db      	lsls	r3, r3, #3
 8002e18:	490e      	ldr	r1, [pc, #56]	; (8002e54 <HAL_RCC_ClockConfig+0x1c4>)
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e1e:	f000 f821 	bl	8002e64 <HAL_RCC_GetSysClockFreq>
 8002e22:	4601      	mov	r1, r0
 8002e24:	4b0b      	ldr	r3, [pc, #44]	; (8002e54 <HAL_RCC_ClockConfig+0x1c4>)
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	091b      	lsrs	r3, r3, #4
 8002e2a:	f003 030f 	and.w	r3, r3, #15
 8002e2e:	4a0a      	ldr	r2, [pc, #40]	; (8002e58 <HAL_RCC_ClockConfig+0x1c8>)
 8002e30:	5cd3      	ldrb	r3, [r2, r3]
 8002e32:	fa21 f303 	lsr.w	r3, r1, r3
 8002e36:	4a09      	ldr	r2, [pc, #36]	; (8002e5c <HAL_RCC_ClockConfig+0x1cc>)
 8002e38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002e3a:	4b09      	ldr	r3, [pc, #36]	; (8002e60 <HAL_RCC_ClockConfig+0x1d0>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f7fe fc76 	bl	8001730 <HAL_InitTick>

  return HAL_OK;
 8002e44:	2300      	movs	r3, #0
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3710      	adds	r7, #16
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	40022000 	.word	0x40022000
 8002e54:	40021000 	.word	0x40021000
 8002e58:	0800587c 	.word	0x0800587c
 8002e5c:	20000004 	.word	0x20000004
 8002e60:	20000008 	.word	0x20000008

08002e64 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e64:	b490      	push	{r4, r7}
 8002e66:	b08a      	sub	sp, #40	; 0x28
 8002e68:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002e6a:	4b2a      	ldr	r3, [pc, #168]	; (8002f14 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002e6c:	1d3c      	adds	r4, r7, #4
 8002e6e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002e70:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002e74:	4b28      	ldr	r3, [pc, #160]	; (8002f18 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002e76:	881b      	ldrh	r3, [r3, #0]
 8002e78:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	61fb      	str	r3, [r7, #28]
 8002e7e:	2300      	movs	r3, #0
 8002e80:	61bb      	str	r3, [r7, #24]
 8002e82:	2300      	movs	r3, #0
 8002e84:	627b      	str	r3, [r7, #36]	; 0x24
 8002e86:	2300      	movs	r3, #0
 8002e88:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002e8e:	4b23      	ldr	r3, [pc, #140]	; (8002f1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	f003 030c 	and.w	r3, r3, #12
 8002e9a:	2b04      	cmp	r3, #4
 8002e9c:	d002      	beq.n	8002ea4 <HAL_RCC_GetSysClockFreq+0x40>
 8002e9e:	2b08      	cmp	r3, #8
 8002ea0:	d003      	beq.n	8002eaa <HAL_RCC_GetSysClockFreq+0x46>
 8002ea2:	e02d      	b.n	8002f00 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ea4:	4b1e      	ldr	r3, [pc, #120]	; (8002f20 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002ea6:	623b      	str	r3, [r7, #32]
      break;
 8002ea8:	e02d      	b.n	8002f06 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	0c9b      	lsrs	r3, r3, #18
 8002eae:	f003 030f 	and.w	r3, r3, #15
 8002eb2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002eb6:	4413      	add	r3, r2
 8002eb8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002ebc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d013      	beq.n	8002ef0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002ec8:	4b14      	ldr	r3, [pc, #80]	; (8002f1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	0c5b      	lsrs	r3, r3, #17
 8002ece:	f003 0301 	and.w	r3, r3, #1
 8002ed2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002ed6:	4413      	add	r3, r2
 8002ed8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002edc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	4a0f      	ldr	r2, [pc, #60]	; (8002f20 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002ee2:	fb02 f203 	mul.w	r2, r2, r3
 8002ee6:	69bb      	ldr	r3, [r7, #24]
 8002ee8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eec:	627b      	str	r3, [r7, #36]	; 0x24
 8002eee:	e004      	b.n	8002efa <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	4a0c      	ldr	r2, [pc, #48]	; (8002f24 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002ef4:	fb02 f303 	mul.w	r3, r2, r3
 8002ef8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002efc:	623b      	str	r3, [r7, #32]
      break;
 8002efe:	e002      	b.n	8002f06 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002f00:	4b07      	ldr	r3, [pc, #28]	; (8002f20 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002f02:	623b      	str	r3, [r7, #32]
      break;
 8002f04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f06:	6a3b      	ldr	r3, [r7, #32]
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3728      	adds	r7, #40	; 0x28
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bc90      	pop	{r4, r7}
 8002f10:	4770      	bx	lr
 8002f12:	bf00      	nop
 8002f14:	08005828 	.word	0x08005828
 8002f18:	08005838 	.word	0x08005838
 8002f1c:	40021000 	.word	0x40021000
 8002f20:	007a1200 	.word	0x007a1200
 8002f24:	003d0900 	.word	0x003d0900

08002f28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f2c:	4b02      	ldr	r3, [pc, #8]	; (8002f38 <HAL_RCC_GetHCLKFreq+0x10>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bc80      	pop	{r7}
 8002f36:	4770      	bx	lr
 8002f38:	20000004 	.word	0x20000004

08002f3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002f40:	f7ff fff2 	bl	8002f28 <HAL_RCC_GetHCLKFreq>
 8002f44:	4601      	mov	r1, r0
 8002f46:	4b05      	ldr	r3, [pc, #20]	; (8002f5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	0a1b      	lsrs	r3, r3, #8
 8002f4c:	f003 0307 	and.w	r3, r3, #7
 8002f50:	4a03      	ldr	r2, [pc, #12]	; (8002f60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f52:	5cd3      	ldrb	r3, [r2, r3]
 8002f54:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	bd80      	pop	{r7, pc}
 8002f5c:	40021000 	.word	0x40021000
 8002f60:	0800588c 	.word	0x0800588c

08002f64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002f68:	f7ff ffde 	bl	8002f28 <HAL_RCC_GetHCLKFreq>
 8002f6c:	4601      	mov	r1, r0
 8002f6e:	4b05      	ldr	r3, [pc, #20]	; (8002f84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	0adb      	lsrs	r3, r3, #11
 8002f74:	f003 0307 	and.w	r3, r3, #7
 8002f78:	4a03      	ldr	r2, [pc, #12]	; (8002f88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f7a:	5cd3      	ldrb	r3, [r2, r3]
 8002f7c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	bd80      	pop	{r7, pc}
 8002f84:	40021000 	.word	0x40021000
 8002f88:	0800588c 	.word	0x0800588c

08002f8c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b085      	sub	sp, #20
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002f94:	4b0a      	ldr	r3, [pc, #40]	; (8002fc0 <RCC_Delay+0x34>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a0a      	ldr	r2, [pc, #40]	; (8002fc4 <RCC_Delay+0x38>)
 8002f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f9e:	0a5b      	lsrs	r3, r3, #9
 8002fa0:	687a      	ldr	r2, [r7, #4]
 8002fa2:	fb02 f303 	mul.w	r3, r2, r3
 8002fa6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002fa8:	bf00      	nop
  }
  while (Delay --);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	1e5a      	subs	r2, r3, #1
 8002fae:	60fa      	str	r2, [r7, #12]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d1f9      	bne.n	8002fa8 <RCC_Delay+0x1c>
}
 8002fb4:	bf00      	nop
 8002fb6:	3714      	adds	r7, #20
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bc80      	pop	{r7}
 8002fbc:	4770      	bx	lr
 8002fbe:	bf00      	nop
 8002fc0:	20000004 	.word	0x20000004
 8002fc4:	10624dd3 	.word	0x10624dd3

08002fc8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b082      	sub	sp, #8
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d101      	bne.n	8002fda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e041      	b.n	800305e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d106      	bne.n	8002ff4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f7fe fa72 	bl	80014d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2202      	movs	r2, #2
 8002ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	3304      	adds	r3, #4
 8003004:	4619      	mov	r1, r3
 8003006:	4610      	mov	r0, r2
 8003008:	f000 f8e4 	bl	80031d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2201      	movs	r2, #1
 8003010:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2201      	movs	r2, #1
 8003018:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2201      	movs	r2, #1
 8003020:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2201      	movs	r2, #1
 8003028:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2201      	movs	r2, #1
 8003030:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2201      	movs	r2, #1
 8003038:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2201      	movs	r2, #1
 8003040:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2201      	movs	r2, #1
 8003048:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2201      	movs	r2, #1
 8003058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800305c:	2300      	movs	r3, #0
}
 800305e:	4618      	mov	r0, r3
 8003060:	3708      	adds	r7, #8
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}

08003066 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003066:	b580      	push	{r7, lr}
 8003068:	b084      	sub	sp, #16
 800306a:	af00      	add	r7, sp, #0
 800306c:	6078      	str	r0, [r7, #4]
 800306e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003076:	2b01      	cmp	r3, #1
 8003078:	d101      	bne.n	800307e <HAL_TIM_ConfigClockSource+0x18>
 800307a:	2302      	movs	r3, #2
 800307c:	e0a6      	b.n	80031cc <HAL_TIM_ConfigClockSource+0x166>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2201      	movs	r2, #1
 8003082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2202      	movs	r2, #2
 800308a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800309c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80030a4:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	68fa      	ldr	r2, [r7, #12]
 80030ac:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	2b40      	cmp	r3, #64	; 0x40
 80030b4:	d067      	beq.n	8003186 <HAL_TIM_ConfigClockSource+0x120>
 80030b6:	2b40      	cmp	r3, #64	; 0x40
 80030b8:	d80b      	bhi.n	80030d2 <HAL_TIM_ConfigClockSource+0x6c>
 80030ba:	2b10      	cmp	r3, #16
 80030bc:	d073      	beq.n	80031a6 <HAL_TIM_ConfigClockSource+0x140>
 80030be:	2b10      	cmp	r3, #16
 80030c0:	d802      	bhi.n	80030c8 <HAL_TIM_ConfigClockSource+0x62>
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d06f      	beq.n	80031a6 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80030c6:	e078      	b.n	80031ba <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80030c8:	2b20      	cmp	r3, #32
 80030ca:	d06c      	beq.n	80031a6 <HAL_TIM_ConfigClockSource+0x140>
 80030cc:	2b30      	cmp	r3, #48	; 0x30
 80030ce:	d06a      	beq.n	80031a6 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80030d0:	e073      	b.n	80031ba <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80030d2:	2b70      	cmp	r3, #112	; 0x70
 80030d4:	d00d      	beq.n	80030f2 <HAL_TIM_ConfigClockSource+0x8c>
 80030d6:	2b70      	cmp	r3, #112	; 0x70
 80030d8:	d804      	bhi.n	80030e4 <HAL_TIM_ConfigClockSource+0x7e>
 80030da:	2b50      	cmp	r3, #80	; 0x50
 80030dc:	d033      	beq.n	8003146 <HAL_TIM_ConfigClockSource+0xe0>
 80030de:	2b60      	cmp	r3, #96	; 0x60
 80030e0:	d041      	beq.n	8003166 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80030e2:	e06a      	b.n	80031ba <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80030e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030e8:	d066      	beq.n	80031b8 <HAL_TIM_ConfigClockSource+0x152>
 80030ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030ee:	d017      	beq.n	8003120 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80030f0:	e063      	b.n	80031ba <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6818      	ldr	r0, [r3, #0]
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	6899      	ldr	r1, [r3, #8]
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	685a      	ldr	r2, [r3, #4]
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	68db      	ldr	r3, [r3, #12]
 8003102:	f000 f940 	bl	8003386 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003114:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	68fa      	ldr	r2, [r7, #12]
 800311c:	609a      	str	r2, [r3, #8]
      break;
 800311e:	e04c      	b.n	80031ba <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6818      	ldr	r0, [r3, #0]
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	6899      	ldr	r1, [r3, #8]
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	685a      	ldr	r2, [r3, #4]
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	f000 f929 	bl	8003386 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	689a      	ldr	r2, [r3, #8]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003142:	609a      	str	r2, [r3, #8]
      break;
 8003144:	e039      	b.n	80031ba <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6818      	ldr	r0, [r3, #0]
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	6859      	ldr	r1, [r3, #4]
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	68db      	ldr	r3, [r3, #12]
 8003152:	461a      	mov	r2, r3
 8003154:	f000 f8a0 	bl	8003298 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	2150      	movs	r1, #80	; 0x50
 800315e:	4618      	mov	r0, r3
 8003160:	f000 f8f7 	bl	8003352 <TIM_ITRx_SetConfig>
      break;
 8003164:	e029      	b.n	80031ba <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6818      	ldr	r0, [r3, #0]
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	6859      	ldr	r1, [r3, #4]
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	68db      	ldr	r3, [r3, #12]
 8003172:	461a      	mov	r2, r3
 8003174:	f000 f8be 	bl	80032f4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	2160      	movs	r1, #96	; 0x60
 800317e:	4618      	mov	r0, r3
 8003180:	f000 f8e7 	bl	8003352 <TIM_ITRx_SetConfig>
      break;
 8003184:	e019      	b.n	80031ba <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6818      	ldr	r0, [r3, #0]
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	6859      	ldr	r1, [r3, #4]
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	68db      	ldr	r3, [r3, #12]
 8003192:	461a      	mov	r2, r3
 8003194:	f000 f880 	bl	8003298 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	2140      	movs	r1, #64	; 0x40
 800319e:	4618      	mov	r0, r3
 80031a0:	f000 f8d7 	bl	8003352 <TIM_ITRx_SetConfig>
      break;
 80031a4:	e009      	b.n	80031ba <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4619      	mov	r1, r3
 80031b0:	4610      	mov	r0, r2
 80031b2:	f000 f8ce 	bl	8003352 <TIM_ITRx_SetConfig>
        break;
 80031b6:	e000      	b.n	80031ba <HAL_TIM_ConfigClockSource+0x154>
      break;
 80031b8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2201      	movs	r2, #1
 80031be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80031ca:	2300      	movs	r3, #0
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3710      	adds	r7, #16
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}

080031d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b085      	sub	sp, #20
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	4a29      	ldr	r2, [pc, #164]	; (800328c <TIM_Base_SetConfig+0xb8>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d00b      	beq.n	8003204 <TIM_Base_SetConfig+0x30>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031f2:	d007      	beq.n	8003204 <TIM_Base_SetConfig+0x30>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	4a26      	ldr	r2, [pc, #152]	; (8003290 <TIM_Base_SetConfig+0xbc>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d003      	beq.n	8003204 <TIM_Base_SetConfig+0x30>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	4a25      	ldr	r2, [pc, #148]	; (8003294 <TIM_Base_SetConfig+0xc0>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d108      	bne.n	8003216 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800320a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	68fa      	ldr	r2, [r7, #12]
 8003212:	4313      	orrs	r3, r2
 8003214:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	4a1c      	ldr	r2, [pc, #112]	; (800328c <TIM_Base_SetConfig+0xb8>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d00b      	beq.n	8003236 <TIM_Base_SetConfig+0x62>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003224:	d007      	beq.n	8003236 <TIM_Base_SetConfig+0x62>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4a19      	ldr	r2, [pc, #100]	; (8003290 <TIM_Base_SetConfig+0xbc>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d003      	beq.n	8003236 <TIM_Base_SetConfig+0x62>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	4a18      	ldr	r2, [pc, #96]	; (8003294 <TIM_Base_SetConfig+0xc0>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d108      	bne.n	8003248 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800323c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	68db      	ldr	r3, [r3, #12]
 8003242:	68fa      	ldr	r2, [r7, #12]
 8003244:	4313      	orrs	r3, r2
 8003246:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	695b      	ldr	r3, [r3, #20]
 8003252:	4313      	orrs	r3, r2
 8003254:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	68fa      	ldr	r2, [r7, #12]
 800325a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	689a      	ldr	r2, [r3, #8]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	4a07      	ldr	r2, [pc, #28]	; (800328c <TIM_Base_SetConfig+0xb8>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d103      	bne.n	800327c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	691a      	ldr	r2, [r3, #16]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2201      	movs	r2, #1
 8003280:	615a      	str	r2, [r3, #20]
}
 8003282:	bf00      	nop
 8003284:	3714      	adds	r7, #20
 8003286:	46bd      	mov	sp, r7
 8003288:	bc80      	pop	{r7}
 800328a:	4770      	bx	lr
 800328c:	40012c00 	.word	0x40012c00
 8003290:	40000400 	.word	0x40000400
 8003294:	40000800 	.word	0x40000800

08003298 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003298:	b480      	push	{r7}
 800329a:	b087      	sub	sp, #28
 800329c:	af00      	add	r7, sp, #0
 800329e:	60f8      	str	r0, [r7, #12]
 80032a0:	60b9      	str	r1, [r7, #8]
 80032a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	6a1b      	ldr	r3, [r3, #32]
 80032a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	6a1b      	ldr	r3, [r3, #32]
 80032ae:	f023 0201 	bic.w	r2, r3, #1
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	699b      	ldr	r3, [r3, #24]
 80032ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80032c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	011b      	lsls	r3, r3, #4
 80032c8:	693a      	ldr	r2, [r7, #16]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	f023 030a 	bic.w	r3, r3, #10
 80032d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80032d6:	697a      	ldr	r2, [r7, #20]
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	4313      	orrs	r3, r2
 80032dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	693a      	ldr	r2, [r7, #16]
 80032e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	697a      	ldr	r2, [r7, #20]
 80032e8:	621a      	str	r2, [r3, #32]
}
 80032ea:	bf00      	nop
 80032ec:	371c      	adds	r7, #28
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bc80      	pop	{r7}
 80032f2:	4770      	bx	lr

080032f4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b087      	sub	sp, #28
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	60f8      	str	r0, [r7, #12]
 80032fc:	60b9      	str	r1, [r7, #8]
 80032fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	6a1b      	ldr	r3, [r3, #32]
 8003304:	f023 0210 	bic.w	r2, r3, #16
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	699b      	ldr	r3, [r3, #24]
 8003310:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	6a1b      	ldr	r3, [r3, #32]
 8003316:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800331e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	031b      	lsls	r3, r3, #12
 8003324:	697a      	ldr	r2, [r7, #20]
 8003326:	4313      	orrs	r3, r2
 8003328:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003330:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	011b      	lsls	r3, r3, #4
 8003336:	693a      	ldr	r2, [r7, #16]
 8003338:	4313      	orrs	r3, r2
 800333a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	697a      	ldr	r2, [r7, #20]
 8003340:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	693a      	ldr	r2, [r7, #16]
 8003346:	621a      	str	r2, [r3, #32]
}
 8003348:	bf00      	nop
 800334a:	371c      	adds	r7, #28
 800334c:	46bd      	mov	sp, r7
 800334e:	bc80      	pop	{r7}
 8003350:	4770      	bx	lr

08003352 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003352:	b480      	push	{r7}
 8003354:	b085      	sub	sp, #20
 8003356:	af00      	add	r7, sp, #0
 8003358:	6078      	str	r0, [r7, #4]
 800335a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003368:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800336a:	683a      	ldr	r2, [r7, #0]
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	4313      	orrs	r3, r2
 8003370:	f043 0307 	orr.w	r3, r3, #7
 8003374:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	68fa      	ldr	r2, [r7, #12]
 800337a:	609a      	str	r2, [r3, #8]
}
 800337c:	bf00      	nop
 800337e:	3714      	adds	r7, #20
 8003380:	46bd      	mov	sp, r7
 8003382:	bc80      	pop	{r7}
 8003384:	4770      	bx	lr

08003386 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003386:	b480      	push	{r7}
 8003388:	b087      	sub	sp, #28
 800338a:	af00      	add	r7, sp, #0
 800338c:	60f8      	str	r0, [r7, #12]
 800338e:	60b9      	str	r1, [r7, #8]
 8003390:	607a      	str	r2, [r7, #4]
 8003392:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80033a0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	021a      	lsls	r2, r3, #8
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	431a      	orrs	r2, r3
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	4313      	orrs	r3, r2
 80033ae:	697a      	ldr	r2, [r7, #20]
 80033b0:	4313      	orrs	r3, r2
 80033b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	697a      	ldr	r2, [r7, #20]
 80033b8:	609a      	str	r2, [r3, #8]
}
 80033ba:	bf00      	nop
 80033bc:	371c      	adds	r7, #28
 80033be:	46bd      	mov	sp, r7
 80033c0:	bc80      	pop	{r7}
 80033c2:	4770      	bx	lr

080033c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b085      	sub	sp, #20
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
 80033cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d101      	bne.n	80033dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80033d8:	2302      	movs	r3, #2
 80033da:	e046      	b.n	800346a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2202      	movs	r2, #2
 80033e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003402:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	68fa      	ldr	r2, [r7, #12]
 800340a:	4313      	orrs	r3, r2
 800340c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	68fa      	ldr	r2, [r7, #12]
 8003414:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a16      	ldr	r2, [pc, #88]	; (8003474 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d00e      	beq.n	800343e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003428:	d009      	beq.n	800343e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a12      	ldr	r2, [pc, #72]	; (8003478 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d004      	beq.n	800343e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a10      	ldr	r2, [pc, #64]	; (800347c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d10c      	bne.n	8003458 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003444:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	68ba      	ldr	r2, [r7, #8]
 800344c:	4313      	orrs	r3, r2
 800344e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	68ba      	ldr	r2, [r7, #8]
 8003456:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2201      	movs	r2, #1
 800345c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2200      	movs	r2, #0
 8003464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003468:	2300      	movs	r3, #0
}
 800346a:	4618      	mov	r0, r3
 800346c:	3714      	adds	r7, #20
 800346e:	46bd      	mov	sp, r7
 8003470:	bc80      	pop	{r7}
 8003472:	4770      	bx	lr
 8003474:	40012c00 	.word	0x40012c00
 8003478:	40000400 	.word	0x40000400
 800347c:	40000800 	.word	0x40000800

08003480 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b082      	sub	sp, #8
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d101      	bne.n	8003492 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e03f      	b.n	8003512 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003498:	b2db      	uxtb	r3, r3
 800349a:	2b00      	cmp	r3, #0
 800349c:	d106      	bne.n	80034ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f7fe f832 	bl	8001510 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2224      	movs	r2, #36	; 0x24
 80034b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	68da      	ldr	r2, [r3, #12]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80034c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	f000 f829 	bl	800351c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	691a      	ldr	r2, [r3, #16]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80034d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	695a      	ldr	r2, [r3, #20]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80034e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	68da      	ldr	r2, [r3, #12]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80034f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2200      	movs	r2, #0
 80034fe:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2220      	movs	r2, #32
 8003504:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2220      	movs	r2, #32
 800350c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003510:	2300      	movs	r3, #0
}
 8003512:	4618      	mov	r0, r3
 8003514:	3708      	adds	r7, #8
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
	...

0800351c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b084      	sub	sp, #16
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	691b      	ldr	r3, [r3, #16]
 800352a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	68da      	ldr	r2, [r3, #12]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	430a      	orrs	r2, r1
 8003538:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	689a      	ldr	r2, [r3, #8]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	691b      	ldr	r3, [r3, #16]
 8003542:	431a      	orrs	r2, r3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	695b      	ldr	r3, [r3, #20]
 8003548:	4313      	orrs	r3, r2
 800354a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	68db      	ldr	r3, [r3, #12]
 8003552:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003556:	f023 030c 	bic.w	r3, r3, #12
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	6812      	ldr	r2, [r2, #0]
 800355e:	68b9      	ldr	r1, [r7, #8]
 8003560:	430b      	orrs	r3, r1
 8003562:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	695b      	ldr	r3, [r3, #20]
 800356a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	699a      	ldr	r2, [r3, #24]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	430a      	orrs	r2, r1
 8003578:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a2c      	ldr	r2, [pc, #176]	; (8003630 <UART_SetConfig+0x114>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d103      	bne.n	800358c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003584:	f7ff fcee 	bl	8002f64 <HAL_RCC_GetPCLK2Freq>
 8003588:	60f8      	str	r0, [r7, #12]
 800358a:	e002      	b.n	8003592 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800358c:	f7ff fcd6 	bl	8002f3c <HAL_RCC_GetPCLK1Freq>
 8003590:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003592:	68fa      	ldr	r2, [r7, #12]
 8003594:	4613      	mov	r3, r2
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	4413      	add	r3, r2
 800359a:	009a      	lsls	r2, r3, #2
 800359c:	441a      	add	r2, r3
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80035a8:	4a22      	ldr	r2, [pc, #136]	; (8003634 <UART_SetConfig+0x118>)
 80035aa:	fba2 2303 	umull	r2, r3, r2, r3
 80035ae:	095b      	lsrs	r3, r3, #5
 80035b0:	0119      	lsls	r1, r3, #4
 80035b2:	68fa      	ldr	r2, [r7, #12]
 80035b4:	4613      	mov	r3, r2
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	4413      	add	r3, r2
 80035ba:	009a      	lsls	r2, r3, #2
 80035bc:	441a      	add	r2, r3
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80035c8:	4b1a      	ldr	r3, [pc, #104]	; (8003634 <UART_SetConfig+0x118>)
 80035ca:	fba3 0302 	umull	r0, r3, r3, r2
 80035ce:	095b      	lsrs	r3, r3, #5
 80035d0:	2064      	movs	r0, #100	; 0x64
 80035d2:	fb00 f303 	mul.w	r3, r0, r3
 80035d6:	1ad3      	subs	r3, r2, r3
 80035d8:	011b      	lsls	r3, r3, #4
 80035da:	3332      	adds	r3, #50	; 0x32
 80035dc:	4a15      	ldr	r2, [pc, #84]	; (8003634 <UART_SetConfig+0x118>)
 80035de:	fba2 2303 	umull	r2, r3, r2, r3
 80035e2:	095b      	lsrs	r3, r3, #5
 80035e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035e8:	4419      	add	r1, r3
 80035ea:	68fa      	ldr	r2, [r7, #12]
 80035ec:	4613      	mov	r3, r2
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	4413      	add	r3, r2
 80035f2:	009a      	lsls	r2, r3, #2
 80035f4:	441a      	add	r2, r3
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003600:	4b0c      	ldr	r3, [pc, #48]	; (8003634 <UART_SetConfig+0x118>)
 8003602:	fba3 0302 	umull	r0, r3, r3, r2
 8003606:	095b      	lsrs	r3, r3, #5
 8003608:	2064      	movs	r0, #100	; 0x64
 800360a:	fb00 f303 	mul.w	r3, r0, r3
 800360e:	1ad3      	subs	r3, r2, r3
 8003610:	011b      	lsls	r3, r3, #4
 8003612:	3332      	adds	r3, #50	; 0x32
 8003614:	4a07      	ldr	r2, [pc, #28]	; (8003634 <UART_SetConfig+0x118>)
 8003616:	fba2 2303 	umull	r2, r3, r2, r3
 800361a:	095b      	lsrs	r3, r3, #5
 800361c:	f003 020f 	and.w	r2, r3, #15
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	440a      	add	r2, r1
 8003626:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003628:	bf00      	nop
 800362a:	3710      	adds	r7, #16
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}
 8003630:	40013800 	.word	0x40013800
 8003634:	51eb851f 	.word	0x51eb851f

08003638 <_ZdlPvj>:
 8003638:	f000 b803 	b.w	8003642 <_ZdlPv>

0800363c <__cxa_pure_virtual>:
 800363c:	b508      	push	{r3, lr}
 800363e:	f000 f80f 	bl	8003660 <_ZSt9terminatev>

08003642 <_ZdlPv>:
 8003642:	f000 b84b 	b.w	80036dc <free>

08003646 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8003646:	b508      	push	{r3, lr}
 8003648:	4780      	blx	r0
 800364a:	f000 f80e 	bl	800366a <abort>
	...

08003650 <_ZSt13get_terminatev>:
 8003650:	4b02      	ldr	r3, [pc, #8]	; (800365c <_ZSt13get_terminatev+0xc>)
 8003652:	6818      	ldr	r0, [r3, #0]
 8003654:	f3bf 8f5b 	dmb	ish
 8003658:	4770      	bx	lr
 800365a:	bf00      	nop
 800365c:	20000010 	.word	0x20000010

08003660 <_ZSt9terminatev>:
 8003660:	b508      	push	{r3, lr}
 8003662:	f7ff fff5 	bl	8003650 <_ZSt13get_terminatev>
 8003666:	f7ff ffee 	bl	8003646 <_ZN10__cxxabiv111__terminateEPFvvE>

0800366a <abort>:
 800366a:	b508      	push	{r3, lr}
 800366c:	2006      	movs	r0, #6
 800366e:	f000 fda5 	bl	80041bc <raise>
 8003672:	2001      	movs	r0, #1
 8003674:	f7fd ffd9 	bl	800162a <_exit>

08003678 <__errno>:
 8003678:	4b01      	ldr	r3, [pc, #4]	; (8003680 <__errno+0x8>)
 800367a:	6818      	ldr	r0, [r3, #0]
 800367c:	4770      	bx	lr
 800367e:	bf00      	nop
 8003680:	20000014 	.word	0x20000014

08003684 <__libc_init_array>:
 8003684:	b570      	push	{r4, r5, r6, lr}
 8003686:	2500      	movs	r5, #0
 8003688:	4e0c      	ldr	r6, [pc, #48]	; (80036bc <__libc_init_array+0x38>)
 800368a:	4c0d      	ldr	r4, [pc, #52]	; (80036c0 <__libc_init_array+0x3c>)
 800368c:	1ba4      	subs	r4, r4, r6
 800368e:	10a4      	asrs	r4, r4, #2
 8003690:	42a5      	cmp	r5, r4
 8003692:	d109      	bne.n	80036a8 <__libc_init_array+0x24>
 8003694:	f002 f8aa 	bl	80057ec <_init>
 8003698:	2500      	movs	r5, #0
 800369a:	4e0a      	ldr	r6, [pc, #40]	; (80036c4 <__libc_init_array+0x40>)
 800369c:	4c0a      	ldr	r4, [pc, #40]	; (80036c8 <__libc_init_array+0x44>)
 800369e:	1ba4      	subs	r4, r4, r6
 80036a0:	10a4      	asrs	r4, r4, #2
 80036a2:	42a5      	cmp	r5, r4
 80036a4:	d105      	bne.n	80036b2 <__libc_init_array+0x2e>
 80036a6:	bd70      	pop	{r4, r5, r6, pc}
 80036a8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80036ac:	4798      	blx	r3
 80036ae:	3501      	adds	r5, #1
 80036b0:	e7ee      	b.n	8003690 <__libc_init_array+0xc>
 80036b2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80036b6:	4798      	blx	r3
 80036b8:	3501      	adds	r5, #1
 80036ba:	e7f2      	b.n	80036a2 <__libc_init_array+0x1e>
 80036bc:	08005af0 	.word	0x08005af0
 80036c0:	08005af0 	.word	0x08005af0
 80036c4:	08005af0 	.word	0x08005af0
 80036c8:	08005af8 	.word	0x08005af8

080036cc <malloc>:
 80036cc:	4b02      	ldr	r3, [pc, #8]	; (80036d8 <malloc+0xc>)
 80036ce:	4601      	mov	r1, r0
 80036d0:	6818      	ldr	r0, [r3, #0]
 80036d2:	f000 b891 	b.w	80037f8 <_malloc_r>
 80036d6:	bf00      	nop
 80036d8:	20000014 	.word	0x20000014

080036dc <free>:
 80036dc:	4b02      	ldr	r3, [pc, #8]	; (80036e8 <free+0xc>)
 80036de:	4601      	mov	r1, r0
 80036e0:	6818      	ldr	r0, [r3, #0]
 80036e2:	f000 b83d 	b.w	8003760 <_free_r>
 80036e6:	bf00      	nop
 80036e8:	20000014 	.word	0x20000014

080036ec <memchr>:
 80036ec:	b510      	push	{r4, lr}
 80036ee:	b2c9      	uxtb	r1, r1
 80036f0:	4402      	add	r2, r0
 80036f2:	4290      	cmp	r0, r2
 80036f4:	4603      	mov	r3, r0
 80036f6:	d101      	bne.n	80036fc <memchr+0x10>
 80036f8:	2300      	movs	r3, #0
 80036fa:	e003      	b.n	8003704 <memchr+0x18>
 80036fc:	781c      	ldrb	r4, [r3, #0]
 80036fe:	3001      	adds	r0, #1
 8003700:	428c      	cmp	r4, r1
 8003702:	d1f6      	bne.n	80036f2 <memchr+0x6>
 8003704:	4618      	mov	r0, r3
 8003706:	bd10      	pop	{r4, pc}

08003708 <memcpy>:
 8003708:	b510      	push	{r4, lr}
 800370a:	1e43      	subs	r3, r0, #1
 800370c:	440a      	add	r2, r1
 800370e:	4291      	cmp	r1, r2
 8003710:	d100      	bne.n	8003714 <memcpy+0xc>
 8003712:	bd10      	pop	{r4, pc}
 8003714:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003718:	f803 4f01 	strb.w	r4, [r3, #1]!
 800371c:	e7f7      	b.n	800370e <memcpy+0x6>

0800371e <memmove>:
 800371e:	4288      	cmp	r0, r1
 8003720:	b510      	push	{r4, lr}
 8003722:	eb01 0302 	add.w	r3, r1, r2
 8003726:	d807      	bhi.n	8003738 <memmove+0x1a>
 8003728:	1e42      	subs	r2, r0, #1
 800372a:	4299      	cmp	r1, r3
 800372c:	d00a      	beq.n	8003744 <memmove+0x26>
 800372e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003732:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003736:	e7f8      	b.n	800372a <memmove+0xc>
 8003738:	4283      	cmp	r3, r0
 800373a:	d9f5      	bls.n	8003728 <memmove+0xa>
 800373c:	1881      	adds	r1, r0, r2
 800373e:	1ad2      	subs	r2, r2, r3
 8003740:	42d3      	cmn	r3, r2
 8003742:	d100      	bne.n	8003746 <memmove+0x28>
 8003744:	bd10      	pop	{r4, pc}
 8003746:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800374a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800374e:	e7f7      	b.n	8003740 <memmove+0x22>

08003750 <memset>:
 8003750:	4603      	mov	r3, r0
 8003752:	4402      	add	r2, r0
 8003754:	4293      	cmp	r3, r2
 8003756:	d100      	bne.n	800375a <memset+0xa>
 8003758:	4770      	bx	lr
 800375a:	f803 1b01 	strb.w	r1, [r3], #1
 800375e:	e7f9      	b.n	8003754 <memset+0x4>

08003760 <_free_r>:
 8003760:	b538      	push	{r3, r4, r5, lr}
 8003762:	4605      	mov	r5, r0
 8003764:	2900      	cmp	r1, #0
 8003766:	d043      	beq.n	80037f0 <_free_r+0x90>
 8003768:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800376c:	1f0c      	subs	r4, r1, #4
 800376e:	2b00      	cmp	r3, #0
 8003770:	bfb8      	it	lt
 8003772:	18e4      	addlt	r4, r4, r3
 8003774:	f001 fbae 	bl	8004ed4 <__malloc_lock>
 8003778:	4a1e      	ldr	r2, [pc, #120]	; (80037f4 <_free_r+0x94>)
 800377a:	6813      	ldr	r3, [r2, #0]
 800377c:	4610      	mov	r0, r2
 800377e:	b933      	cbnz	r3, 800378e <_free_r+0x2e>
 8003780:	6063      	str	r3, [r4, #4]
 8003782:	6014      	str	r4, [r2, #0]
 8003784:	4628      	mov	r0, r5
 8003786:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800378a:	f001 bba4 	b.w	8004ed6 <__malloc_unlock>
 800378e:	42a3      	cmp	r3, r4
 8003790:	d90b      	bls.n	80037aa <_free_r+0x4a>
 8003792:	6821      	ldr	r1, [r4, #0]
 8003794:	1862      	adds	r2, r4, r1
 8003796:	4293      	cmp	r3, r2
 8003798:	bf01      	itttt	eq
 800379a:	681a      	ldreq	r2, [r3, #0]
 800379c:	685b      	ldreq	r3, [r3, #4]
 800379e:	1852      	addeq	r2, r2, r1
 80037a0:	6022      	streq	r2, [r4, #0]
 80037a2:	6063      	str	r3, [r4, #4]
 80037a4:	6004      	str	r4, [r0, #0]
 80037a6:	e7ed      	b.n	8003784 <_free_r+0x24>
 80037a8:	4613      	mov	r3, r2
 80037aa:	685a      	ldr	r2, [r3, #4]
 80037ac:	b10a      	cbz	r2, 80037b2 <_free_r+0x52>
 80037ae:	42a2      	cmp	r2, r4
 80037b0:	d9fa      	bls.n	80037a8 <_free_r+0x48>
 80037b2:	6819      	ldr	r1, [r3, #0]
 80037b4:	1858      	adds	r0, r3, r1
 80037b6:	42a0      	cmp	r0, r4
 80037b8:	d10b      	bne.n	80037d2 <_free_r+0x72>
 80037ba:	6820      	ldr	r0, [r4, #0]
 80037bc:	4401      	add	r1, r0
 80037be:	1858      	adds	r0, r3, r1
 80037c0:	4282      	cmp	r2, r0
 80037c2:	6019      	str	r1, [r3, #0]
 80037c4:	d1de      	bne.n	8003784 <_free_r+0x24>
 80037c6:	6810      	ldr	r0, [r2, #0]
 80037c8:	6852      	ldr	r2, [r2, #4]
 80037ca:	4401      	add	r1, r0
 80037cc:	6019      	str	r1, [r3, #0]
 80037ce:	605a      	str	r2, [r3, #4]
 80037d0:	e7d8      	b.n	8003784 <_free_r+0x24>
 80037d2:	d902      	bls.n	80037da <_free_r+0x7a>
 80037d4:	230c      	movs	r3, #12
 80037d6:	602b      	str	r3, [r5, #0]
 80037d8:	e7d4      	b.n	8003784 <_free_r+0x24>
 80037da:	6820      	ldr	r0, [r4, #0]
 80037dc:	1821      	adds	r1, r4, r0
 80037de:	428a      	cmp	r2, r1
 80037e0:	bf01      	itttt	eq
 80037e2:	6811      	ldreq	r1, [r2, #0]
 80037e4:	6852      	ldreq	r2, [r2, #4]
 80037e6:	1809      	addeq	r1, r1, r0
 80037e8:	6021      	streq	r1, [r4, #0]
 80037ea:	6062      	str	r2, [r4, #4]
 80037ec:	605c      	str	r4, [r3, #4]
 80037ee:	e7c9      	b.n	8003784 <_free_r+0x24>
 80037f0:	bd38      	pop	{r3, r4, r5, pc}
 80037f2:	bf00      	nop
 80037f4:	200002fc 	.word	0x200002fc

080037f8 <_malloc_r>:
 80037f8:	b570      	push	{r4, r5, r6, lr}
 80037fa:	1ccd      	adds	r5, r1, #3
 80037fc:	f025 0503 	bic.w	r5, r5, #3
 8003800:	3508      	adds	r5, #8
 8003802:	2d0c      	cmp	r5, #12
 8003804:	bf38      	it	cc
 8003806:	250c      	movcc	r5, #12
 8003808:	2d00      	cmp	r5, #0
 800380a:	4606      	mov	r6, r0
 800380c:	db01      	blt.n	8003812 <_malloc_r+0x1a>
 800380e:	42a9      	cmp	r1, r5
 8003810:	d903      	bls.n	800381a <_malloc_r+0x22>
 8003812:	230c      	movs	r3, #12
 8003814:	6033      	str	r3, [r6, #0]
 8003816:	2000      	movs	r0, #0
 8003818:	bd70      	pop	{r4, r5, r6, pc}
 800381a:	f001 fb5b 	bl	8004ed4 <__malloc_lock>
 800381e:	4a21      	ldr	r2, [pc, #132]	; (80038a4 <_malloc_r+0xac>)
 8003820:	6814      	ldr	r4, [r2, #0]
 8003822:	4621      	mov	r1, r4
 8003824:	b991      	cbnz	r1, 800384c <_malloc_r+0x54>
 8003826:	4c20      	ldr	r4, [pc, #128]	; (80038a8 <_malloc_r+0xb0>)
 8003828:	6823      	ldr	r3, [r4, #0]
 800382a:	b91b      	cbnz	r3, 8003834 <_malloc_r+0x3c>
 800382c:	4630      	mov	r0, r6
 800382e:	f000 fc8d 	bl	800414c <_sbrk_r>
 8003832:	6020      	str	r0, [r4, #0]
 8003834:	4629      	mov	r1, r5
 8003836:	4630      	mov	r0, r6
 8003838:	f000 fc88 	bl	800414c <_sbrk_r>
 800383c:	1c43      	adds	r3, r0, #1
 800383e:	d124      	bne.n	800388a <_malloc_r+0x92>
 8003840:	230c      	movs	r3, #12
 8003842:	4630      	mov	r0, r6
 8003844:	6033      	str	r3, [r6, #0]
 8003846:	f001 fb46 	bl	8004ed6 <__malloc_unlock>
 800384a:	e7e4      	b.n	8003816 <_malloc_r+0x1e>
 800384c:	680b      	ldr	r3, [r1, #0]
 800384e:	1b5b      	subs	r3, r3, r5
 8003850:	d418      	bmi.n	8003884 <_malloc_r+0x8c>
 8003852:	2b0b      	cmp	r3, #11
 8003854:	d90f      	bls.n	8003876 <_malloc_r+0x7e>
 8003856:	600b      	str	r3, [r1, #0]
 8003858:	18cc      	adds	r4, r1, r3
 800385a:	50cd      	str	r5, [r1, r3]
 800385c:	4630      	mov	r0, r6
 800385e:	f001 fb3a 	bl	8004ed6 <__malloc_unlock>
 8003862:	f104 000b 	add.w	r0, r4, #11
 8003866:	1d23      	adds	r3, r4, #4
 8003868:	f020 0007 	bic.w	r0, r0, #7
 800386c:	1ac3      	subs	r3, r0, r3
 800386e:	d0d3      	beq.n	8003818 <_malloc_r+0x20>
 8003870:	425a      	negs	r2, r3
 8003872:	50e2      	str	r2, [r4, r3]
 8003874:	e7d0      	b.n	8003818 <_malloc_r+0x20>
 8003876:	684b      	ldr	r3, [r1, #4]
 8003878:	428c      	cmp	r4, r1
 800387a:	bf16      	itet	ne
 800387c:	6063      	strne	r3, [r4, #4]
 800387e:	6013      	streq	r3, [r2, #0]
 8003880:	460c      	movne	r4, r1
 8003882:	e7eb      	b.n	800385c <_malloc_r+0x64>
 8003884:	460c      	mov	r4, r1
 8003886:	6849      	ldr	r1, [r1, #4]
 8003888:	e7cc      	b.n	8003824 <_malloc_r+0x2c>
 800388a:	1cc4      	adds	r4, r0, #3
 800388c:	f024 0403 	bic.w	r4, r4, #3
 8003890:	42a0      	cmp	r0, r4
 8003892:	d005      	beq.n	80038a0 <_malloc_r+0xa8>
 8003894:	1a21      	subs	r1, r4, r0
 8003896:	4630      	mov	r0, r6
 8003898:	f000 fc58 	bl	800414c <_sbrk_r>
 800389c:	3001      	adds	r0, #1
 800389e:	d0cf      	beq.n	8003840 <_malloc_r+0x48>
 80038a0:	6025      	str	r5, [r4, #0]
 80038a2:	e7db      	b.n	800385c <_malloc_r+0x64>
 80038a4:	200002fc 	.word	0x200002fc
 80038a8:	20000300 	.word	0x20000300

080038ac <__cvt>:
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038b2:	461e      	mov	r6, r3
 80038b4:	bfbb      	ittet	lt
 80038b6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80038ba:	461e      	movlt	r6, r3
 80038bc:	2300      	movge	r3, #0
 80038be:	232d      	movlt	r3, #45	; 0x2d
 80038c0:	b088      	sub	sp, #32
 80038c2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80038c4:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 80038c8:	f027 0720 	bic.w	r7, r7, #32
 80038cc:	2f46      	cmp	r7, #70	; 0x46
 80038ce:	4614      	mov	r4, r2
 80038d0:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80038d2:	700b      	strb	r3, [r1, #0]
 80038d4:	d004      	beq.n	80038e0 <__cvt+0x34>
 80038d6:	2f45      	cmp	r7, #69	; 0x45
 80038d8:	d100      	bne.n	80038dc <__cvt+0x30>
 80038da:	3501      	adds	r5, #1
 80038dc:	2302      	movs	r3, #2
 80038de:	e000      	b.n	80038e2 <__cvt+0x36>
 80038e0:	2303      	movs	r3, #3
 80038e2:	aa07      	add	r2, sp, #28
 80038e4:	9204      	str	r2, [sp, #16]
 80038e6:	aa06      	add	r2, sp, #24
 80038e8:	e9cd a202 	strd	sl, r2, [sp, #8]
 80038ec:	e9cd 3500 	strd	r3, r5, [sp]
 80038f0:	4622      	mov	r2, r4
 80038f2:	4633      	mov	r3, r6
 80038f4:	f000 fd2c 	bl	8004350 <_dtoa_r>
 80038f8:	2f47      	cmp	r7, #71	; 0x47
 80038fa:	4680      	mov	r8, r0
 80038fc:	d102      	bne.n	8003904 <__cvt+0x58>
 80038fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003900:	07db      	lsls	r3, r3, #31
 8003902:	d526      	bpl.n	8003952 <__cvt+0xa6>
 8003904:	2f46      	cmp	r7, #70	; 0x46
 8003906:	eb08 0905 	add.w	r9, r8, r5
 800390a:	d111      	bne.n	8003930 <__cvt+0x84>
 800390c:	f898 3000 	ldrb.w	r3, [r8]
 8003910:	2b30      	cmp	r3, #48	; 0x30
 8003912:	d10a      	bne.n	800392a <__cvt+0x7e>
 8003914:	2200      	movs	r2, #0
 8003916:	2300      	movs	r3, #0
 8003918:	4620      	mov	r0, r4
 800391a:	4631      	mov	r1, r6
 800391c:	f7fd f844 	bl	80009a8 <__aeabi_dcmpeq>
 8003920:	b918      	cbnz	r0, 800392a <__cvt+0x7e>
 8003922:	f1c5 0501 	rsb	r5, r5, #1
 8003926:	f8ca 5000 	str.w	r5, [sl]
 800392a:	f8da 3000 	ldr.w	r3, [sl]
 800392e:	4499      	add	r9, r3
 8003930:	2200      	movs	r2, #0
 8003932:	2300      	movs	r3, #0
 8003934:	4620      	mov	r0, r4
 8003936:	4631      	mov	r1, r6
 8003938:	f7fd f836 	bl	80009a8 <__aeabi_dcmpeq>
 800393c:	b938      	cbnz	r0, 800394e <__cvt+0xa2>
 800393e:	2230      	movs	r2, #48	; 0x30
 8003940:	9b07      	ldr	r3, [sp, #28]
 8003942:	454b      	cmp	r3, r9
 8003944:	d205      	bcs.n	8003952 <__cvt+0xa6>
 8003946:	1c59      	adds	r1, r3, #1
 8003948:	9107      	str	r1, [sp, #28]
 800394a:	701a      	strb	r2, [r3, #0]
 800394c:	e7f8      	b.n	8003940 <__cvt+0x94>
 800394e:	f8cd 901c 	str.w	r9, [sp, #28]
 8003952:	4640      	mov	r0, r8
 8003954:	9b07      	ldr	r3, [sp, #28]
 8003956:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003958:	eba3 0308 	sub.w	r3, r3, r8
 800395c:	6013      	str	r3, [r2, #0]
 800395e:	b008      	add	sp, #32
 8003960:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08003964 <__exponent>:
 8003964:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003966:	2900      	cmp	r1, #0
 8003968:	bfb4      	ite	lt
 800396a:	232d      	movlt	r3, #45	; 0x2d
 800396c:	232b      	movge	r3, #43	; 0x2b
 800396e:	4604      	mov	r4, r0
 8003970:	bfb8      	it	lt
 8003972:	4249      	neglt	r1, r1
 8003974:	2909      	cmp	r1, #9
 8003976:	f804 2b02 	strb.w	r2, [r4], #2
 800397a:	7043      	strb	r3, [r0, #1]
 800397c:	dd21      	ble.n	80039c2 <__exponent+0x5e>
 800397e:	f10d 0307 	add.w	r3, sp, #7
 8003982:	461f      	mov	r7, r3
 8003984:	260a      	movs	r6, #10
 8003986:	fb91 f5f6 	sdiv	r5, r1, r6
 800398a:	fb06 1115 	mls	r1, r6, r5, r1
 800398e:	2d09      	cmp	r5, #9
 8003990:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8003994:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003998:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 800399c:	4629      	mov	r1, r5
 800399e:	dc09      	bgt.n	80039b4 <__exponent+0x50>
 80039a0:	3130      	adds	r1, #48	; 0x30
 80039a2:	3b02      	subs	r3, #2
 80039a4:	f802 1c01 	strb.w	r1, [r2, #-1]
 80039a8:	42bb      	cmp	r3, r7
 80039aa:	4622      	mov	r2, r4
 80039ac:	d304      	bcc.n	80039b8 <__exponent+0x54>
 80039ae:	1a10      	subs	r0, r2, r0
 80039b0:	b003      	add	sp, #12
 80039b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039b4:	4613      	mov	r3, r2
 80039b6:	e7e6      	b.n	8003986 <__exponent+0x22>
 80039b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80039bc:	f804 2b01 	strb.w	r2, [r4], #1
 80039c0:	e7f2      	b.n	80039a8 <__exponent+0x44>
 80039c2:	2330      	movs	r3, #48	; 0x30
 80039c4:	4419      	add	r1, r3
 80039c6:	7083      	strb	r3, [r0, #2]
 80039c8:	1d02      	adds	r2, r0, #4
 80039ca:	70c1      	strb	r1, [r0, #3]
 80039cc:	e7ef      	b.n	80039ae <__exponent+0x4a>
	...

080039d0 <_printf_float>:
 80039d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039d4:	b091      	sub	sp, #68	; 0x44
 80039d6:	460c      	mov	r4, r1
 80039d8:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 80039da:	4693      	mov	fp, r2
 80039dc:	461e      	mov	r6, r3
 80039de:	4605      	mov	r5, r0
 80039e0:	f001 fa6a 	bl	8004eb8 <_localeconv_r>
 80039e4:	6803      	ldr	r3, [r0, #0]
 80039e6:	4618      	mov	r0, r3
 80039e8:	9309      	str	r3, [sp, #36]	; 0x24
 80039ea:	f7fc fbb1 	bl	8000150 <strlen>
 80039ee:	2300      	movs	r3, #0
 80039f0:	930e      	str	r3, [sp, #56]	; 0x38
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	900a      	str	r0, [sp, #40]	; 0x28
 80039f6:	3307      	adds	r3, #7
 80039f8:	f023 0307 	bic.w	r3, r3, #7
 80039fc:	f103 0208 	add.w	r2, r3, #8
 8003a00:	f894 8018 	ldrb.w	r8, [r4, #24]
 8003a04:	f8d4 a000 	ldr.w	sl, [r4]
 8003a08:	603a      	str	r2, [r7, #0]
 8003a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a0e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003a12:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8003a16:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003a1a:	930b      	str	r3, [sp, #44]	; 0x2c
 8003a1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003a20:	4ba6      	ldr	r3, [pc, #664]	; (8003cbc <_printf_float+0x2ec>)
 8003a22:	4638      	mov	r0, r7
 8003a24:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003a26:	f7fc fff1 	bl	8000a0c <__aeabi_dcmpun>
 8003a2a:	bb68      	cbnz	r0, 8003a88 <_printf_float+0xb8>
 8003a2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003a30:	4ba2      	ldr	r3, [pc, #648]	; (8003cbc <_printf_float+0x2ec>)
 8003a32:	4638      	mov	r0, r7
 8003a34:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003a36:	f7fc ffcb 	bl	80009d0 <__aeabi_dcmple>
 8003a3a:	bb28      	cbnz	r0, 8003a88 <_printf_float+0xb8>
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	2300      	movs	r3, #0
 8003a40:	4638      	mov	r0, r7
 8003a42:	4649      	mov	r1, r9
 8003a44:	f7fc ffba 	bl	80009bc <__aeabi_dcmplt>
 8003a48:	b110      	cbz	r0, 8003a50 <_printf_float+0x80>
 8003a4a:	232d      	movs	r3, #45	; 0x2d
 8003a4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a50:	4f9b      	ldr	r7, [pc, #620]	; (8003cc0 <_printf_float+0x2f0>)
 8003a52:	4b9c      	ldr	r3, [pc, #624]	; (8003cc4 <_printf_float+0x2f4>)
 8003a54:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003a58:	bf98      	it	ls
 8003a5a:	461f      	movls	r7, r3
 8003a5c:	2303      	movs	r3, #3
 8003a5e:	f04f 0900 	mov.w	r9, #0
 8003a62:	6123      	str	r3, [r4, #16]
 8003a64:	f02a 0304 	bic.w	r3, sl, #4
 8003a68:	6023      	str	r3, [r4, #0]
 8003a6a:	9600      	str	r6, [sp, #0]
 8003a6c:	465b      	mov	r3, fp
 8003a6e:	aa0f      	add	r2, sp, #60	; 0x3c
 8003a70:	4621      	mov	r1, r4
 8003a72:	4628      	mov	r0, r5
 8003a74:	f000 f9e2 	bl	8003e3c <_printf_common>
 8003a78:	3001      	adds	r0, #1
 8003a7a:	f040 8090 	bne.w	8003b9e <_printf_float+0x1ce>
 8003a7e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003a82:	b011      	add	sp, #68	; 0x44
 8003a84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a88:	463a      	mov	r2, r7
 8003a8a:	464b      	mov	r3, r9
 8003a8c:	4638      	mov	r0, r7
 8003a8e:	4649      	mov	r1, r9
 8003a90:	f7fc ffbc 	bl	8000a0c <__aeabi_dcmpun>
 8003a94:	b110      	cbz	r0, 8003a9c <_printf_float+0xcc>
 8003a96:	4f8c      	ldr	r7, [pc, #560]	; (8003cc8 <_printf_float+0x2f8>)
 8003a98:	4b8c      	ldr	r3, [pc, #560]	; (8003ccc <_printf_float+0x2fc>)
 8003a9a:	e7db      	b.n	8003a54 <_printf_float+0x84>
 8003a9c:	6863      	ldr	r3, [r4, #4]
 8003a9e:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8003aa2:	1c59      	adds	r1, r3, #1
 8003aa4:	a80d      	add	r0, sp, #52	; 0x34
 8003aa6:	a90e      	add	r1, sp, #56	; 0x38
 8003aa8:	d140      	bne.n	8003b2c <_printf_float+0x15c>
 8003aaa:	2306      	movs	r3, #6
 8003aac:	6063      	str	r3, [r4, #4]
 8003aae:	f04f 0c00 	mov.w	ip, #0
 8003ab2:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8003ab6:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8003aba:	6863      	ldr	r3, [r4, #4]
 8003abc:	6022      	str	r2, [r4, #0]
 8003abe:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8003ac2:	9300      	str	r3, [sp, #0]
 8003ac4:	463a      	mov	r2, r7
 8003ac6:	464b      	mov	r3, r9
 8003ac8:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8003acc:	4628      	mov	r0, r5
 8003ace:	f7ff feed 	bl	80038ac <__cvt>
 8003ad2:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8003ad6:	2b47      	cmp	r3, #71	; 0x47
 8003ad8:	4607      	mov	r7, r0
 8003ada:	d109      	bne.n	8003af0 <_printf_float+0x120>
 8003adc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003ade:	1cd8      	adds	r0, r3, #3
 8003ae0:	db02      	blt.n	8003ae8 <_printf_float+0x118>
 8003ae2:	6862      	ldr	r2, [r4, #4]
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	dd47      	ble.n	8003b78 <_printf_float+0x1a8>
 8003ae8:	f1a8 0802 	sub.w	r8, r8, #2
 8003aec:	fa5f f888 	uxtb.w	r8, r8
 8003af0:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8003af4:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003af6:	d824      	bhi.n	8003b42 <_printf_float+0x172>
 8003af8:	3901      	subs	r1, #1
 8003afa:	4642      	mov	r2, r8
 8003afc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003b00:	910d      	str	r1, [sp, #52]	; 0x34
 8003b02:	f7ff ff2f 	bl	8003964 <__exponent>
 8003b06:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003b08:	4681      	mov	r9, r0
 8003b0a:	1813      	adds	r3, r2, r0
 8003b0c:	2a01      	cmp	r2, #1
 8003b0e:	6123      	str	r3, [r4, #16]
 8003b10:	dc02      	bgt.n	8003b18 <_printf_float+0x148>
 8003b12:	6822      	ldr	r2, [r4, #0]
 8003b14:	07d1      	lsls	r1, r2, #31
 8003b16:	d501      	bpl.n	8003b1c <_printf_float+0x14c>
 8003b18:	3301      	adds	r3, #1
 8003b1a:	6123      	str	r3, [r4, #16]
 8003b1c:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d0a2      	beq.n	8003a6a <_printf_float+0x9a>
 8003b24:	232d      	movs	r3, #45	; 0x2d
 8003b26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b2a:	e79e      	b.n	8003a6a <_printf_float+0x9a>
 8003b2c:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8003b30:	f000 816e 	beq.w	8003e10 <_printf_float+0x440>
 8003b34:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003b38:	d1b9      	bne.n	8003aae <_printf_float+0xde>
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d1b7      	bne.n	8003aae <_printf_float+0xde>
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e7b4      	b.n	8003aac <_printf_float+0xdc>
 8003b42:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8003b46:	d119      	bne.n	8003b7c <_printf_float+0x1ac>
 8003b48:	2900      	cmp	r1, #0
 8003b4a:	6863      	ldr	r3, [r4, #4]
 8003b4c:	dd0c      	ble.n	8003b68 <_printf_float+0x198>
 8003b4e:	6121      	str	r1, [r4, #16]
 8003b50:	b913      	cbnz	r3, 8003b58 <_printf_float+0x188>
 8003b52:	6822      	ldr	r2, [r4, #0]
 8003b54:	07d2      	lsls	r2, r2, #31
 8003b56:	d502      	bpl.n	8003b5e <_printf_float+0x18e>
 8003b58:	3301      	adds	r3, #1
 8003b5a:	440b      	add	r3, r1
 8003b5c:	6123      	str	r3, [r4, #16]
 8003b5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003b60:	f04f 0900 	mov.w	r9, #0
 8003b64:	65a3      	str	r3, [r4, #88]	; 0x58
 8003b66:	e7d9      	b.n	8003b1c <_printf_float+0x14c>
 8003b68:	b913      	cbnz	r3, 8003b70 <_printf_float+0x1a0>
 8003b6a:	6822      	ldr	r2, [r4, #0]
 8003b6c:	07d0      	lsls	r0, r2, #31
 8003b6e:	d501      	bpl.n	8003b74 <_printf_float+0x1a4>
 8003b70:	3302      	adds	r3, #2
 8003b72:	e7f3      	b.n	8003b5c <_printf_float+0x18c>
 8003b74:	2301      	movs	r3, #1
 8003b76:	e7f1      	b.n	8003b5c <_printf_float+0x18c>
 8003b78:	f04f 0867 	mov.w	r8, #103	; 0x67
 8003b7c:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8003b80:	4293      	cmp	r3, r2
 8003b82:	db05      	blt.n	8003b90 <_printf_float+0x1c0>
 8003b84:	6822      	ldr	r2, [r4, #0]
 8003b86:	6123      	str	r3, [r4, #16]
 8003b88:	07d1      	lsls	r1, r2, #31
 8003b8a:	d5e8      	bpl.n	8003b5e <_printf_float+0x18e>
 8003b8c:	3301      	adds	r3, #1
 8003b8e:	e7e5      	b.n	8003b5c <_printf_float+0x18c>
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	bfcc      	ite	gt
 8003b94:	2301      	movgt	r3, #1
 8003b96:	f1c3 0302 	rsble	r3, r3, #2
 8003b9a:	4413      	add	r3, r2
 8003b9c:	e7de      	b.n	8003b5c <_printf_float+0x18c>
 8003b9e:	6823      	ldr	r3, [r4, #0]
 8003ba0:	055a      	lsls	r2, r3, #21
 8003ba2:	d407      	bmi.n	8003bb4 <_printf_float+0x1e4>
 8003ba4:	6923      	ldr	r3, [r4, #16]
 8003ba6:	463a      	mov	r2, r7
 8003ba8:	4659      	mov	r1, fp
 8003baa:	4628      	mov	r0, r5
 8003bac:	47b0      	blx	r6
 8003bae:	3001      	adds	r0, #1
 8003bb0:	d129      	bne.n	8003c06 <_printf_float+0x236>
 8003bb2:	e764      	b.n	8003a7e <_printf_float+0xae>
 8003bb4:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8003bb8:	f240 80d7 	bls.w	8003d6a <_printf_float+0x39a>
 8003bbc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	f7fc fef0 	bl	80009a8 <__aeabi_dcmpeq>
 8003bc8:	b388      	cbz	r0, 8003c2e <_printf_float+0x25e>
 8003bca:	2301      	movs	r3, #1
 8003bcc:	4a40      	ldr	r2, [pc, #256]	; (8003cd0 <_printf_float+0x300>)
 8003bce:	4659      	mov	r1, fp
 8003bd0:	4628      	mov	r0, r5
 8003bd2:	47b0      	blx	r6
 8003bd4:	3001      	adds	r0, #1
 8003bd6:	f43f af52 	beq.w	8003a7e <_printf_float+0xae>
 8003bda:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003bde:	429a      	cmp	r2, r3
 8003be0:	db02      	blt.n	8003be8 <_printf_float+0x218>
 8003be2:	6823      	ldr	r3, [r4, #0]
 8003be4:	07d8      	lsls	r0, r3, #31
 8003be6:	d50e      	bpl.n	8003c06 <_printf_float+0x236>
 8003be8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003bec:	4659      	mov	r1, fp
 8003bee:	4628      	mov	r0, r5
 8003bf0:	47b0      	blx	r6
 8003bf2:	3001      	adds	r0, #1
 8003bf4:	f43f af43 	beq.w	8003a7e <_printf_float+0xae>
 8003bf8:	2700      	movs	r7, #0
 8003bfa:	f104 081a 	add.w	r8, r4, #26
 8003bfe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003c00:	3b01      	subs	r3, #1
 8003c02:	42bb      	cmp	r3, r7
 8003c04:	dc09      	bgt.n	8003c1a <_printf_float+0x24a>
 8003c06:	6823      	ldr	r3, [r4, #0]
 8003c08:	079f      	lsls	r7, r3, #30
 8003c0a:	f100 80fd 	bmi.w	8003e08 <_printf_float+0x438>
 8003c0e:	68e0      	ldr	r0, [r4, #12]
 8003c10:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003c12:	4298      	cmp	r0, r3
 8003c14:	bfb8      	it	lt
 8003c16:	4618      	movlt	r0, r3
 8003c18:	e733      	b.n	8003a82 <_printf_float+0xb2>
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	4642      	mov	r2, r8
 8003c1e:	4659      	mov	r1, fp
 8003c20:	4628      	mov	r0, r5
 8003c22:	47b0      	blx	r6
 8003c24:	3001      	adds	r0, #1
 8003c26:	f43f af2a 	beq.w	8003a7e <_printf_float+0xae>
 8003c2a:	3701      	adds	r7, #1
 8003c2c:	e7e7      	b.n	8003bfe <_printf_float+0x22e>
 8003c2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	dc2b      	bgt.n	8003c8c <_printf_float+0x2bc>
 8003c34:	2301      	movs	r3, #1
 8003c36:	4a26      	ldr	r2, [pc, #152]	; (8003cd0 <_printf_float+0x300>)
 8003c38:	4659      	mov	r1, fp
 8003c3a:	4628      	mov	r0, r5
 8003c3c:	47b0      	blx	r6
 8003c3e:	3001      	adds	r0, #1
 8003c40:	f43f af1d 	beq.w	8003a7e <_printf_float+0xae>
 8003c44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003c46:	b923      	cbnz	r3, 8003c52 <_printf_float+0x282>
 8003c48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003c4a:	b913      	cbnz	r3, 8003c52 <_printf_float+0x282>
 8003c4c:	6823      	ldr	r3, [r4, #0]
 8003c4e:	07d9      	lsls	r1, r3, #31
 8003c50:	d5d9      	bpl.n	8003c06 <_printf_float+0x236>
 8003c52:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003c56:	4659      	mov	r1, fp
 8003c58:	4628      	mov	r0, r5
 8003c5a:	47b0      	blx	r6
 8003c5c:	3001      	adds	r0, #1
 8003c5e:	f43f af0e 	beq.w	8003a7e <_printf_float+0xae>
 8003c62:	f04f 0800 	mov.w	r8, #0
 8003c66:	f104 091a 	add.w	r9, r4, #26
 8003c6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003c6c:	425b      	negs	r3, r3
 8003c6e:	4543      	cmp	r3, r8
 8003c70:	dc01      	bgt.n	8003c76 <_printf_float+0x2a6>
 8003c72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003c74:	e797      	b.n	8003ba6 <_printf_float+0x1d6>
 8003c76:	2301      	movs	r3, #1
 8003c78:	464a      	mov	r2, r9
 8003c7a:	4659      	mov	r1, fp
 8003c7c:	4628      	mov	r0, r5
 8003c7e:	47b0      	blx	r6
 8003c80:	3001      	adds	r0, #1
 8003c82:	f43f aefc 	beq.w	8003a7e <_printf_float+0xae>
 8003c86:	f108 0801 	add.w	r8, r8, #1
 8003c8a:	e7ee      	b.n	8003c6a <_printf_float+0x29a>
 8003c8c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003c8e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003c90:	429a      	cmp	r2, r3
 8003c92:	bfa8      	it	ge
 8003c94:	461a      	movge	r2, r3
 8003c96:	2a00      	cmp	r2, #0
 8003c98:	4690      	mov	r8, r2
 8003c9a:	dd07      	ble.n	8003cac <_printf_float+0x2dc>
 8003c9c:	4613      	mov	r3, r2
 8003c9e:	4659      	mov	r1, fp
 8003ca0:	463a      	mov	r2, r7
 8003ca2:	4628      	mov	r0, r5
 8003ca4:	47b0      	blx	r6
 8003ca6:	3001      	adds	r0, #1
 8003ca8:	f43f aee9 	beq.w	8003a7e <_printf_float+0xae>
 8003cac:	f104 031a 	add.w	r3, r4, #26
 8003cb0:	f04f 0a00 	mov.w	sl, #0
 8003cb4:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8003cb8:	930b      	str	r3, [sp, #44]	; 0x2c
 8003cba:	e015      	b.n	8003ce8 <_printf_float+0x318>
 8003cbc:	7fefffff 	.word	0x7fefffff
 8003cc0:	08005898 	.word	0x08005898
 8003cc4:	08005894 	.word	0x08005894
 8003cc8:	080058a0 	.word	0x080058a0
 8003ccc:	0800589c 	.word	0x0800589c
 8003cd0:	080058a4 	.word	0x080058a4
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003cd8:	4659      	mov	r1, fp
 8003cda:	4628      	mov	r0, r5
 8003cdc:	47b0      	blx	r6
 8003cde:	3001      	adds	r0, #1
 8003ce0:	f43f aecd 	beq.w	8003a7e <_printf_float+0xae>
 8003ce4:	f10a 0a01 	add.w	sl, sl, #1
 8003ce8:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8003cec:	eba9 0308 	sub.w	r3, r9, r8
 8003cf0:	4553      	cmp	r3, sl
 8003cf2:	dcef      	bgt.n	8003cd4 <_printf_float+0x304>
 8003cf4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	444f      	add	r7, r9
 8003cfc:	db14      	blt.n	8003d28 <_printf_float+0x358>
 8003cfe:	6823      	ldr	r3, [r4, #0]
 8003d00:	07da      	lsls	r2, r3, #31
 8003d02:	d411      	bmi.n	8003d28 <_printf_float+0x358>
 8003d04:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003d06:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003d08:	eba3 0209 	sub.w	r2, r3, r9
 8003d0c:	eba3 0901 	sub.w	r9, r3, r1
 8003d10:	4591      	cmp	r9, r2
 8003d12:	bfa8      	it	ge
 8003d14:	4691      	movge	r9, r2
 8003d16:	f1b9 0f00 	cmp.w	r9, #0
 8003d1a:	dc0d      	bgt.n	8003d38 <_printf_float+0x368>
 8003d1c:	2700      	movs	r7, #0
 8003d1e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003d22:	f104 081a 	add.w	r8, r4, #26
 8003d26:	e018      	b.n	8003d5a <_printf_float+0x38a>
 8003d28:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003d2c:	4659      	mov	r1, fp
 8003d2e:	4628      	mov	r0, r5
 8003d30:	47b0      	blx	r6
 8003d32:	3001      	adds	r0, #1
 8003d34:	d1e6      	bne.n	8003d04 <_printf_float+0x334>
 8003d36:	e6a2      	b.n	8003a7e <_printf_float+0xae>
 8003d38:	464b      	mov	r3, r9
 8003d3a:	463a      	mov	r2, r7
 8003d3c:	4659      	mov	r1, fp
 8003d3e:	4628      	mov	r0, r5
 8003d40:	47b0      	blx	r6
 8003d42:	3001      	adds	r0, #1
 8003d44:	d1ea      	bne.n	8003d1c <_printf_float+0x34c>
 8003d46:	e69a      	b.n	8003a7e <_printf_float+0xae>
 8003d48:	2301      	movs	r3, #1
 8003d4a:	4642      	mov	r2, r8
 8003d4c:	4659      	mov	r1, fp
 8003d4e:	4628      	mov	r0, r5
 8003d50:	47b0      	blx	r6
 8003d52:	3001      	adds	r0, #1
 8003d54:	f43f ae93 	beq.w	8003a7e <_printf_float+0xae>
 8003d58:	3701      	adds	r7, #1
 8003d5a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003d5e:	1a9b      	subs	r3, r3, r2
 8003d60:	eba3 0309 	sub.w	r3, r3, r9
 8003d64:	42bb      	cmp	r3, r7
 8003d66:	dcef      	bgt.n	8003d48 <_printf_float+0x378>
 8003d68:	e74d      	b.n	8003c06 <_printf_float+0x236>
 8003d6a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003d6c:	2a01      	cmp	r2, #1
 8003d6e:	dc01      	bgt.n	8003d74 <_printf_float+0x3a4>
 8003d70:	07db      	lsls	r3, r3, #31
 8003d72:	d538      	bpl.n	8003de6 <_printf_float+0x416>
 8003d74:	2301      	movs	r3, #1
 8003d76:	463a      	mov	r2, r7
 8003d78:	4659      	mov	r1, fp
 8003d7a:	4628      	mov	r0, r5
 8003d7c:	47b0      	blx	r6
 8003d7e:	3001      	adds	r0, #1
 8003d80:	f43f ae7d 	beq.w	8003a7e <_printf_float+0xae>
 8003d84:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003d88:	4659      	mov	r1, fp
 8003d8a:	4628      	mov	r0, r5
 8003d8c:	47b0      	blx	r6
 8003d8e:	3001      	adds	r0, #1
 8003d90:	f107 0701 	add.w	r7, r7, #1
 8003d94:	f43f ae73 	beq.w	8003a7e <_printf_float+0xae>
 8003d98:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003d9c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003d9e:	2200      	movs	r2, #0
 8003da0:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8003da4:	2300      	movs	r3, #0
 8003da6:	f7fc fdff 	bl	80009a8 <__aeabi_dcmpeq>
 8003daa:	b9c0      	cbnz	r0, 8003dde <_printf_float+0x40e>
 8003dac:	4643      	mov	r3, r8
 8003dae:	463a      	mov	r2, r7
 8003db0:	4659      	mov	r1, fp
 8003db2:	4628      	mov	r0, r5
 8003db4:	47b0      	blx	r6
 8003db6:	3001      	adds	r0, #1
 8003db8:	d10d      	bne.n	8003dd6 <_printf_float+0x406>
 8003dba:	e660      	b.n	8003a7e <_printf_float+0xae>
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	4642      	mov	r2, r8
 8003dc0:	4659      	mov	r1, fp
 8003dc2:	4628      	mov	r0, r5
 8003dc4:	47b0      	blx	r6
 8003dc6:	3001      	adds	r0, #1
 8003dc8:	f43f ae59 	beq.w	8003a7e <_printf_float+0xae>
 8003dcc:	3701      	adds	r7, #1
 8003dce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003dd0:	3b01      	subs	r3, #1
 8003dd2:	42bb      	cmp	r3, r7
 8003dd4:	dcf2      	bgt.n	8003dbc <_printf_float+0x3ec>
 8003dd6:	464b      	mov	r3, r9
 8003dd8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003ddc:	e6e4      	b.n	8003ba8 <_printf_float+0x1d8>
 8003dde:	2700      	movs	r7, #0
 8003de0:	f104 081a 	add.w	r8, r4, #26
 8003de4:	e7f3      	b.n	8003dce <_printf_float+0x3fe>
 8003de6:	2301      	movs	r3, #1
 8003de8:	e7e1      	b.n	8003dae <_printf_float+0x3de>
 8003dea:	2301      	movs	r3, #1
 8003dec:	4642      	mov	r2, r8
 8003dee:	4659      	mov	r1, fp
 8003df0:	4628      	mov	r0, r5
 8003df2:	47b0      	blx	r6
 8003df4:	3001      	adds	r0, #1
 8003df6:	f43f ae42 	beq.w	8003a7e <_printf_float+0xae>
 8003dfa:	3701      	adds	r7, #1
 8003dfc:	68e3      	ldr	r3, [r4, #12]
 8003dfe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003e00:	1a9b      	subs	r3, r3, r2
 8003e02:	42bb      	cmp	r3, r7
 8003e04:	dcf1      	bgt.n	8003dea <_printf_float+0x41a>
 8003e06:	e702      	b.n	8003c0e <_printf_float+0x23e>
 8003e08:	2700      	movs	r7, #0
 8003e0a:	f104 0819 	add.w	r8, r4, #25
 8003e0e:	e7f5      	b.n	8003dfc <_printf_float+0x42c>
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	f43f ae94 	beq.w	8003b3e <_printf_float+0x16e>
 8003e16:	f04f 0c00 	mov.w	ip, #0
 8003e1a:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8003e1e:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8003e22:	6022      	str	r2, [r4, #0]
 8003e24:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8003e28:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8003e2c:	9300      	str	r3, [sp, #0]
 8003e2e:	463a      	mov	r2, r7
 8003e30:	464b      	mov	r3, r9
 8003e32:	4628      	mov	r0, r5
 8003e34:	f7ff fd3a 	bl	80038ac <__cvt>
 8003e38:	4607      	mov	r7, r0
 8003e3a:	e64f      	b.n	8003adc <_printf_float+0x10c>

08003e3c <_printf_common>:
 8003e3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e40:	4691      	mov	r9, r2
 8003e42:	461f      	mov	r7, r3
 8003e44:	688a      	ldr	r2, [r1, #8]
 8003e46:	690b      	ldr	r3, [r1, #16]
 8003e48:	4606      	mov	r6, r0
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	bfb8      	it	lt
 8003e4e:	4613      	movlt	r3, r2
 8003e50:	f8c9 3000 	str.w	r3, [r9]
 8003e54:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003e58:	460c      	mov	r4, r1
 8003e5a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003e5e:	b112      	cbz	r2, 8003e66 <_printf_common+0x2a>
 8003e60:	3301      	adds	r3, #1
 8003e62:	f8c9 3000 	str.w	r3, [r9]
 8003e66:	6823      	ldr	r3, [r4, #0]
 8003e68:	0699      	lsls	r1, r3, #26
 8003e6a:	bf42      	ittt	mi
 8003e6c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003e70:	3302      	addmi	r3, #2
 8003e72:	f8c9 3000 	strmi.w	r3, [r9]
 8003e76:	6825      	ldr	r5, [r4, #0]
 8003e78:	f015 0506 	ands.w	r5, r5, #6
 8003e7c:	d107      	bne.n	8003e8e <_printf_common+0x52>
 8003e7e:	f104 0a19 	add.w	sl, r4, #25
 8003e82:	68e3      	ldr	r3, [r4, #12]
 8003e84:	f8d9 2000 	ldr.w	r2, [r9]
 8003e88:	1a9b      	subs	r3, r3, r2
 8003e8a:	42ab      	cmp	r3, r5
 8003e8c:	dc29      	bgt.n	8003ee2 <_printf_common+0xa6>
 8003e8e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003e92:	6822      	ldr	r2, [r4, #0]
 8003e94:	3300      	adds	r3, #0
 8003e96:	bf18      	it	ne
 8003e98:	2301      	movne	r3, #1
 8003e9a:	0692      	lsls	r2, r2, #26
 8003e9c:	d42e      	bmi.n	8003efc <_printf_common+0xc0>
 8003e9e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003ea2:	4639      	mov	r1, r7
 8003ea4:	4630      	mov	r0, r6
 8003ea6:	47c0      	blx	r8
 8003ea8:	3001      	adds	r0, #1
 8003eaa:	d021      	beq.n	8003ef0 <_printf_common+0xb4>
 8003eac:	6823      	ldr	r3, [r4, #0]
 8003eae:	68e5      	ldr	r5, [r4, #12]
 8003eb0:	f003 0306 	and.w	r3, r3, #6
 8003eb4:	2b04      	cmp	r3, #4
 8003eb6:	bf18      	it	ne
 8003eb8:	2500      	movne	r5, #0
 8003eba:	f8d9 2000 	ldr.w	r2, [r9]
 8003ebe:	f04f 0900 	mov.w	r9, #0
 8003ec2:	bf08      	it	eq
 8003ec4:	1aad      	subeq	r5, r5, r2
 8003ec6:	68a3      	ldr	r3, [r4, #8]
 8003ec8:	6922      	ldr	r2, [r4, #16]
 8003eca:	bf08      	it	eq
 8003ecc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	bfc4      	itt	gt
 8003ed4:	1a9b      	subgt	r3, r3, r2
 8003ed6:	18ed      	addgt	r5, r5, r3
 8003ed8:	341a      	adds	r4, #26
 8003eda:	454d      	cmp	r5, r9
 8003edc:	d11a      	bne.n	8003f14 <_printf_common+0xd8>
 8003ede:	2000      	movs	r0, #0
 8003ee0:	e008      	b.n	8003ef4 <_printf_common+0xb8>
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	4652      	mov	r2, sl
 8003ee6:	4639      	mov	r1, r7
 8003ee8:	4630      	mov	r0, r6
 8003eea:	47c0      	blx	r8
 8003eec:	3001      	adds	r0, #1
 8003eee:	d103      	bne.n	8003ef8 <_printf_common+0xbc>
 8003ef0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ef4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ef8:	3501      	adds	r5, #1
 8003efa:	e7c2      	b.n	8003e82 <_printf_common+0x46>
 8003efc:	2030      	movs	r0, #48	; 0x30
 8003efe:	18e1      	adds	r1, r4, r3
 8003f00:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003f04:	1c5a      	adds	r2, r3, #1
 8003f06:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003f0a:	4422      	add	r2, r4
 8003f0c:	3302      	adds	r3, #2
 8003f0e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003f12:	e7c4      	b.n	8003e9e <_printf_common+0x62>
 8003f14:	2301      	movs	r3, #1
 8003f16:	4622      	mov	r2, r4
 8003f18:	4639      	mov	r1, r7
 8003f1a:	4630      	mov	r0, r6
 8003f1c:	47c0      	blx	r8
 8003f1e:	3001      	adds	r0, #1
 8003f20:	d0e6      	beq.n	8003ef0 <_printf_common+0xb4>
 8003f22:	f109 0901 	add.w	r9, r9, #1
 8003f26:	e7d8      	b.n	8003eda <_printf_common+0x9e>

08003f28 <_printf_i>:
 8003f28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003f2c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003f30:	460c      	mov	r4, r1
 8003f32:	7e09      	ldrb	r1, [r1, #24]
 8003f34:	b085      	sub	sp, #20
 8003f36:	296e      	cmp	r1, #110	; 0x6e
 8003f38:	4617      	mov	r7, r2
 8003f3a:	4606      	mov	r6, r0
 8003f3c:	4698      	mov	r8, r3
 8003f3e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003f40:	f000 80b3 	beq.w	80040aa <_printf_i+0x182>
 8003f44:	d822      	bhi.n	8003f8c <_printf_i+0x64>
 8003f46:	2963      	cmp	r1, #99	; 0x63
 8003f48:	d036      	beq.n	8003fb8 <_printf_i+0x90>
 8003f4a:	d80a      	bhi.n	8003f62 <_printf_i+0x3a>
 8003f4c:	2900      	cmp	r1, #0
 8003f4e:	f000 80b9 	beq.w	80040c4 <_printf_i+0x19c>
 8003f52:	2958      	cmp	r1, #88	; 0x58
 8003f54:	f000 8083 	beq.w	800405e <_printf_i+0x136>
 8003f58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f5c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003f60:	e032      	b.n	8003fc8 <_printf_i+0xa0>
 8003f62:	2964      	cmp	r1, #100	; 0x64
 8003f64:	d001      	beq.n	8003f6a <_printf_i+0x42>
 8003f66:	2969      	cmp	r1, #105	; 0x69
 8003f68:	d1f6      	bne.n	8003f58 <_printf_i+0x30>
 8003f6a:	6820      	ldr	r0, [r4, #0]
 8003f6c:	6813      	ldr	r3, [r2, #0]
 8003f6e:	0605      	lsls	r5, r0, #24
 8003f70:	f103 0104 	add.w	r1, r3, #4
 8003f74:	d52a      	bpl.n	8003fcc <_printf_i+0xa4>
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	6011      	str	r1, [r2, #0]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	da03      	bge.n	8003f86 <_printf_i+0x5e>
 8003f7e:	222d      	movs	r2, #45	; 0x2d
 8003f80:	425b      	negs	r3, r3
 8003f82:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003f86:	486f      	ldr	r0, [pc, #444]	; (8004144 <_printf_i+0x21c>)
 8003f88:	220a      	movs	r2, #10
 8003f8a:	e039      	b.n	8004000 <_printf_i+0xd8>
 8003f8c:	2973      	cmp	r1, #115	; 0x73
 8003f8e:	f000 809d 	beq.w	80040cc <_printf_i+0x1a4>
 8003f92:	d808      	bhi.n	8003fa6 <_printf_i+0x7e>
 8003f94:	296f      	cmp	r1, #111	; 0x6f
 8003f96:	d020      	beq.n	8003fda <_printf_i+0xb2>
 8003f98:	2970      	cmp	r1, #112	; 0x70
 8003f9a:	d1dd      	bne.n	8003f58 <_printf_i+0x30>
 8003f9c:	6823      	ldr	r3, [r4, #0]
 8003f9e:	f043 0320 	orr.w	r3, r3, #32
 8003fa2:	6023      	str	r3, [r4, #0]
 8003fa4:	e003      	b.n	8003fae <_printf_i+0x86>
 8003fa6:	2975      	cmp	r1, #117	; 0x75
 8003fa8:	d017      	beq.n	8003fda <_printf_i+0xb2>
 8003faa:	2978      	cmp	r1, #120	; 0x78
 8003fac:	d1d4      	bne.n	8003f58 <_printf_i+0x30>
 8003fae:	2378      	movs	r3, #120	; 0x78
 8003fb0:	4865      	ldr	r0, [pc, #404]	; (8004148 <_printf_i+0x220>)
 8003fb2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003fb6:	e055      	b.n	8004064 <_printf_i+0x13c>
 8003fb8:	6813      	ldr	r3, [r2, #0]
 8003fba:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003fbe:	1d19      	adds	r1, r3, #4
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	6011      	str	r1, [r2, #0]
 8003fc4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e08c      	b.n	80040e6 <_printf_i+0x1be>
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003fd2:	6011      	str	r1, [r2, #0]
 8003fd4:	bf18      	it	ne
 8003fd6:	b21b      	sxthne	r3, r3
 8003fd8:	e7cf      	b.n	8003f7a <_printf_i+0x52>
 8003fda:	6813      	ldr	r3, [r2, #0]
 8003fdc:	6825      	ldr	r5, [r4, #0]
 8003fde:	1d18      	adds	r0, r3, #4
 8003fe0:	6010      	str	r0, [r2, #0]
 8003fe2:	0628      	lsls	r0, r5, #24
 8003fe4:	d501      	bpl.n	8003fea <_printf_i+0xc2>
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	e002      	b.n	8003ff0 <_printf_i+0xc8>
 8003fea:	0668      	lsls	r0, r5, #25
 8003fec:	d5fb      	bpl.n	8003fe6 <_printf_i+0xbe>
 8003fee:	881b      	ldrh	r3, [r3, #0]
 8003ff0:	296f      	cmp	r1, #111	; 0x6f
 8003ff2:	bf14      	ite	ne
 8003ff4:	220a      	movne	r2, #10
 8003ff6:	2208      	moveq	r2, #8
 8003ff8:	4852      	ldr	r0, [pc, #328]	; (8004144 <_printf_i+0x21c>)
 8003ffa:	2100      	movs	r1, #0
 8003ffc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004000:	6865      	ldr	r5, [r4, #4]
 8004002:	2d00      	cmp	r5, #0
 8004004:	60a5      	str	r5, [r4, #8]
 8004006:	f2c0 8095 	blt.w	8004134 <_printf_i+0x20c>
 800400a:	6821      	ldr	r1, [r4, #0]
 800400c:	f021 0104 	bic.w	r1, r1, #4
 8004010:	6021      	str	r1, [r4, #0]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d13d      	bne.n	8004092 <_printf_i+0x16a>
 8004016:	2d00      	cmp	r5, #0
 8004018:	f040 808e 	bne.w	8004138 <_printf_i+0x210>
 800401c:	4665      	mov	r5, ip
 800401e:	2a08      	cmp	r2, #8
 8004020:	d10b      	bne.n	800403a <_printf_i+0x112>
 8004022:	6823      	ldr	r3, [r4, #0]
 8004024:	07db      	lsls	r3, r3, #31
 8004026:	d508      	bpl.n	800403a <_printf_i+0x112>
 8004028:	6923      	ldr	r3, [r4, #16]
 800402a:	6862      	ldr	r2, [r4, #4]
 800402c:	429a      	cmp	r2, r3
 800402e:	bfde      	ittt	le
 8004030:	2330      	movle	r3, #48	; 0x30
 8004032:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004036:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800403a:	ebac 0305 	sub.w	r3, ip, r5
 800403e:	6123      	str	r3, [r4, #16]
 8004040:	f8cd 8000 	str.w	r8, [sp]
 8004044:	463b      	mov	r3, r7
 8004046:	aa03      	add	r2, sp, #12
 8004048:	4621      	mov	r1, r4
 800404a:	4630      	mov	r0, r6
 800404c:	f7ff fef6 	bl	8003e3c <_printf_common>
 8004050:	3001      	adds	r0, #1
 8004052:	d14d      	bne.n	80040f0 <_printf_i+0x1c8>
 8004054:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004058:	b005      	add	sp, #20
 800405a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800405e:	4839      	ldr	r0, [pc, #228]	; (8004144 <_printf_i+0x21c>)
 8004060:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004064:	6813      	ldr	r3, [r2, #0]
 8004066:	6821      	ldr	r1, [r4, #0]
 8004068:	1d1d      	adds	r5, r3, #4
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	6015      	str	r5, [r2, #0]
 800406e:	060a      	lsls	r2, r1, #24
 8004070:	d50b      	bpl.n	800408a <_printf_i+0x162>
 8004072:	07ca      	lsls	r2, r1, #31
 8004074:	bf44      	itt	mi
 8004076:	f041 0120 	orrmi.w	r1, r1, #32
 800407a:	6021      	strmi	r1, [r4, #0]
 800407c:	b91b      	cbnz	r3, 8004086 <_printf_i+0x15e>
 800407e:	6822      	ldr	r2, [r4, #0]
 8004080:	f022 0220 	bic.w	r2, r2, #32
 8004084:	6022      	str	r2, [r4, #0]
 8004086:	2210      	movs	r2, #16
 8004088:	e7b7      	b.n	8003ffa <_printf_i+0xd2>
 800408a:	064d      	lsls	r5, r1, #25
 800408c:	bf48      	it	mi
 800408e:	b29b      	uxthmi	r3, r3
 8004090:	e7ef      	b.n	8004072 <_printf_i+0x14a>
 8004092:	4665      	mov	r5, ip
 8004094:	fbb3 f1f2 	udiv	r1, r3, r2
 8004098:	fb02 3311 	mls	r3, r2, r1, r3
 800409c:	5cc3      	ldrb	r3, [r0, r3]
 800409e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80040a2:	460b      	mov	r3, r1
 80040a4:	2900      	cmp	r1, #0
 80040a6:	d1f5      	bne.n	8004094 <_printf_i+0x16c>
 80040a8:	e7b9      	b.n	800401e <_printf_i+0xf6>
 80040aa:	6813      	ldr	r3, [r2, #0]
 80040ac:	6825      	ldr	r5, [r4, #0]
 80040ae:	1d18      	adds	r0, r3, #4
 80040b0:	6961      	ldr	r1, [r4, #20]
 80040b2:	6010      	str	r0, [r2, #0]
 80040b4:	0628      	lsls	r0, r5, #24
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	d501      	bpl.n	80040be <_printf_i+0x196>
 80040ba:	6019      	str	r1, [r3, #0]
 80040bc:	e002      	b.n	80040c4 <_printf_i+0x19c>
 80040be:	066a      	lsls	r2, r5, #25
 80040c0:	d5fb      	bpl.n	80040ba <_printf_i+0x192>
 80040c2:	8019      	strh	r1, [r3, #0]
 80040c4:	2300      	movs	r3, #0
 80040c6:	4665      	mov	r5, ip
 80040c8:	6123      	str	r3, [r4, #16]
 80040ca:	e7b9      	b.n	8004040 <_printf_i+0x118>
 80040cc:	6813      	ldr	r3, [r2, #0]
 80040ce:	1d19      	adds	r1, r3, #4
 80040d0:	6011      	str	r1, [r2, #0]
 80040d2:	681d      	ldr	r5, [r3, #0]
 80040d4:	6862      	ldr	r2, [r4, #4]
 80040d6:	2100      	movs	r1, #0
 80040d8:	4628      	mov	r0, r5
 80040da:	f7ff fb07 	bl	80036ec <memchr>
 80040de:	b108      	cbz	r0, 80040e4 <_printf_i+0x1bc>
 80040e0:	1b40      	subs	r0, r0, r5
 80040e2:	6060      	str	r0, [r4, #4]
 80040e4:	6863      	ldr	r3, [r4, #4]
 80040e6:	6123      	str	r3, [r4, #16]
 80040e8:	2300      	movs	r3, #0
 80040ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80040ee:	e7a7      	b.n	8004040 <_printf_i+0x118>
 80040f0:	6923      	ldr	r3, [r4, #16]
 80040f2:	462a      	mov	r2, r5
 80040f4:	4639      	mov	r1, r7
 80040f6:	4630      	mov	r0, r6
 80040f8:	47c0      	blx	r8
 80040fa:	3001      	adds	r0, #1
 80040fc:	d0aa      	beq.n	8004054 <_printf_i+0x12c>
 80040fe:	6823      	ldr	r3, [r4, #0]
 8004100:	079b      	lsls	r3, r3, #30
 8004102:	d413      	bmi.n	800412c <_printf_i+0x204>
 8004104:	68e0      	ldr	r0, [r4, #12]
 8004106:	9b03      	ldr	r3, [sp, #12]
 8004108:	4298      	cmp	r0, r3
 800410a:	bfb8      	it	lt
 800410c:	4618      	movlt	r0, r3
 800410e:	e7a3      	b.n	8004058 <_printf_i+0x130>
 8004110:	2301      	movs	r3, #1
 8004112:	464a      	mov	r2, r9
 8004114:	4639      	mov	r1, r7
 8004116:	4630      	mov	r0, r6
 8004118:	47c0      	blx	r8
 800411a:	3001      	adds	r0, #1
 800411c:	d09a      	beq.n	8004054 <_printf_i+0x12c>
 800411e:	3501      	adds	r5, #1
 8004120:	68e3      	ldr	r3, [r4, #12]
 8004122:	9a03      	ldr	r2, [sp, #12]
 8004124:	1a9b      	subs	r3, r3, r2
 8004126:	42ab      	cmp	r3, r5
 8004128:	dcf2      	bgt.n	8004110 <_printf_i+0x1e8>
 800412a:	e7eb      	b.n	8004104 <_printf_i+0x1dc>
 800412c:	2500      	movs	r5, #0
 800412e:	f104 0919 	add.w	r9, r4, #25
 8004132:	e7f5      	b.n	8004120 <_printf_i+0x1f8>
 8004134:	2b00      	cmp	r3, #0
 8004136:	d1ac      	bne.n	8004092 <_printf_i+0x16a>
 8004138:	7803      	ldrb	r3, [r0, #0]
 800413a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800413e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004142:	e76c      	b.n	800401e <_printf_i+0xf6>
 8004144:	080058a6 	.word	0x080058a6
 8004148:	080058b7 	.word	0x080058b7

0800414c <_sbrk_r>:
 800414c:	b538      	push	{r3, r4, r5, lr}
 800414e:	2300      	movs	r3, #0
 8004150:	4c05      	ldr	r4, [pc, #20]	; (8004168 <_sbrk_r+0x1c>)
 8004152:	4605      	mov	r5, r0
 8004154:	4608      	mov	r0, r1
 8004156:	6023      	str	r3, [r4, #0]
 8004158:	f7fd fa72 	bl	8001640 <_sbrk>
 800415c:	1c43      	adds	r3, r0, #1
 800415e:	d102      	bne.n	8004166 <_sbrk_r+0x1a>
 8004160:	6823      	ldr	r3, [r4, #0]
 8004162:	b103      	cbz	r3, 8004166 <_sbrk_r+0x1a>
 8004164:	602b      	str	r3, [r5, #0]
 8004166:	bd38      	pop	{r3, r4, r5, pc}
 8004168:	20000308 	.word	0x20000308

0800416c <_raise_r>:
 800416c:	291f      	cmp	r1, #31
 800416e:	b538      	push	{r3, r4, r5, lr}
 8004170:	4604      	mov	r4, r0
 8004172:	460d      	mov	r5, r1
 8004174:	d904      	bls.n	8004180 <_raise_r+0x14>
 8004176:	2316      	movs	r3, #22
 8004178:	6003      	str	r3, [r0, #0]
 800417a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800417e:	bd38      	pop	{r3, r4, r5, pc}
 8004180:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004182:	b112      	cbz	r2, 800418a <_raise_r+0x1e>
 8004184:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004188:	b94b      	cbnz	r3, 800419e <_raise_r+0x32>
 800418a:	4620      	mov	r0, r4
 800418c:	f000 f830 	bl	80041f0 <_getpid_r>
 8004190:	462a      	mov	r2, r5
 8004192:	4601      	mov	r1, r0
 8004194:	4620      	mov	r0, r4
 8004196:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800419a:	f000 b817 	b.w	80041cc <_kill_r>
 800419e:	2b01      	cmp	r3, #1
 80041a0:	d00a      	beq.n	80041b8 <_raise_r+0x4c>
 80041a2:	1c59      	adds	r1, r3, #1
 80041a4:	d103      	bne.n	80041ae <_raise_r+0x42>
 80041a6:	2316      	movs	r3, #22
 80041a8:	6003      	str	r3, [r0, #0]
 80041aa:	2001      	movs	r0, #1
 80041ac:	e7e7      	b.n	800417e <_raise_r+0x12>
 80041ae:	2400      	movs	r4, #0
 80041b0:	4628      	mov	r0, r5
 80041b2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80041b6:	4798      	blx	r3
 80041b8:	2000      	movs	r0, #0
 80041ba:	e7e0      	b.n	800417e <_raise_r+0x12>

080041bc <raise>:
 80041bc:	4b02      	ldr	r3, [pc, #8]	; (80041c8 <raise+0xc>)
 80041be:	4601      	mov	r1, r0
 80041c0:	6818      	ldr	r0, [r3, #0]
 80041c2:	f7ff bfd3 	b.w	800416c <_raise_r>
 80041c6:	bf00      	nop
 80041c8:	20000014 	.word	0x20000014

080041cc <_kill_r>:
 80041cc:	b538      	push	{r3, r4, r5, lr}
 80041ce:	2300      	movs	r3, #0
 80041d0:	4c06      	ldr	r4, [pc, #24]	; (80041ec <_kill_r+0x20>)
 80041d2:	4605      	mov	r5, r0
 80041d4:	4608      	mov	r0, r1
 80041d6:	4611      	mov	r1, r2
 80041d8:	6023      	str	r3, [r4, #0]
 80041da:	f7fd fa16 	bl	800160a <_kill>
 80041de:	1c43      	adds	r3, r0, #1
 80041e0:	d102      	bne.n	80041e8 <_kill_r+0x1c>
 80041e2:	6823      	ldr	r3, [r4, #0]
 80041e4:	b103      	cbz	r3, 80041e8 <_kill_r+0x1c>
 80041e6:	602b      	str	r3, [r5, #0]
 80041e8:	bd38      	pop	{r3, r4, r5, pc}
 80041ea:	bf00      	nop
 80041ec:	20000308 	.word	0x20000308

080041f0 <_getpid_r>:
 80041f0:	f7fd ba04 	b.w	80015fc <_getpid>

080041f4 <_vsiprintf_r>:
 80041f4:	b500      	push	{lr}
 80041f6:	b09b      	sub	sp, #108	; 0x6c
 80041f8:	9100      	str	r1, [sp, #0]
 80041fa:	9104      	str	r1, [sp, #16]
 80041fc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004200:	9105      	str	r1, [sp, #20]
 8004202:	9102      	str	r1, [sp, #8]
 8004204:	4905      	ldr	r1, [pc, #20]	; (800421c <_vsiprintf_r+0x28>)
 8004206:	9103      	str	r1, [sp, #12]
 8004208:	4669      	mov	r1, sp
 800420a:	f001 f9a9 	bl	8005560 <_svfiprintf_r>
 800420e:	2200      	movs	r2, #0
 8004210:	9b00      	ldr	r3, [sp, #0]
 8004212:	701a      	strb	r2, [r3, #0]
 8004214:	b01b      	add	sp, #108	; 0x6c
 8004216:	f85d fb04 	ldr.w	pc, [sp], #4
 800421a:	bf00      	nop
 800421c:	ffff0208 	.word	0xffff0208

08004220 <vsiprintf>:
 8004220:	4613      	mov	r3, r2
 8004222:	460a      	mov	r2, r1
 8004224:	4601      	mov	r1, r0
 8004226:	4802      	ldr	r0, [pc, #8]	; (8004230 <vsiprintf+0x10>)
 8004228:	6800      	ldr	r0, [r0, #0]
 800422a:	f7ff bfe3 	b.w	80041f4 <_vsiprintf_r>
 800422e:	bf00      	nop
 8004230:	20000014 	.word	0x20000014

08004234 <quorem>:
 8004234:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004238:	6903      	ldr	r3, [r0, #16]
 800423a:	690c      	ldr	r4, [r1, #16]
 800423c:	4680      	mov	r8, r0
 800423e:	42a3      	cmp	r3, r4
 8004240:	f2c0 8084 	blt.w	800434c <quorem+0x118>
 8004244:	3c01      	subs	r4, #1
 8004246:	f101 0714 	add.w	r7, r1, #20
 800424a:	f100 0614 	add.w	r6, r0, #20
 800424e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8004252:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8004256:	3501      	adds	r5, #1
 8004258:	fbb0 f5f5 	udiv	r5, r0, r5
 800425c:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8004260:	eb06 030c 	add.w	r3, r6, ip
 8004264:	eb07 090c 	add.w	r9, r7, ip
 8004268:	9301      	str	r3, [sp, #4]
 800426a:	b39d      	cbz	r5, 80042d4 <quorem+0xa0>
 800426c:	f04f 0a00 	mov.w	sl, #0
 8004270:	4638      	mov	r0, r7
 8004272:	46b6      	mov	lr, r6
 8004274:	46d3      	mov	fp, sl
 8004276:	f850 2b04 	ldr.w	r2, [r0], #4
 800427a:	b293      	uxth	r3, r2
 800427c:	fb05 a303 	mla	r3, r5, r3, sl
 8004280:	0c12      	lsrs	r2, r2, #16
 8004282:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004286:	fb05 a202 	mla	r2, r5, r2, sl
 800428a:	b29b      	uxth	r3, r3
 800428c:	ebab 0303 	sub.w	r3, fp, r3
 8004290:	f8de b000 	ldr.w	fp, [lr]
 8004294:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8004298:	fa1f fb8b 	uxth.w	fp, fp
 800429c:	445b      	add	r3, fp
 800429e:	fa1f fb82 	uxth.w	fp, r2
 80042a2:	f8de 2000 	ldr.w	r2, [lr]
 80042a6:	4581      	cmp	r9, r0
 80042a8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80042ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80042b6:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80042ba:	f84e 3b04 	str.w	r3, [lr], #4
 80042be:	d2da      	bcs.n	8004276 <quorem+0x42>
 80042c0:	f856 300c 	ldr.w	r3, [r6, ip]
 80042c4:	b933      	cbnz	r3, 80042d4 <quorem+0xa0>
 80042c6:	9b01      	ldr	r3, [sp, #4]
 80042c8:	3b04      	subs	r3, #4
 80042ca:	429e      	cmp	r6, r3
 80042cc:	461a      	mov	r2, r3
 80042ce:	d331      	bcc.n	8004334 <quorem+0x100>
 80042d0:	f8c8 4010 	str.w	r4, [r8, #16]
 80042d4:	4640      	mov	r0, r8
 80042d6:	f001 f813 	bl	8005300 <__mcmp>
 80042da:	2800      	cmp	r0, #0
 80042dc:	db26      	blt.n	800432c <quorem+0xf8>
 80042de:	4630      	mov	r0, r6
 80042e0:	f04f 0c00 	mov.w	ip, #0
 80042e4:	3501      	adds	r5, #1
 80042e6:	f857 1b04 	ldr.w	r1, [r7], #4
 80042ea:	f8d0 e000 	ldr.w	lr, [r0]
 80042ee:	b28b      	uxth	r3, r1
 80042f0:	ebac 0303 	sub.w	r3, ip, r3
 80042f4:	fa1f f28e 	uxth.w	r2, lr
 80042f8:	4413      	add	r3, r2
 80042fa:	0c0a      	lsrs	r2, r1, #16
 80042fc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004300:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004304:	b29b      	uxth	r3, r3
 8004306:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800430a:	45b9      	cmp	r9, r7
 800430c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004310:	f840 3b04 	str.w	r3, [r0], #4
 8004314:	d2e7      	bcs.n	80042e6 <quorem+0xb2>
 8004316:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800431a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800431e:	b92a      	cbnz	r2, 800432c <quorem+0xf8>
 8004320:	3b04      	subs	r3, #4
 8004322:	429e      	cmp	r6, r3
 8004324:	461a      	mov	r2, r3
 8004326:	d30b      	bcc.n	8004340 <quorem+0x10c>
 8004328:	f8c8 4010 	str.w	r4, [r8, #16]
 800432c:	4628      	mov	r0, r5
 800432e:	b003      	add	sp, #12
 8004330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004334:	6812      	ldr	r2, [r2, #0]
 8004336:	3b04      	subs	r3, #4
 8004338:	2a00      	cmp	r2, #0
 800433a:	d1c9      	bne.n	80042d0 <quorem+0x9c>
 800433c:	3c01      	subs	r4, #1
 800433e:	e7c4      	b.n	80042ca <quorem+0x96>
 8004340:	6812      	ldr	r2, [r2, #0]
 8004342:	3b04      	subs	r3, #4
 8004344:	2a00      	cmp	r2, #0
 8004346:	d1ef      	bne.n	8004328 <quorem+0xf4>
 8004348:	3c01      	subs	r4, #1
 800434a:	e7ea      	b.n	8004322 <quorem+0xee>
 800434c:	2000      	movs	r0, #0
 800434e:	e7ee      	b.n	800432e <quorem+0xfa>

08004350 <_dtoa_r>:
 8004350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004354:	4616      	mov	r6, r2
 8004356:	461f      	mov	r7, r3
 8004358:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800435a:	b095      	sub	sp, #84	; 0x54
 800435c:	4604      	mov	r4, r0
 800435e:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8004362:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8004366:	b93d      	cbnz	r5, 8004378 <_dtoa_r+0x28>
 8004368:	2010      	movs	r0, #16
 800436a:	f7ff f9af 	bl	80036cc <malloc>
 800436e:	6260      	str	r0, [r4, #36]	; 0x24
 8004370:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004374:	6005      	str	r5, [r0, #0]
 8004376:	60c5      	str	r5, [r0, #12]
 8004378:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800437a:	6819      	ldr	r1, [r3, #0]
 800437c:	b151      	cbz	r1, 8004394 <_dtoa_r+0x44>
 800437e:	685a      	ldr	r2, [r3, #4]
 8004380:	2301      	movs	r3, #1
 8004382:	4093      	lsls	r3, r2
 8004384:	604a      	str	r2, [r1, #4]
 8004386:	608b      	str	r3, [r1, #8]
 8004388:	4620      	mov	r0, r4
 800438a:	f000 fdd9 	bl	8004f40 <_Bfree>
 800438e:	2200      	movs	r2, #0
 8004390:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004392:	601a      	str	r2, [r3, #0]
 8004394:	1e3b      	subs	r3, r7, #0
 8004396:	bfaf      	iteee	ge
 8004398:	2300      	movge	r3, #0
 800439a:	2201      	movlt	r2, #1
 800439c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80043a0:	9303      	strlt	r3, [sp, #12]
 80043a2:	bfac      	ite	ge
 80043a4:	f8c8 3000 	strge.w	r3, [r8]
 80043a8:	f8c8 2000 	strlt.w	r2, [r8]
 80043ac:	4bae      	ldr	r3, [pc, #696]	; (8004668 <_dtoa_r+0x318>)
 80043ae:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80043b2:	ea33 0308 	bics.w	r3, r3, r8
 80043b6:	d11b      	bne.n	80043f0 <_dtoa_r+0xa0>
 80043b8:	f242 730f 	movw	r3, #9999	; 0x270f
 80043bc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80043be:	6013      	str	r3, [r2, #0]
 80043c0:	9b02      	ldr	r3, [sp, #8]
 80043c2:	b923      	cbnz	r3, 80043ce <_dtoa_r+0x7e>
 80043c4:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80043c8:	2800      	cmp	r0, #0
 80043ca:	f000 8545 	beq.w	8004e58 <_dtoa_r+0xb08>
 80043ce:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80043d0:	b953      	cbnz	r3, 80043e8 <_dtoa_r+0x98>
 80043d2:	4ba6      	ldr	r3, [pc, #664]	; (800466c <_dtoa_r+0x31c>)
 80043d4:	e021      	b.n	800441a <_dtoa_r+0xca>
 80043d6:	4ba6      	ldr	r3, [pc, #664]	; (8004670 <_dtoa_r+0x320>)
 80043d8:	9306      	str	r3, [sp, #24]
 80043da:	3308      	adds	r3, #8
 80043dc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80043de:	6013      	str	r3, [r2, #0]
 80043e0:	9806      	ldr	r0, [sp, #24]
 80043e2:	b015      	add	sp, #84	; 0x54
 80043e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043e8:	4ba0      	ldr	r3, [pc, #640]	; (800466c <_dtoa_r+0x31c>)
 80043ea:	9306      	str	r3, [sp, #24]
 80043ec:	3303      	adds	r3, #3
 80043ee:	e7f5      	b.n	80043dc <_dtoa_r+0x8c>
 80043f0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80043f4:	2200      	movs	r2, #0
 80043f6:	2300      	movs	r3, #0
 80043f8:	4630      	mov	r0, r6
 80043fa:	4639      	mov	r1, r7
 80043fc:	f7fc fad4 	bl	80009a8 <__aeabi_dcmpeq>
 8004400:	4682      	mov	sl, r0
 8004402:	b160      	cbz	r0, 800441e <_dtoa_r+0xce>
 8004404:	2301      	movs	r3, #1
 8004406:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004408:	6013      	str	r3, [r2, #0]
 800440a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800440c:	2b00      	cmp	r3, #0
 800440e:	f000 8520 	beq.w	8004e52 <_dtoa_r+0xb02>
 8004412:	4b98      	ldr	r3, [pc, #608]	; (8004674 <_dtoa_r+0x324>)
 8004414:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004416:	6013      	str	r3, [r2, #0]
 8004418:	3b01      	subs	r3, #1
 800441a:	9306      	str	r3, [sp, #24]
 800441c:	e7e0      	b.n	80043e0 <_dtoa_r+0x90>
 800441e:	ab12      	add	r3, sp, #72	; 0x48
 8004420:	9301      	str	r3, [sp, #4]
 8004422:	ab13      	add	r3, sp, #76	; 0x4c
 8004424:	9300      	str	r3, [sp, #0]
 8004426:	4632      	mov	r2, r6
 8004428:	463b      	mov	r3, r7
 800442a:	4620      	mov	r0, r4
 800442c:	f000 ffe0 	bl	80053f0 <__d2b>
 8004430:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8004434:	4683      	mov	fp, r0
 8004436:	2d00      	cmp	r5, #0
 8004438:	d07d      	beq.n	8004536 <_dtoa_r+0x1e6>
 800443a:	46b0      	mov	r8, r6
 800443c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004440:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8004444:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8004448:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800444c:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8004450:	2200      	movs	r2, #0
 8004452:	4b89      	ldr	r3, [pc, #548]	; (8004678 <_dtoa_r+0x328>)
 8004454:	4640      	mov	r0, r8
 8004456:	4649      	mov	r1, r9
 8004458:	f7fb fe86 	bl	8000168 <__aeabi_dsub>
 800445c:	a37c      	add	r3, pc, #496	; (adr r3, 8004650 <_dtoa_r+0x300>)
 800445e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004462:	f7fc f839 	bl	80004d8 <__aeabi_dmul>
 8004466:	a37c      	add	r3, pc, #496	; (adr r3, 8004658 <_dtoa_r+0x308>)
 8004468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800446c:	f7fb fe7e 	bl	800016c <__adddf3>
 8004470:	4606      	mov	r6, r0
 8004472:	4628      	mov	r0, r5
 8004474:	460f      	mov	r7, r1
 8004476:	f7fb ffc5 	bl	8000404 <__aeabi_i2d>
 800447a:	a379      	add	r3, pc, #484	; (adr r3, 8004660 <_dtoa_r+0x310>)
 800447c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004480:	f7fc f82a 	bl	80004d8 <__aeabi_dmul>
 8004484:	4602      	mov	r2, r0
 8004486:	460b      	mov	r3, r1
 8004488:	4630      	mov	r0, r6
 800448a:	4639      	mov	r1, r7
 800448c:	f7fb fe6e 	bl	800016c <__adddf3>
 8004490:	4606      	mov	r6, r0
 8004492:	460f      	mov	r7, r1
 8004494:	f7fc fad0 	bl	8000a38 <__aeabi_d2iz>
 8004498:	2200      	movs	r2, #0
 800449a:	4682      	mov	sl, r0
 800449c:	2300      	movs	r3, #0
 800449e:	4630      	mov	r0, r6
 80044a0:	4639      	mov	r1, r7
 80044a2:	f7fc fa8b 	bl	80009bc <__aeabi_dcmplt>
 80044a6:	b148      	cbz	r0, 80044bc <_dtoa_r+0x16c>
 80044a8:	4650      	mov	r0, sl
 80044aa:	f7fb ffab 	bl	8000404 <__aeabi_i2d>
 80044ae:	4632      	mov	r2, r6
 80044b0:	463b      	mov	r3, r7
 80044b2:	f7fc fa79 	bl	80009a8 <__aeabi_dcmpeq>
 80044b6:	b908      	cbnz	r0, 80044bc <_dtoa_r+0x16c>
 80044b8:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80044bc:	f1ba 0f16 	cmp.w	sl, #22
 80044c0:	d85a      	bhi.n	8004578 <_dtoa_r+0x228>
 80044c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80044c6:	496d      	ldr	r1, [pc, #436]	; (800467c <_dtoa_r+0x32c>)
 80044c8:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80044cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80044d0:	f7fc fa92 	bl	80009f8 <__aeabi_dcmpgt>
 80044d4:	2800      	cmp	r0, #0
 80044d6:	d051      	beq.n	800457c <_dtoa_r+0x22c>
 80044d8:	2300      	movs	r3, #0
 80044da:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80044de:	930d      	str	r3, [sp, #52]	; 0x34
 80044e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80044e2:	1b5d      	subs	r5, r3, r5
 80044e4:	1e6b      	subs	r3, r5, #1
 80044e6:	9307      	str	r3, [sp, #28]
 80044e8:	bf43      	ittte	mi
 80044ea:	2300      	movmi	r3, #0
 80044ec:	f1c5 0901 	rsbmi	r9, r5, #1
 80044f0:	9307      	strmi	r3, [sp, #28]
 80044f2:	f04f 0900 	movpl.w	r9, #0
 80044f6:	f1ba 0f00 	cmp.w	sl, #0
 80044fa:	db41      	blt.n	8004580 <_dtoa_r+0x230>
 80044fc:	9b07      	ldr	r3, [sp, #28]
 80044fe:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8004502:	4453      	add	r3, sl
 8004504:	9307      	str	r3, [sp, #28]
 8004506:	2300      	movs	r3, #0
 8004508:	9308      	str	r3, [sp, #32]
 800450a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800450c:	2b09      	cmp	r3, #9
 800450e:	f200 808f 	bhi.w	8004630 <_dtoa_r+0x2e0>
 8004512:	2b05      	cmp	r3, #5
 8004514:	bfc4      	itt	gt
 8004516:	3b04      	subgt	r3, #4
 8004518:	931e      	strgt	r3, [sp, #120]	; 0x78
 800451a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800451c:	bfc8      	it	gt
 800451e:	2500      	movgt	r5, #0
 8004520:	f1a3 0302 	sub.w	r3, r3, #2
 8004524:	bfd8      	it	le
 8004526:	2501      	movle	r5, #1
 8004528:	2b03      	cmp	r3, #3
 800452a:	f200 808d 	bhi.w	8004648 <_dtoa_r+0x2f8>
 800452e:	e8df f003 	tbb	[pc, r3]
 8004532:	7d7b      	.short	0x7d7b
 8004534:	6f2f      	.short	0x6f2f
 8004536:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800453a:	441d      	add	r5, r3
 800453c:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8004540:	2820      	cmp	r0, #32
 8004542:	dd13      	ble.n	800456c <_dtoa_r+0x21c>
 8004544:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8004548:	9b02      	ldr	r3, [sp, #8]
 800454a:	fa08 f800 	lsl.w	r8, r8, r0
 800454e:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8004552:	fa23 f000 	lsr.w	r0, r3, r0
 8004556:	ea48 0000 	orr.w	r0, r8, r0
 800455a:	f7fb ff43 	bl	80003e4 <__aeabi_ui2d>
 800455e:	2301      	movs	r3, #1
 8004560:	4680      	mov	r8, r0
 8004562:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8004566:	3d01      	subs	r5, #1
 8004568:	9310      	str	r3, [sp, #64]	; 0x40
 800456a:	e771      	b.n	8004450 <_dtoa_r+0x100>
 800456c:	9b02      	ldr	r3, [sp, #8]
 800456e:	f1c0 0020 	rsb	r0, r0, #32
 8004572:	fa03 f000 	lsl.w	r0, r3, r0
 8004576:	e7f0      	b.n	800455a <_dtoa_r+0x20a>
 8004578:	2301      	movs	r3, #1
 800457a:	e7b0      	b.n	80044de <_dtoa_r+0x18e>
 800457c:	900d      	str	r0, [sp, #52]	; 0x34
 800457e:	e7af      	b.n	80044e0 <_dtoa_r+0x190>
 8004580:	f1ca 0300 	rsb	r3, sl, #0
 8004584:	9308      	str	r3, [sp, #32]
 8004586:	2300      	movs	r3, #0
 8004588:	eba9 090a 	sub.w	r9, r9, sl
 800458c:	930c      	str	r3, [sp, #48]	; 0x30
 800458e:	e7bc      	b.n	800450a <_dtoa_r+0x1ba>
 8004590:	2301      	movs	r3, #1
 8004592:	9309      	str	r3, [sp, #36]	; 0x24
 8004594:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004596:	2b00      	cmp	r3, #0
 8004598:	dd74      	ble.n	8004684 <_dtoa_r+0x334>
 800459a:	4698      	mov	r8, r3
 800459c:	9304      	str	r3, [sp, #16]
 800459e:	2200      	movs	r2, #0
 80045a0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80045a2:	6072      	str	r2, [r6, #4]
 80045a4:	2204      	movs	r2, #4
 80045a6:	f102 0014 	add.w	r0, r2, #20
 80045aa:	4298      	cmp	r0, r3
 80045ac:	6871      	ldr	r1, [r6, #4]
 80045ae:	d96e      	bls.n	800468e <_dtoa_r+0x33e>
 80045b0:	4620      	mov	r0, r4
 80045b2:	f000 fc91 	bl	8004ed8 <_Balloc>
 80045b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80045b8:	6030      	str	r0, [r6, #0]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f1b8 0f0e 	cmp.w	r8, #14
 80045c0:	9306      	str	r3, [sp, #24]
 80045c2:	f200 80ed 	bhi.w	80047a0 <_dtoa_r+0x450>
 80045c6:	2d00      	cmp	r5, #0
 80045c8:	f000 80ea 	beq.w	80047a0 <_dtoa_r+0x450>
 80045cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80045d0:	f1ba 0f00 	cmp.w	sl, #0
 80045d4:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80045d8:	dd77      	ble.n	80046ca <_dtoa_r+0x37a>
 80045da:	4a28      	ldr	r2, [pc, #160]	; (800467c <_dtoa_r+0x32c>)
 80045dc:	f00a 030f 	and.w	r3, sl, #15
 80045e0:	ea4f 162a 	mov.w	r6, sl, asr #4
 80045e4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80045e8:	06f0      	lsls	r0, r6, #27
 80045ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ee:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80045f2:	d568      	bpl.n	80046c6 <_dtoa_r+0x376>
 80045f4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80045f8:	4b21      	ldr	r3, [pc, #132]	; (8004680 <_dtoa_r+0x330>)
 80045fa:	2503      	movs	r5, #3
 80045fc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004600:	f7fc f894 	bl	800072c <__aeabi_ddiv>
 8004604:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004608:	f006 060f 	and.w	r6, r6, #15
 800460c:	4f1c      	ldr	r7, [pc, #112]	; (8004680 <_dtoa_r+0x330>)
 800460e:	e04f      	b.n	80046b0 <_dtoa_r+0x360>
 8004610:	2301      	movs	r3, #1
 8004612:	9309      	str	r3, [sp, #36]	; 0x24
 8004614:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004616:	4453      	add	r3, sl
 8004618:	f103 0801 	add.w	r8, r3, #1
 800461c:	9304      	str	r3, [sp, #16]
 800461e:	4643      	mov	r3, r8
 8004620:	2b01      	cmp	r3, #1
 8004622:	bfb8      	it	lt
 8004624:	2301      	movlt	r3, #1
 8004626:	e7ba      	b.n	800459e <_dtoa_r+0x24e>
 8004628:	2300      	movs	r3, #0
 800462a:	e7b2      	b.n	8004592 <_dtoa_r+0x242>
 800462c:	2300      	movs	r3, #0
 800462e:	e7f0      	b.n	8004612 <_dtoa_r+0x2c2>
 8004630:	2501      	movs	r5, #1
 8004632:	2300      	movs	r3, #0
 8004634:	9509      	str	r5, [sp, #36]	; 0x24
 8004636:	931e      	str	r3, [sp, #120]	; 0x78
 8004638:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800463c:	2200      	movs	r2, #0
 800463e:	9304      	str	r3, [sp, #16]
 8004640:	4698      	mov	r8, r3
 8004642:	2312      	movs	r3, #18
 8004644:	921f      	str	r2, [sp, #124]	; 0x7c
 8004646:	e7aa      	b.n	800459e <_dtoa_r+0x24e>
 8004648:	2301      	movs	r3, #1
 800464a:	9309      	str	r3, [sp, #36]	; 0x24
 800464c:	e7f4      	b.n	8004638 <_dtoa_r+0x2e8>
 800464e:	bf00      	nop
 8004650:	636f4361 	.word	0x636f4361
 8004654:	3fd287a7 	.word	0x3fd287a7
 8004658:	8b60c8b3 	.word	0x8b60c8b3
 800465c:	3fc68a28 	.word	0x3fc68a28
 8004660:	509f79fb 	.word	0x509f79fb
 8004664:	3fd34413 	.word	0x3fd34413
 8004668:	7ff00000 	.word	0x7ff00000
 800466c:	080058d1 	.word	0x080058d1
 8004670:	080058c8 	.word	0x080058c8
 8004674:	080058a5 	.word	0x080058a5
 8004678:	3ff80000 	.word	0x3ff80000
 800467c:	08005900 	.word	0x08005900
 8004680:	080058d8 	.word	0x080058d8
 8004684:	2301      	movs	r3, #1
 8004686:	9304      	str	r3, [sp, #16]
 8004688:	4698      	mov	r8, r3
 800468a:	461a      	mov	r2, r3
 800468c:	e7da      	b.n	8004644 <_dtoa_r+0x2f4>
 800468e:	3101      	adds	r1, #1
 8004690:	6071      	str	r1, [r6, #4]
 8004692:	0052      	lsls	r2, r2, #1
 8004694:	e787      	b.n	80045a6 <_dtoa_r+0x256>
 8004696:	07f1      	lsls	r1, r6, #31
 8004698:	d508      	bpl.n	80046ac <_dtoa_r+0x35c>
 800469a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800469e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046a2:	f7fb ff19 	bl	80004d8 <__aeabi_dmul>
 80046a6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80046aa:	3501      	adds	r5, #1
 80046ac:	1076      	asrs	r6, r6, #1
 80046ae:	3708      	adds	r7, #8
 80046b0:	2e00      	cmp	r6, #0
 80046b2:	d1f0      	bne.n	8004696 <_dtoa_r+0x346>
 80046b4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80046b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80046bc:	f7fc f836 	bl	800072c <__aeabi_ddiv>
 80046c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80046c4:	e01b      	b.n	80046fe <_dtoa_r+0x3ae>
 80046c6:	2502      	movs	r5, #2
 80046c8:	e7a0      	b.n	800460c <_dtoa_r+0x2bc>
 80046ca:	f000 80a4 	beq.w	8004816 <_dtoa_r+0x4c6>
 80046ce:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80046d2:	f1ca 0600 	rsb	r6, sl, #0
 80046d6:	4ba0      	ldr	r3, [pc, #640]	; (8004958 <_dtoa_r+0x608>)
 80046d8:	f006 020f 	and.w	r2, r6, #15
 80046dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80046e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046e4:	f7fb fef8 	bl	80004d8 <__aeabi_dmul>
 80046e8:	2502      	movs	r5, #2
 80046ea:	2300      	movs	r3, #0
 80046ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80046f0:	4f9a      	ldr	r7, [pc, #616]	; (800495c <_dtoa_r+0x60c>)
 80046f2:	1136      	asrs	r6, r6, #4
 80046f4:	2e00      	cmp	r6, #0
 80046f6:	f040 8083 	bne.w	8004800 <_dtoa_r+0x4b0>
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d1e0      	bne.n	80046c0 <_dtoa_r+0x370>
 80046fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004700:	2b00      	cmp	r3, #0
 8004702:	f000 808a 	beq.w	800481a <_dtoa_r+0x4ca>
 8004706:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800470a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800470e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004712:	2200      	movs	r2, #0
 8004714:	4b92      	ldr	r3, [pc, #584]	; (8004960 <_dtoa_r+0x610>)
 8004716:	f7fc f951 	bl	80009bc <__aeabi_dcmplt>
 800471a:	2800      	cmp	r0, #0
 800471c:	d07d      	beq.n	800481a <_dtoa_r+0x4ca>
 800471e:	f1b8 0f00 	cmp.w	r8, #0
 8004722:	d07a      	beq.n	800481a <_dtoa_r+0x4ca>
 8004724:	9b04      	ldr	r3, [sp, #16]
 8004726:	2b00      	cmp	r3, #0
 8004728:	dd36      	ble.n	8004798 <_dtoa_r+0x448>
 800472a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800472e:	2200      	movs	r2, #0
 8004730:	4b8c      	ldr	r3, [pc, #560]	; (8004964 <_dtoa_r+0x614>)
 8004732:	f7fb fed1 	bl	80004d8 <__aeabi_dmul>
 8004736:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800473a:	9e04      	ldr	r6, [sp, #16]
 800473c:	f10a 37ff 	add.w	r7, sl, #4294967295	; 0xffffffff
 8004740:	3501      	adds	r5, #1
 8004742:	4628      	mov	r0, r5
 8004744:	f7fb fe5e 	bl	8000404 <__aeabi_i2d>
 8004748:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800474c:	f7fb fec4 	bl	80004d8 <__aeabi_dmul>
 8004750:	2200      	movs	r2, #0
 8004752:	4b85      	ldr	r3, [pc, #532]	; (8004968 <_dtoa_r+0x618>)
 8004754:	f7fb fd0a 	bl	800016c <__adddf3>
 8004758:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 800475c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004760:	950b      	str	r5, [sp, #44]	; 0x2c
 8004762:	2e00      	cmp	r6, #0
 8004764:	d15c      	bne.n	8004820 <_dtoa_r+0x4d0>
 8004766:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800476a:	2200      	movs	r2, #0
 800476c:	4b7f      	ldr	r3, [pc, #508]	; (800496c <_dtoa_r+0x61c>)
 800476e:	f7fb fcfb 	bl	8000168 <__aeabi_dsub>
 8004772:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004774:	462b      	mov	r3, r5
 8004776:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800477a:	f7fc f93d 	bl	80009f8 <__aeabi_dcmpgt>
 800477e:	2800      	cmp	r0, #0
 8004780:	f040 8281 	bne.w	8004c86 <_dtoa_r+0x936>
 8004784:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004788:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800478a:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800478e:	f7fc f915 	bl	80009bc <__aeabi_dcmplt>
 8004792:	2800      	cmp	r0, #0
 8004794:	f040 8275 	bne.w	8004c82 <_dtoa_r+0x932>
 8004798:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800479c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80047a0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	f2c0 814b 	blt.w	8004a3e <_dtoa_r+0x6ee>
 80047a8:	f1ba 0f0e 	cmp.w	sl, #14
 80047ac:	f300 8147 	bgt.w	8004a3e <_dtoa_r+0x6ee>
 80047b0:	4b69      	ldr	r3, [pc, #420]	; (8004958 <_dtoa_r+0x608>)
 80047b2:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80047b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ba:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80047be:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	f280 80d7 	bge.w	8004974 <_dtoa_r+0x624>
 80047c6:	f1b8 0f00 	cmp.w	r8, #0
 80047ca:	f300 80d3 	bgt.w	8004974 <_dtoa_r+0x624>
 80047ce:	f040 8257 	bne.w	8004c80 <_dtoa_r+0x930>
 80047d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80047d6:	2200      	movs	r2, #0
 80047d8:	4b64      	ldr	r3, [pc, #400]	; (800496c <_dtoa_r+0x61c>)
 80047da:	f7fb fe7d 	bl	80004d8 <__aeabi_dmul>
 80047de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80047e2:	f7fc f8ff 	bl	80009e4 <__aeabi_dcmpge>
 80047e6:	4646      	mov	r6, r8
 80047e8:	4647      	mov	r7, r8
 80047ea:	2800      	cmp	r0, #0
 80047ec:	f040 822d 	bne.w	8004c4a <_dtoa_r+0x8fa>
 80047f0:	9b06      	ldr	r3, [sp, #24]
 80047f2:	9a06      	ldr	r2, [sp, #24]
 80047f4:	1c5d      	adds	r5, r3, #1
 80047f6:	2331      	movs	r3, #49	; 0x31
 80047f8:	f10a 0a01 	add.w	sl, sl, #1
 80047fc:	7013      	strb	r3, [r2, #0]
 80047fe:	e228      	b.n	8004c52 <_dtoa_r+0x902>
 8004800:	07f2      	lsls	r2, r6, #31
 8004802:	d505      	bpl.n	8004810 <_dtoa_r+0x4c0>
 8004804:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004808:	f7fb fe66 	bl	80004d8 <__aeabi_dmul>
 800480c:	2301      	movs	r3, #1
 800480e:	3501      	adds	r5, #1
 8004810:	1076      	asrs	r6, r6, #1
 8004812:	3708      	adds	r7, #8
 8004814:	e76e      	b.n	80046f4 <_dtoa_r+0x3a4>
 8004816:	2502      	movs	r5, #2
 8004818:	e771      	b.n	80046fe <_dtoa_r+0x3ae>
 800481a:	4657      	mov	r7, sl
 800481c:	4646      	mov	r6, r8
 800481e:	e790      	b.n	8004742 <_dtoa_r+0x3f2>
 8004820:	4b4d      	ldr	r3, [pc, #308]	; (8004958 <_dtoa_r+0x608>)
 8004822:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004826:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800482a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800482c:	2b00      	cmp	r3, #0
 800482e:	d048      	beq.n	80048c2 <_dtoa_r+0x572>
 8004830:	4602      	mov	r2, r0
 8004832:	460b      	mov	r3, r1
 8004834:	2000      	movs	r0, #0
 8004836:	494e      	ldr	r1, [pc, #312]	; (8004970 <_dtoa_r+0x620>)
 8004838:	f7fb ff78 	bl	800072c <__aeabi_ddiv>
 800483c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004840:	f7fb fc92 	bl	8000168 <__aeabi_dsub>
 8004844:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004848:	9d06      	ldr	r5, [sp, #24]
 800484a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800484e:	f7fc f8f3 	bl	8000a38 <__aeabi_d2iz>
 8004852:	9011      	str	r0, [sp, #68]	; 0x44
 8004854:	f7fb fdd6 	bl	8000404 <__aeabi_i2d>
 8004858:	4602      	mov	r2, r0
 800485a:	460b      	mov	r3, r1
 800485c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004860:	f7fb fc82 	bl	8000168 <__aeabi_dsub>
 8004864:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004866:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800486a:	3330      	adds	r3, #48	; 0x30
 800486c:	f805 3b01 	strb.w	r3, [r5], #1
 8004870:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004874:	f7fc f8a2 	bl	80009bc <__aeabi_dcmplt>
 8004878:	2800      	cmp	r0, #0
 800487a:	d163      	bne.n	8004944 <_dtoa_r+0x5f4>
 800487c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004880:	2000      	movs	r0, #0
 8004882:	4937      	ldr	r1, [pc, #220]	; (8004960 <_dtoa_r+0x610>)
 8004884:	f7fb fc70 	bl	8000168 <__aeabi_dsub>
 8004888:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800488c:	f7fc f896 	bl	80009bc <__aeabi_dcmplt>
 8004890:	2800      	cmp	r0, #0
 8004892:	f040 80b5 	bne.w	8004a00 <_dtoa_r+0x6b0>
 8004896:	9b06      	ldr	r3, [sp, #24]
 8004898:	1aeb      	subs	r3, r5, r3
 800489a:	429e      	cmp	r6, r3
 800489c:	f77f af7c 	ble.w	8004798 <_dtoa_r+0x448>
 80048a0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80048a4:	2200      	movs	r2, #0
 80048a6:	4b2f      	ldr	r3, [pc, #188]	; (8004964 <_dtoa_r+0x614>)
 80048a8:	f7fb fe16 	bl	80004d8 <__aeabi_dmul>
 80048ac:	2200      	movs	r2, #0
 80048ae:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80048b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80048b6:	4b2b      	ldr	r3, [pc, #172]	; (8004964 <_dtoa_r+0x614>)
 80048b8:	f7fb fe0e 	bl	80004d8 <__aeabi_dmul>
 80048bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80048c0:	e7c3      	b.n	800484a <_dtoa_r+0x4fa>
 80048c2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80048c6:	f7fb fe07 	bl	80004d8 <__aeabi_dmul>
 80048ca:	9b06      	ldr	r3, [sp, #24]
 80048cc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80048d0:	199d      	adds	r5, r3, r6
 80048d2:	461e      	mov	r6, r3
 80048d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80048d8:	f7fc f8ae 	bl	8000a38 <__aeabi_d2iz>
 80048dc:	9011      	str	r0, [sp, #68]	; 0x44
 80048de:	f7fb fd91 	bl	8000404 <__aeabi_i2d>
 80048e2:	4602      	mov	r2, r0
 80048e4:	460b      	mov	r3, r1
 80048e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80048ea:	f7fb fc3d 	bl	8000168 <__aeabi_dsub>
 80048ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80048f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80048f4:	3330      	adds	r3, #48	; 0x30
 80048f6:	f806 3b01 	strb.w	r3, [r6], #1
 80048fa:	42ae      	cmp	r6, r5
 80048fc:	f04f 0200 	mov.w	r2, #0
 8004900:	d124      	bne.n	800494c <_dtoa_r+0x5fc>
 8004902:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004906:	4b1a      	ldr	r3, [pc, #104]	; (8004970 <_dtoa_r+0x620>)
 8004908:	f7fb fc30 	bl	800016c <__adddf3>
 800490c:	4602      	mov	r2, r0
 800490e:	460b      	mov	r3, r1
 8004910:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004914:	f7fc f870 	bl	80009f8 <__aeabi_dcmpgt>
 8004918:	2800      	cmp	r0, #0
 800491a:	d171      	bne.n	8004a00 <_dtoa_r+0x6b0>
 800491c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004920:	2000      	movs	r0, #0
 8004922:	4913      	ldr	r1, [pc, #76]	; (8004970 <_dtoa_r+0x620>)
 8004924:	f7fb fc20 	bl	8000168 <__aeabi_dsub>
 8004928:	4602      	mov	r2, r0
 800492a:	460b      	mov	r3, r1
 800492c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004930:	f7fc f844 	bl	80009bc <__aeabi_dcmplt>
 8004934:	2800      	cmp	r0, #0
 8004936:	f43f af2f 	beq.w	8004798 <_dtoa_r+0x448>
 800493a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800493e:	1e6a      	subs	r2, r5, #1
 8004940:	2b30      	cmp	r3, #48	; 0x30
 8004942:	d001      	beq.n	8004948 <_dtoa_r+0x5f8>
 8004944:	46ba      	mov	sl, r7
 8004946:	e04a      	b.n	80049de <_dtoa_r+0x68e>
 8004948:	4615      	mov	r5, r2
 800494a:	e7f6      	b.n	800493a <_dtoa_r+0x5ea>
 800494c:	4b05      	ldr	r3, [pc, #20]	; (8004964 <_dtoa_r+0x614>)
 800494e:	f7fb fdc3 	bl	80004d8 <__aeabi_dmul>
 8004952:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004956:	e7bd      	b.n	80048d4 <_dtoa_r+0x584>
 8004958:	08005900 	.word	0x08005900
 800495c:	080058d8 	.word	0x080058d8
 8004960:	3ff00000 	.word	0x3ff00000
 8004964:	40240000 	.word	0x40240000
 8004968:	401c0000 	.word	0x401c0000
 800496c:	40140000 	.word	0x40140000
 8004970:	3fe00000 	.word	0x3fe00000
 8004974:	9d06      	ldr	r5, [sp, #24]
 8004976:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800497a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800497e:	4630      	mov	r0, r6
 8004980:	4639      	mov	r1, r7
 8004982:	f7fb fed3 	bl	800072c <__aeabi_ddiv>
 8004986:	f7fc f857 	bl	8000a38 <__aeabi_d2iz>
 800498a:	4681      	mov	r9, r0
 800498c:	f7fb fd3a 	bl	8000404 <__aeabi_i2d>
 8004990:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004994:	f7fb fda0 	bl	80004d8 <__aeabi_dmul>
 8004998:	4602      	mov	r2, r0
 800499a:	460b      	mov	r3, r1
 800499c:	4630      	mov	r0, r6
 800499e:	4639      	mov	r1, r7
 80049a0:	f7fb fbe2 	bl	8000168 <__aeabi_dsub>
 80049a4:	f109 0630 	add.w	r6, r9, #48	; 0x30
 80049a8:	f805 6b01 	strb.w	r6, [r5], #1
 80049ac:	9e06      	ldr	r6, [sp, #24]
 80049ae:	4602      	mov	r2, r0
 80049b0:	1bae      	subs	r6, r5, r6
 80049b2:	45b0      	cmp	r8, r6
 80049b4:	460b      	mov	r3, r1
 80049b6:	d135      	bne.n	8004a24 <_dtoa_r+0x6d4>
 80049b8:	f7fb fbd8 	bl	800016c <__adddf3>
 80049bc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80049c0:	4606      	mov	r6, r0
 80049c2:	460f      	mov	r7, r1
 80049c4:	f7fc f818 	bl	80009f8 <__aeabi_dcmpgt>
 80049c8:	b9c8      	cbnz	r0, 80049fe <_dtoa_r+0x6ae>
 80049ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80049ce:	4630      	mov	r0, r6
 80049d0:	4639      	mov	r1, r7
 80049d2:	f7fb ffe9 	bl	80009a8 <__aeabi_dcmpeq>
 80049d6:	b110      	cbz	r0, 80049de <_dtoa_r+0x68e>
 80049d8:	f019 0f01 	tst.w	r9, #1
 80049dc:	d10f      	bne.n	80049fe <_dtoa_r+0x6ae>
 80049de:	4659      	mov	r1, fp
 80049e0:	4620      	mov	r0, r4
 80049e2:	f000 faad 	bl	8004f40 <_Bfree>
 80049e6:	2300      	movs	r3, #0
 80049e8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80049ea:	702b      	strb	r3, [r5, #0]
 80049ec:	f10a 0301 	add.w	r3, sl, #1
 80049f0:	6013      	str	r3, [r2, #0]
 80049f2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	f43f acf3 	beq.w	80043e0 <_dtoa_r+0x90>
 80049fa:	601d      	str	r5, [r3, #0]
 80049fc:	e4f0      	b.n	80043e0 <_dtoa_r+0x90>
 80049fe:	4657      	mov	r7, sl
 8004a00:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8004a04:	1e6b      	subs	r3, r5, #1
 8004a06:	2a39      	cmp	r2, #57	; 0x39
 8004a08:	d106      	bne.n	8004a18 <_dtoa_r+0x6c8>
 8004a0a:	9a06      	ldr	r2, [sp, #24]
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	d107      	bne.n	8004a20 <_dtoa_r+0x6d0>
 8004a10:	2330      	movs	r3, #48	; 0x30
 8004a12:	7013      	strb	r3, [r2, #0]
 8004a14:	4613      	mov	r3, r2
 8004a16:	3701      	adds	r7, #1
 8004a18:	781a      	ldrb	r2, [r3, #0]
 8004a1a:	3201      	adds	r2, #1
 8004a1c:	701a      	strb	r2, [r3, #0]
 8004a1e:	e791      	b.n	8004944 <_dtoa_r+0x5f4>
 8004a20:	461d      	mov	r5, r3
 8004a22:	e7ed      	b.n	8004a00 <_dtoa_r+0x6b0>
 8004a24:	2200      	movs	r2, #0
 8004a26:	4b99      	ldr	r3, [pc, #612]	; (8004c8c <_dtoa_r+0x93c>)
 8004a28:	f7fb fd56 	bl	80004d8 <__aeabi_dmul>
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	2300      	movs	r3, #0
 8004a30:	4606      	mov	r6, r0
 8004a32:	460f      	mov	r7, r1
 8004a34:	f7fb ffb8 	bl	80009a8 <__aeabi_dcmpeq>
 8004a38:	2800      	cmp	r0, #0
 8004a3a:	d09e      	beq.n	800497a <_dtoa_r+0x62a>
 8004a3c:	e7cf      	b.n	80049de <_dtoa_r+0x68e>
 8004a3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004a40:	2a00      	cmp	r2, #0
 8004a42:	f000 8088 	beq.w	8004b56 <_dtoa_r+0x806>
 8004a46:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004a48:	2a01      	cmp	r2, #1
 8004a4a:	dc6d      	bgt.n	8004b28 <_dtoa_r+0x7d8>
 8004a4c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004a4e:	2a00      	cmp	r2, #0
 8004a50:	d066      	beq.n	8004b20 <_dtoa_r+0x7d0>
 8004a52:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004a56:	464d      	mov	r5, r9
 8004a58:	9e08      	ldr	r6, [sp, #32]
 8004a5a:	9a07      	ldr	r2, [sp, #28]
 8004a5c:	2101      	movs	r1, #1
 8004a5e:	441a      	add	r2, r3
 8004a60:	4620      	mov	r0, r4
 8004a62:	4499      	add	r9, r3
 8004a64:	9207      	str	r2, [sp, #28]
 8004a66:	f000 fb0b 	bl	8005080 <__i2b>
 8004a6a:	4607      	mov	r7, r0
 8004a6c:	2d00      	cmp	r5, #0
 8004a6e:	dd0b      	ble.n	8004a88 <_dtoa_r+0x738>
 8004a70:	9b07      	ldr	r3, [sp, #28]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	dd08      	ble.n	8004a88 <_dtoa_r+0x738>
 8004a76:	42ab      	cmp	r3, r5
 8004a78:	bfa8      	it	ge
 8004a7a:	462b      	movge	r3, r5
 8004a7c:	9a07      	ldr	r2, [sp, #28]
 8004a7e:	eba9 0903 	sub.w	r9, r9, r3
 8004a82:	1aed      	subs	r5, r5, r3
 8004a84:	1ad3      	subs	r3, r2, r3
 8004a86:	9307      	str	r3, [sp, #28]
 8004a88:	9b08      	ldr	r3, [sp, #32]
 8004a8a:	b1eb      	cbz	r3, 8004ac8 <_dtoa_r+0x778>
 8004a8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d065      	beq.n	8004b5e <_dtoa_r+0x80e>
 8004a92:	b18e      	cbz	r6, 8004ab8 <_dtoa_r+0x768>
 8004a94:	4639      	mov	r1, r7
 8004a96:	4632      	mov	r2, r6
 8004a98:	4620      	mov	r0, r4
 8004a9a:	f000 fb8f 	bl	80051bc <__pow5mult>
 8004a9e:	465a      	mov	r2, fp
 8004aa0:	4601      	mov	r1, r0
 8004aa2:	4607      	mov	r7, r0
 8004aa4:	4620      	mov	r0, r4
 8004aa6:	f000 faf4 	bl	8005092 <__multiply>
 8004aaa:	4659      	mov	r1, fp
 8004aac:	900a      	str	r0, [sp, #40]	; 0x28
 8004aae:	4620      	mov	r0, r4
 8004ab0:	f000 fa46 	bl	8004f40 <_Bfree>
 8004ab4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ab6:	469b      	mov	fp, r3
 8004ab8:	9b08      	ldr	r3, [sp, #32]
 8004aba:	1b9a      	subs	r2, r3, r6
 8004abc:	d004      	beq.n	8004ac8 <_dtoa_r+0x778>
 8004abe:	4659      	mov	r1, fp
 8004ac0:	4620      	mov	r0, r4
 8004ac2:	f000 fb7b 	bl	80051bc <__pow5mult>
 8004ac6:	4683      	mov	fp, r0
 8004ac8:	2101      	movs	r1, #1
 8004aca:	4620      	mov	r0, r4
 8004acc:	f000 fad8 	bl	8005080 <__i2b>
 8004ad0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004ad2:	4606      	mov	r6, r0
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	f000 81c6 	beq.w	8004e66 <_dtoa_r+0xb16>
 8004ada:	461a      	mov	r2, r3
 8004adc:	4601      	mov	r1, r0
 8004ade:	4620      	mov	r0, r4
 8004ae0:	f000 fb6c 	bl	80051bc <__pow5mult>
 8004ae4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004ae6:	4606      	mov	r6, r0
 8004ae8:	2b01      	cmp	r3, #1
 8004aea:	dc3e      	bgt.n	8004b6a <_dtoa_r+0x81a>
 8004aec:	9b02      	ldr	r3, [sp, #8]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d137      	bne.n	8004b62 <_dtoa_r+0x812>
 8004af2:	9b03      	ldr	r3, [sp, #12]
 8004af4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d134      	bne.n	8004b66 <_dtoa_r+0x816>
 8004afc:	9b03      	ldr	r3, [sp, #12]
 8004afe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004b02:	0d1b      	lsrs	r3, r3, #20
 8004b04:	051b      	lsls	r3, r3, #20
 8004b06:	b12b      	cbz	r3, 8004b14 <_dtoa_r+0x7c4>
 8004b08:	9b07      	ldr	r3, [sp, #28]
 8004b0a:	f109 0901 	add.w	r9, r9, #1
 8004b0e:	3301      	adds	r3, #1
 8004b10:	9307      	str	r3, [sp, #28]
 8004b12:	2301      	movs	r3, #1
 8004b14:	9308      	str	r3, [sp, #32]
 8004b16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d128      	bne.n	8004b6e <_dtoa_r+0x81e>
 8004b1c:	2001      	movs	r0, #1
 8004b1e:	e02e      	b.n	8004b7e <_dtoa_r+0x82e>
 8004b20:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004b22:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004b26:	e796      	b.n	8004a56 <_dtoa_r+0x706>
 8004b28:	9b08      	ldr	r3, [sp, #32]
 8004b2a:	f108 36ff 	add.w	r6, r8, #4294967295	; 0xffffffff
 8004b2e:	42b3      	cmp	r3, r6
 8004b30:	bfb7      	itett	lt
 8004b32:	9b08      	ldrlt	r3, [sp, #32]
 8004b34:	1b9e      	subge	r6, r3, r6
 8004b36:	1af2      	sublt	r2, r6, r3
 8004b38:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8004b3a:	bfbf      	itttt	lt
 8004b3c:	9608      	strlt	r6, [sp, #32]
 8004b3e:	189b      	addlt	r3, r3, r2
 8004b40:	930c      	strlt	r3, [sp, #48]	; 0x30
 8004b42:	2600      	movlt	r6, #0
 8004b44:	f1b8 0f00 	cmp.w	r8, #0
 8004b48:	bfb9      	ittee	lt
 8004b4a:	eba9 0508 	sublt.w	r5, r9, r8
 8004b4e:	2300      	movlt	r3, #0
 8004b50:	464d      	movge	r5, r9
 8004b52:	4643      	movge	r3, r8
 8004b54:	e781      	b.n	8004a5a <_dtoa_r+0x70a>
 8004b56:	9e08      	ldr	r6, [sp, #32]
 8004b58:	464d      	mov	r5, r9
 8004b5a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8004b5c:	e786      	b.n	8004a6c <_dtoa_r+0x71c>
 8004b5e:	9a08      	ldr	r2, [sp, #32]
 8004b60:	e7ad      	b.n	8004abe <_dtoa_r+0x76e>
 8004b62:	2300      	movs	r3, #0
 8004b64:	e7d6      	b.n	8004b14 <_dtoa_r+0x7c4>
 8004b66:	9b02      	ldr	r3, [sp, #8]
 8004b68:	e7d4      	b.n	8004b14 <_dtoa_r+0x7c4>
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	9308      	str	r3, [sp, #32]
 8004b6e:	6933      	ldr	r3, [r6, #16]
 8004b70:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8004b74:	6918      	ldr	r0, [r3, #16]
 8004b76:	f000 fa35 	bl	8004fe4 <__hi0bits>
 8004b7a:	f1c0 0020 	rsb	r0, r0, #32
 8004b7e:	9b07      	ldr	r3, [sp, #28]
 8004b80:	4418      	add	r0, r3
 8004b82:	f010 001f 	ands.w	r0, r0, #31
 8004b86:	d047      	beq.n	8004c18 <_dtoa_r+0x8c8>
 8004b88:	f1c0 0320 	rsb	r3, r0, #32
 8004b8c:	2b04      	cmp	r3, #4
 8004b8e:	dd3b      	ble.n	8004c08 <_dtoa_r+0x8b8>
 8004b90:	9b07      	ldr	r3, [sp, #28]
 8004b92:	f1c0 001c 	rsb	r0, r0, #28
 8004b96:	4481      	add	r9, r0
 8004b98:	4405      	add	r5, r0
 8004b9a:	4403      	add	r3, r0
 8004b9c:	9307      	str	r3, [sp, #28]
 8004b9e:	f1b9 0f00 	cmp.w	r9, #0
 8004ba2:	dd05      	ble.n	8004bb0 <_dtoa_r+0x860>
 8004ba4:	4659      	mov	r1, fp
 8004ba6:	464a      	mov	r2, r9
 8004ba8:	4620      	mov	r0, r4
 8004baa:	f000 fb55 	bl	8005258 <__lshift>
 8004bae:	4683      	mov	fp, r0
 8004bb0:	9b07      	ldr	r3, [sp, #28]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	dd05      	ble.n	8004bc2 <_dtoa_r+0x872>
 8004bb6:	4631      	mov	r1, r6
 8004bb8:	461a      	mov	r2, r3
 8004bba:	4620      	mov	r0, r4
 8004bbc:	f000 fb4c 	bl	8005258 <__lshift>
 8004bc0:	4606      	mov	r6, r0
 8004bc2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004bc4:	b353      	cbz	r3, 8004c1c <_dtoa_r+0x8cc>
 8004bc6:	4631      	mov	r1, r6
 8004bc8:	4658      	mov	r0, fp
 8004bca:	f000 fb99 	bl	8005300 <__mcmp>
 8004bce:	2800      	cmp	r0, #0
 8004bd0:	da24      	bge.n	8004c1c <_dtoa_r+0x8cc>
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	4659      	mov	r1, fp
 8004bd6:	220a      	movs	r2, #10
 8004bd8:	4620      	mov	r0, r4
 8004bda:	f000 f9c8 	bl	8004f6e <__multadd>
 8004bde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004be0:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004be4:	4683      	mov	fp, r0
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	f000 8144 	beq.w	8004e74 <_dtoa_r+0xb24>
 8004bec:	2300      	movs	r3, #0
 8004bee:	4639      	mov	r1, r7
 8004bf0:	220a      	movs	r2, #10
 8004bf2:	4620      	mov	r0, r4
 8004bf4:	f000 f9bb 	bl	8004f6e <__multadd>
 8004bf8:	9b04      	ldr	r3, [sp, #16]
 8004bfa:	4607      	mov	r7, r0
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	dc4d      	bgt.n	8004c9c <_dtoa_r+0x94c>
 8004c00:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004c02:	2b02      	cmp	r3, #2
 8004c04:	dd4a      	ble.n	8004c9c <_dtoa_r+0x94c>
 8004c06:	e011      	b.n	8004c2c <_dtoa_r+0x8dc>
 8004c08:	d0c9      	beq.n	8004b9e <_dtoa_r+0x84e>
 8004c0a:	9a07      	ldr	r2, [sp, #28]
 8004c0c:	331c      	adds	r3, #28
 8004c0e:	441a      	add	r2, r3
 8004c10:	4499      	add	r9, r3
 8004c12:	441d      	add	r5, r3
 8004c14:	4613      	mov	r3, r2
 8004c16:	e7c1      	b.n	8004b9c <_dtoa_r+0x84c>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	e7f6      	b.n	8004c0a <_dtoa_r+0x8ba>
 8004c1c:	f1b8 0f00 	cmp.w	r8, #0
 8004c20:	dc36      	bgt.n	8004c90 <_dtoa_r+0x940>
 8004c22:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004c24:	2b02      	cmp	r3, #2
 8004c26:	dd33      	ble.n	8004c90 <_dtoa_r+0x940>
 8004c28:	f8cd 8010 	str.w	r8, [sp, #16]
 8004c2c:	9b04      	ldr	r3, [sp, #16]
 8004c2e:	b963      	cbnz	r3, 8004c4a <_dtoa_r+0x8fa>
 8004c30:	4631      	mov	r1, r6
 8004c32:	2205      	movs	r2, #5
 8004c34:	4620      	mov	r0, r4
 8004c36:	f000 f99a 	bl	8004f6e <__multadd>
 8004c3a:	4601      	mov	r1, r0
 8004c3c:	4606      	mov	r6, r0
 8004c3e:	4658      	mov	r0, fp
 8004c40:	f000 fb5e 	bl	8005300 <__mcmp>
 8004c44:	2800      	cmp	r0, #0
 8004c46:	f73f add3 	bgt.w	80047f0 <_dtoa_r+0x4a0>
 8004c4a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004c4c:	9d06      	ldr	r5, [sp, #24]
 8004c4e:	ea6f 0a03 	mvn.w	sl, r3
 8004c52:	f04f 0900 	mov.w	r9, #0
 8004c56:	4631      	mov	r1, r6
 8004c58:	4620      	mov	r0, r4
 8004c5a:	f000 f971 	bl	8004f40 <_Bfree>
 8004c5e:	2f00      	cmp	r7, #0
 8004c60:	f43f aebd 	beq.w	80049de <_dtoa_r+0x68e>
 8004c64:	f1b9 0f00 	cmp.w	r9, #0
 8004c68:	d005      	beq.n	8004c76 <_dtoa_r+0x926>
 8004c6a:	45b9      	cmp	r9, r7
 8004c6c:	d003      	beq.n	8004c76 <_dtoa_r+0x926>
 8004c6e:	4649      	mov	r1, r9
 8004c70:	4620      	mov	r0, r4
 8004c72:	f000 f965 	bl	8004f40 <_Bfree>
 8004c76:	4639      	mov	r1, r7
 8004c78:	4620      	mov	r0, r4
 8004c7a:	f000 f961 	bl	8004f40 <_Bfree>
 8004c7e:	e6ae      	b.n	80049de <_dtoa_r+0x68e>
 8004c80:	2600      	movs	r6, #0
 8004c82:	4637      	mov	r7, r6
 8004c84:	e7e1      	b.n	8004c4a <_dtoa_r+0x8fa>
 8004c86:	46ba      	mov	sl, r7
 8004c88:	4637      	mov	r7, r6
 8004c8a:	e5b1      	b.n	80047f0 <_dtoa_r+0x4a0>
 8004c8c:	40240000 	.word	0x40240000
 8004c90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c92:	f8cd 8010 	str.w	r8, [sp, #16]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	f000 80f3 	beq.w	8004e82 <_dtoa_r+0xb32>
 8004c9c:	2d00      	cmp	r5, #0
 8004c9e:	dd05      	ble.n	8004cac <_dtoa_r+0x95c>
 8004ca0:	4639      	mov	r1, r7
 8004ca2:	462a      	mov	r2, r5
 8004ca4:	4620      	mov	r0, r4
 8004ca6:	f000 fad7 	bl	8005258 <__lshift>
 8004caa:	4607      	mov	r7, r0
 8004cac:	9b08      	ldr	r3, [sp, #32]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d04c      	beq.n	8004d4c <_dtoa_r+0x9fc>
 8004cb2:	6879      	ldr	r1, [r7, #4]
 8004cb4:	4620      	mov	r0, r4
 8004cb6:	f000 f90f 	bl	8004ed8 <_Balloc>
 8004cba:	4605      	mov	r5, r0
 8004cbc:	693a      	ldr	r2, [r7, #16]
 8004cbe:	f107 010c 	add.w	r1, r7, #12
 8004cc2:	3202      	adds	r2, #2
 8004cc4:	0092      	lsls	r2, r2, #2
 8004cc6:	300c      	adds	r0, #12
 8004cc8:	f7fe fd1e 	bl	8003708 <memcpy>
 8004ccc:	2201      	movs	r2, #1
 8004cce:	4629      	mov	r1, r5
 8004cd0:	4620      	mov	r0, r4
 8004cd2:	f000 fac1 	bl	8005258 <__lshift>
 8004cd6:	46b9      	mov	r9, r7
 8004cd8:	4607      	mov	r7, r0
 8004cda:	9b06      	ldr	r3, [sp, #24]
 8004cdc:	9307      	str	r3, [sp, #28]
 8004cde:	9b02      	ldr	r3, [sp, #8]
 8004ce0:	f003 0301 	and.w	r3, r3, #1
 8004ce4:	9308      	str	r3, [sp, #32]
 8004ce6:	4631      	mov	r1, r6
 8004ce8:	4658      	mov	r0, fp
 8004cea:	f7ff faa3 	bl	8004234 <quorem>
 8004cee:	4649      	mov	r1, r9
 8004cf0:	4605      	mov	r5, r0
 8004cf2:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8004cf6:	4658      	mov	r0, fp
 8004cf8:	f000 fb02 	bl	8005300 <__mcmp>
 8004cfc:	463a      	mov	r2, r7
 8004cfe:	9002      	str	r0, [sp, #8]
 8004d00:	4631      	mov	r1, r6
 8004d02:	4620      	mov	r0, r4
 8004d04:	f000 fb16 	bl	8005334 <__mdiff>
 8004d08:	68c3      	ldr	r3, [r0, #12]
 8004d0a:	4602      	mov	r2, r0
 8004d0c:	bb03      	cbnz	r3, 8004d50 <_dtoa_r+0xa00>
 8004d0e:	4601      	mov	r1, r0
 8004d10:	9009      	str	r0, [sp, #36]	; 0x24
 8004d12:	4658      	mov	r0, fp
 8004d14:	f000 faf4 	bl	8005300 <__mcmp>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004d1c:	4611      	mov	r1, r2
 8004d1e:	4620      	mov	r0, r4
 8004d20:	9309      	str	r3, [sp, #36]	; 0x24
 8004d22:	f000 f90d 	bl	8004f40 <_Bfree>
 8004d26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d28:	b9a3      	cbnz	r3, 8004d54 <_dtoa_r+0xa04>
 8004d2a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004d2c:	b992      	cbnz	r2, 8004d54 <_dtoa_r+0xa04>
 8004d2e:	9a08      	ldr	r2, [sp, #32]
 8004d30:	b982      	cbnz	r2, 8004d54 <_dtoa_r+0xa04>
 8004d32:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8004d36:	d029      	beq.n	8004d8c <_dtoa_r+0xa3c>
 8004d38:	9b02      	ldr	r3, [sp, #8]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	dd01      	ble.n	8004d42 <_dtoa_r+0x9f2>
 8004d3e:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8004d42:	9b07      	ldr	r3, [sp, #28]
 8004d44:	1c5d      	adds	r5, r3, #1
 8004d46:	f883 8000 	strb.w	r8, [r3]
 8004d4a:	e784      	b.n	8004c56 <_dtoa_r+0x906>
 8004d4c:	4638      	mov	r0, r7
 8004d4e:	e7c2      	b.n	8004cd6 <_dtoa_r+0x986>
 8004d50:	2301      	movs	r3, #1
 8004d52:	e7e3      	b.n	8004d1c <_dtoa_r+0x9cc>
 8004d54:	9a02      	ldr	r2, [sp, #8]
 8004d56:	2a00      	cmp	r2, #0
 8004d58:	db04      	blt.n	8004d64 <_dtoa_r+0xa14>
 8004d5a:	d123      	bne.n	8004da4 <_dtoa_r+0xa54>
 8004d5c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004d5e:	bb0a      	cbnz	r2, 8004da4 <_dtoa_r+0xa54>
 8004d60:	9a08      	ldr	r2, [sp, #32]
 8004d62:	b9fa      	cbnz	r2, 8004da4 <_dtoa_r+0xa54>
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	ddec      	ble.n	8004d42 <_dtoa_r+0x9f2>
 8004d68:	4659      	mov	r1, fp
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	4620      	mov	r0, r4
 8004d6e:	f000 fa73 	bl	8005258 <__lshift>
 8004d72:	4631      	mov	r1, r6
 8004d74:	4683      	mov	fp, r0
 8004d76:	f000 fac3 	bl	8005300 <__mcmp>
 8004d7a:	2800      	cmp	r0, #0
 8004d7c:	dc03      	bgt.n	8004d86 <_dtoa_r+0xa36>
 8004d7e:	d1e0      	bne.n	8004d42 <_dtoa_r+0x9f2>
 8004d80:	f018 0f01 	tst.w	r8, #1
 8004d84:	d0dd      	beq.n	8004d42 <_dtoa_r+0x9f2>
 8004d86:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8004d8a:	d1d8      	bne.n	8004d3e <_dtoa_r+0x9ee>
 8004d8c:	9b07      	ldr	r3, [sp, #28]
 8004d8e:	9a07      	ldr	r2, [sp, #28]
 8004d90:	1c5d      	adds	r5, r3, #1
 8004d92:	2339      	movs	r3, #57	; 0x39
 8004d94:	7013      	strb	r3, [r2, #0]
 8004d96:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004d9a:	1e6a      	subs	r2, r5, #1
 8004d9c:	2b39      	cmp	r3, #57	; 0x39
 8004d9e:	d04d      	beq.n	8004e3c <_dtoa_r+0xaec>
 8004da0:	3301      	adds	r3, #1
 8004da2:	e052      	b.n	8004e4a <_dtoa_r+0xafa>
 8004da4:	9a07      	ldr	r2, [sp, #28]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	f102 0501 	add.w	r5, r2, #1
 8004dac:	dd06      	ble.n	8004dbc <_dtoa_r+0xa6c>
 8004dae:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8004db2:	d0eb      	beq.n	8004d8c <_dtoa_r+0xa3c>
 8004db4:	f108 0801 	add.w	r8, r8, #1
 8004db8:	9b07      	ldr	r3, [sp, #28]
 8004dba:	e7c4      	b.n	8004d46 <_dtoa_r+0x9f6>
 8004dbc:	9b06      	ldr	r3, [sp, #24]
 8004dbe:	9a04      	ldr	r2, [sp, #16]
 8004dc0:	1aeb      	subs	r3, r5, r3
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	f805 8c01 	strb.w	r8, [r5, #-1]
 8004dc8:	d021      	beq.n	8004e0e <_dtoa_r+0xabe>
 8004dca:	4659      	mov	r1, fp
 8004dcc:	2300      	movs	r3, #0
 8004dce:	220a      	movs	r2, #10
 8004dd0:	4620      	mov	r0, r4
 8004dd2:	f000 f8cc 	bl	8004f6e <__multadd>
 8004dd6:	45b9      	cmp	r9, r7
 8004dd8:	4683      	mov	fp, r0
 8004dda:	f04f 0300 	mov.w	r3, #0
 8004dde:	f04f 020a 	mov.w	r2, #10
 8004de2:	4649      	mov	r1, r9
 8004de4:	4620      	mov	r0, r4
 8004de6:	d105      	bne.n	8004df4 <_dtoa_r+0xaa4>
 8004de8:	f000 f8c1 	bl	8004f6e <__multadd>
 8004dec:	4681      	mov	r9, r0
 8004dee:	4607      	mov	r7, r0
 8004df0:	9507      	str	r5, [sp, #28]
 8004df2:	e778      	b.n	8004ce6 <_dtoa_r+0x996>
 8004df4:	f000 f8bb 	bl	8004f6e <__multadd>
 8004df8:	4639      	mov	r1, r7
 8004dfa:	4681      	mov	r9, r0
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	220a      	movs	r2, #10
 8004e00:	4620      	mov	r0, r4
 8004e02:	f000 f8b4 	bl	8004f6e <__multadd>
 8004e06:	4607      	mov	r7, r0
 8004e08:	e7f2      	b.n	8004df0 <_dtoa_r+0xaa0>
 8004e0a:	f04f 0900 	mov.w	r9, #0
 8004e0e:	4659      	mov	r1, fp
 8004e10:	2201      	movs	r2, #1
 8004e12:	4620      	mov	r0, r4
 8004e14:	f000 fa20 	bl	8005258 <__lshift>
 8004e18:	4631      	mov	r1, r6
 8004e1a:	4683      	mov	fp, r0
 8004e1c:	f000 fa70 	bl	8005300 <__mcmp>
 8004e20:	2800      	cmp	r0, #0
 8004e22:	dcb8      	bgt.n	8004d96 <_dtoa_r+0xa46>
 8004e24:	d102      	bne.n	8004e2c <_dtoa_r+0xadc>
 8004e26:	f018 0f01 	tst.w	r8, #1
 8004e2a:	d1b4      	bne.n	8004d96 <_dtoa_r+0xa46>
 8004e2c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004e30:	1e6a      	subs	r2, r5, #1
 8004e32:	2b30      	cmp	r3, #48	; 0x30
 8004e34:	f47f af0f 	bne.w	8004c56 <_dtoa_r+0x906>
 8004e38:	4615      	mov	r5, r2
 8004e3a:	e7f7      	b.n	8004e2c <_dtoa_r+0xadc>
 8004e3c:	9b06      	ldr	r3, [sp, #24]
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d105      	bne.n	8004e4e <_dtoa_r+0xafe>
 8004e42:	2331      	movs	r3, #49	; 0x31
 8004e44:	9a06      	ldr	r2, [sp, #24]
 8004e46:	f10a 0a01 	add.w	sl, sl, #1
 8004e4a:	7013      	strb	r3, [r2, #0]
 8004e4c:	e703      	b.n	8004c56 <_dtoa_r+0x906>
 8004e4e:	4615      	mov	r5, r2
 8004e50:	e7a1      	b.n	8004d96 <_dtoa_r+0xa46>
 8004e52:	4b17      	ldr	r3, [pc, #92]	; (8004eb0 <_dtoa_r+0xb60>)
 8004e54:	f7ff bae1 	b.w	800441a <_dtoa_r+0xca>
 8004e58:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	f47f aabb 	bne.w	80043d6 <_dtoa_r+0x86>
 8004e60:	4b14      	ldr	r3, [pc, #80]	; (8004eb4 <_dtoa_r+0xb64>)
 8004e62:	f7ff bada 	b.w	800441a <_dtoa_r+0xca>
 8004e66:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	f77f ae3f 	ble.w	8004aec <_dtoa_r+0x79c>
 8004e6e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004e70:	9308      	str	r3, [sp, #32]
 8004e72:	e653      	b.n	8004b1c <_dtoa_r+0x7cc>
 8004e74:	9b04      	ldr	r3, [sp, #16]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	dc03      	bgt.n	8004e82 <_dtoa_r+0xb32>
 8004e7a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004e7c:	2b02      	cmp	r3, #2
 8004e7e:	f73f aed5 	bgt.w	8004c2c <_dtoa_r+0x8dc>
 8004e82:	9d06      	ldr	r5, [sp, #24]
 8004e84:	4631      	mov	r1, r6
 8004e86:	4658      	mov	r0, fp
 8004e88:	f7ff f9d4 	bl	8004234 <quorem>
 8004e8c:	9b06      	ldr	r3, [sp, #24]
 8004e8e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8004e92:	f805 8b01 	strb.w	r8, [r5], #1
 8004e96:	9a04      	ldr	r2, [sp, #16]
 8004e98:	1aeb      	subs	r3, r5, r3
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	ddb5      	ble.n	8004e0a <_dtoa_r+0xaba>
 8004e9e:	4659      	mov	r1, fp
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	220a      	movs	r2, #10
 8004ea4:	4620      	mov	r0, r4
 8004ea6:	f000 f862 	bl	8004f6e <__multadd>
 8004eaa:	4683      	mov	fp, r0
 8004eac:	e7ea      	b.n	8004e84 <_dtoa_r+0xb34>
 8004eae:	bf00      	nop
 8004eb0:	080058a4 	.word	0x080058a4
 8004eb4:	080058c8 	.word	0x080058c8

08004eb8 <_localeconv_r>:
 8004eb8:	4b04      	ldr	r3, [pc, #16]	; (8004ecc <_localeconv_r+0x14>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	6a18      	ldr	r0, [r3, #32]
 8004ebe:	4b04      	ldr	r3, [pc, #16]	; (8004ed0 <_localeconv_r+0x18>)
 8004ec0:	2800      	cmp	r0, #0
 8004ec2:	bf08      	it	eq
 8004ec4:	4618      	moveq	r0, r3
 8004ec6:	30f0      	adds	r0, #240	; 0xf0
 8004ec8:	4770      	bx	lr
 8004eca:	bf00      	nop
 8004ecc:	20000014 	.word	0x20000014
 8004ed0:	20000078 	.word	0x20000078

08004ed4 <__malloc_lock>:
 8004ed4:	4770      	bx	lr

08004ed6 <__malloc_unlock>:
 8004ed6:	4770      	bx	lr

08004ed8 <_Balloc>:
 8004ed8:	b570      	push	{r4, r5, r6, lr}
 8004eda:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004edc:	4604      	mov	r4, r0
 8004ede:	460e      	mov	r6, r1
 8004ee0:	b93d      	cbnz	r5, 8004ef2 <_Balloc+0x1a>
 8004ee2:	2010      	movs	r0, #16
 8004ee4:	f7fe fbf2 	bl	80036cc <malloc>
 8004ee8:	6260      	str	r0, [r4, #36]	; 0x24
 8004eea:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004eee:	6005      	str	r5, [r0, #0]
 8004ef0:	60c5      	str	r5, [r0, #12]
 8004ef2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8004ef4:	68eb      	ldr	r3, [r5, #12]
 8004ef6:	b183      	cbz	r3, 8004f1a <_Balloc+0x42>
 8004ef8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004efa:	68db      	ldr	r3, [r3, #12]
 8004efc:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8004f00:	b9b8      	cbnz	r0, 8004f32 <_Balloc+0x5a>
 8004f02:	2101      	movs	r1, #1
 8004f04:	fa01 f506 	lsl.w	r5, r1, r6
 8004f08:	1d6a      	adds	r2, r5, #5
 8004f0a:	0092      	lsls	r2, r2, #2
 8004f0c:	4620      	mov	r0, r4
 8004f0e:	f000 fabe 	bl	800548e <_calloc_r>
 8004f12:	b160      	cbz	r0, 8004f2e <_Balloc+0x56>
 8004f14:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8004f18:	e00e      	b.n	8004f38 <_Balloc+0x60>
 8004f1a:	2221      	movs	r2, #33	; 0x21
 8004f1c:	2104      	movs	r1, #4
 8004f1e:	4620      	mov	r0, r4
 8004f20:	f000 fab5 	bl	800548e <_calloc_r>
 8004f24:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f26:	60e8      	str	r0, [r5, #12]
 8004f28:	68db      	ldr	r3, [r3, #12]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d1e4      	bne.n	8004ef8 <_Balloc+0x20>
 8004f2e:	2000      	movs	r0, #0
 8004f30:	bd70      	pop	{r4, r5, r6, pc}
 8004f32:	6802      	ldr	r2, [r0, #0]
 8004f34:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8004f38:	2300      	movs	r3, #0
 8004f3a:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004f3e:	e7f7      	b.n	8004f30 <_Balloc+0x58>

08004f40 <_Bfree>:
 8004f40:	b570      	push	{r4, r5, r6, lr}
 8004f42:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004f44:	4606      	mov	r6, r0
 8004f46:	460d      	mov	r5, r1
 8004f48:	b93c      	cbnz	r4, 8004f5a <_Bfree+0x1a>
 8004f4a:	2010      	movs	r0, #16
 8004f4c:	f7fe fbbe 	bl	80036cc <malloc>
 8004f50:	6270      	str	r0, [r6, #36]	; 0x24
 8004f52:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004f56:	6004      	str	r4, [r0, #0]
 8004f58:	60c4      	str	r4, [r0, #12]
 8004f5a:	b13d      	cbz	r5, 8004f6c <_Bfree+0x2c>
 8004f5c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8004f5e:	686a      	ldr	r2, [r5, #4]
 8004f60:	68db      	ldr	r3, [r3, #12]
 8004f62:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004f66:	6029      	str	r1, [r5, #0]
 8004f68:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8004f6c:	bd70      	pop	{r4, r5, r6, pc}

08004f6e <__multadd>:
 8004f6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f72:	461f      	mov	r7, r3
 8004f74:	4606      	mov	r6, r0
 8004f76:	460c      	mov	r4, r1
 8004f78:	2300      	movs	r3, #0
 8004f7a:	690d      	ldr	r5, [r1, #16]
 8004f7c:	f101 0c14 	add.w	ip, r1, #20
 8004f80:	f8dc 0000 	ldr.w	r0, [ip]
 8004f84:	3301      	adds	r3, #1
 8004f86:	b281      	uxth	r1, r0
 8004f88:	fb02 7101 	mla	r1, r2, r1, r7
 8004f8c:	0c00      	lsrs	r0, r0, #16
 8004f8e:	0c0f      	lsrs	r7, r1, #16
 8004f90:	fb02 7000 	mla	r0, r2, r0, r7
 8004f94:	b289      	uxth	r1, r1
 8004f96:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8004f9a:	429d      	cmp	r5, r3
 8004f9c:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8004fa0:	f84c 1b04 	str.w	r1, [ip], #4
 8004fa4:	dcec      	bgt.n	8004f80 <__multadd+0x12>
 8004fa6:	b1d7      	cbz	r7, 8004fde <__multadd+0x70>
 8004fa8:	68a3      	ldr	r3, [r4, #8]
 8004faa:	42ab      	cmp	r3, r5
 8004fac:	dc12      	bgt.n	8004fd4 <__multadd+0x66>
 8004fae:	6861      	ldr	r1, [r4, #4]
 8004fb0:	4630      	mov	r0, r6
 8004fb2:	3101      	adds	r1, #1
 8004fb4:	f7ff ff90 	bl	8004ed8 <_Balloc>
 8004fb8:	4680      	mov	r8, r0
 8004fba:	6922      	ldr	r2, [r4, #16]
 8004fbc:	f104 010c 	add.w	r1, r4, #12
 8004fc0:	3202      	adds	r2, #2
 8004fc2:	0092      	lsls	r2, r2, #2
 8004fc4:	300c      	adds	r0, #12
 8004fc6:	f7fe fb9f 	bl	8003708 <memcpy>
 8004fca:	4621      	mov	r1, r4
 8004fcc:	4630      	mov	r0, r6
 8004fce:	f7ff ffb7 	bl	8004f40 <_Bfree>
 8004fd2:	4644      	mov	r4, r8
 8004fd4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004fd8:	3501      	adds	r5, #1
 8004fda:	615f      	str	r7, [r3, #20]
 8004fdc:	6125      	str	r5, [r4, #16]
 8004fde:	4620      	mov	r0, r4
 8004fe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004fe4 <__hi0bits>:
 8004fe4:	0c02      	lsrs	r2, r0, #16
 8004fe6:	0412      	lsls	r2, r2, #16
 8004fe8:	4603      	mov	r3, r0
 8004fea:	b9b2      	cbnz	r2, 800501a <__hi0bits+0x36>
 8004fec:	0403      	lsls	r3, r0, #16
 8004fee:	2010      	movs	r0, #16
 8004ff0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8004ff4:	bf04      	itt	eq
 8004ff6:	021b      	lsleq	r3, r3, #8
 8004ff8:	3008      	addeq	r0, #8
 8004ffa:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8004ffe:	bf04      	itt	eq
 8005000:	011b      	lsleq	r3, r3, #4
 8005002:	3004      	addeq	r0, #4
 8005004:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005008:	bf04      	itt	eq
 800500a:	009b      	lsleq	r3, r3, #2
 800500c:	3002      	addeq	r0, #2
 800500e:	2b00      	cmp	r3, #0
 8005010:	db06      	blt.n	8005020 <__hi0bits+0x3c>
 8005012:	005b      	lsls	r3, r3, #1
 8005014:	d503      	bpl.n	800501e <__hi0bits+0x3a>
 8005016:	3001      	adds	r0, #1
 8005018:	4770      	bx	lr
 800501a:	2000      	movs	r0, #0
 800501c:	e7e8      	b.n	8004ff0 <__hi0bits+0xc>
 800501e:	2020      	movs	r0, #32
 8005020:	4770      	bx	lr

08005022 <__lo0bits>:
 8005022:	6803      	ldr	r3, [r0, #0]
 8005024:	4601      	mov	r1, r0
 8005026:	f013 0207 	ands.w	r2, r3, #7
 800502a:	d00b      	beq.n	8005044 <__lo0bits+0x22>
 800502c:	07da      	lsls	r2, r3, #31
 800502e:	d423      	bmi.n	8005078 <__lo0bits+0x56>
 8005030:	0798      	lsls	r0, r3, #30
 8005032:	bf49      	itett	mi
 8005034:	085b      	lsrmi	r3, r3, #1
 8005036:	089b      	lsrpl	r3, r3, #2
 8005038:	2001      	movmi	r0, #1
 800503a:	600b      	strmi	r3, [r1, #0]
 800503c:	bf5c      	itt	pl
 800503e:	600b      	strpl	r3, [r1, #0]
 8005040:	2002      	movpl	r0, #2
 8005042:	4770      	bx	lr
 8005044:	b298      	uxth	r0, r3
 8005046:	b9a8      	cbnz	r0, 8005074 <__lo0bits+0x52>
 8005048:	2010      	movs	r0, #16
 800504a:	0c1b      	lsrs	r3, r3, #16
 800504c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005050:	bf04      	itt	eq
 8005052:	0a1b      	lsreq	r3, r3, #8
 8005054:	3008      	addeq	r0, #8
 8005056:	071a      	lsls	r2, r3, #28
 8005058:	bf04      	itt	eq
 800505a:	091b      	lsreq	r3, r3, #4
 800505c:	3004      	addeq	r0, #4
 800505e:	079a      	lsls	r2, r3, #30
 8005060:	bf04      	itt	eq
 8005062:	089b      	lsreq	r3, r3, #2
 8005064:	3002      	addeq	r0, #2
 8005066:	07da      	lsls	r2, r3, #31
 8005068:	d402      	bmi.n	8005070 <__lo0bits+0x4e>
 800506a:	085b      	lsrs	r3, r3, #1
 800506c:	d006      	beq.n	800507c <__lo0bits+0x5a>
 800506e:	3001      	adds	r0, #1
 8005070:	600b      	str	r3, [r1, #0]
 8005072:	4770      	bx	lr
 8005074:	4610      	mov	r0, r2
 8005076:	e7e9      	b.n	800504c <__lo0bits+0x2a>
 8005078:	2000      	movs	r0, #0
 800507a:	4770      	bx	lr
 800507c:	2020      	movs	r0, #32
 800507e:	4770      	bx	lr

08005080 <__i2b>:
 8005080:	b510      	push	{r4, lr}
 8005082:	460c      	mov	r4, r1
 8005084:	2101      	movs	r1, #1
 8005086:	f7ff ff27 	bl	8004ed8 <_Balloc>
 800508a:	2201      	movs	r2, #1
 800508c:	6144      	str	r4, [r0, #20]
 800508e:	6102      	str	r2, [r0, #16]
 8005090:	bd10      	pop	{r4, pc}

08005092 <__multiply>:
 8005092:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005096:	4614      	mov	r4, r2
 8005098:	690a      	ldr	r2, [r1, #16]
 800509a:	6923      	ldr	r3, [r4, #16]
 800509c:	4688      	mov	r8, r1
 800509e:	429a      	cmp	r2, r3
 80050a0:	bfbe      	ittt	lt
 80050a2:	460b      	movlt	r3, r1
 80050a4:	46a0      	movlt	r8, r4
 80050a6:	461c      	movlt	r4, r3
 80050a8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80050ac:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80050b0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80050b4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80050b8:	eb07 0609 	add.w	r6, r7, r9
 80050bc:	42b3      	cmp	r3, r6
 80050be:	bfb8      	it	lt
 80050c0:	3101      	addlt	r1, #1
 80050c2:	f7ff ff09 	bl	8004ed8 <_Balloc>
 80050c6:	f100 0514 	add.w	r5, r0, #20
 80050ca:	462b      	mov	r3, r5
 80050cc:	2200      	movs	r2, #0
 80050ce:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80050d2:	4573      	cmp	r3, lr
 80050d4:	d316      	bcc.n	8005104 <__multiply+0x72>
 80050d6:	f104 0214 	add.w	r2, r4, #20
 80050da:	f108 0114 	add.w	r1, r8, #20
 80050de:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80050e2:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80050e6:	9300      	str	r3, [sp, #0]
 80050e8:	9b00      	ldr	r3, [sp, #0]
 80050ea:	9201      	str	r2, [sp, #4]
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d80c      	bhi.n	800510a <__multiply+0x78>
 80050f0:	2e00      	cmp	r6, #0
 80050f2:	dd03      	ble.n	80050fc <__multiply+0x6a>
 80050f4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d05d      	beq.n	80051b8 <__multiply+0x126>
 80050fc:	6106      	str	r6, [r0, #16]
 80050fe:	b003      	add	sp, #12
 8005100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005104:	f843 2b04 	str.w	r2, [r3], #4
 8005108:	e7e3      	b.n	80050d2 <__multiply+0x40>
 800510a:	f8b2 b000 	ldrh.w	fp, [r2]
 800510e:	f1bb 0f00 	cmp.w	fp, #0
 8005112:	d023      	beq.n	800515c <__multiply+0xca>
 8005114:	4689      	mov	r9, r1
 8005116:	46ac      	mov	ip, r5
 8005118:	f04f 0800 	mov.w	r8, #0
 800511c:	f859 4b04 	ldr.w	r4, [r9], #4
 8005120:	f8dc a000 	ldr.w	sl, [ip]
 8005124:	b2a3      	uxth	r3, r4
 8005126:	fa1f fa8a 	uxth.w	sl, sl
 800512a:	fb0b a303 	mla	r3, fp, r3, sl
 800512e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005132:	f8dc 4000 	ldr.w	r4, [ip]
 8005136:	4443      	add	r3, r8
 8005138:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800513c:	fb0b 840a 	mla	r4, fp, sl, r8
 8005140:	46e2      	mov	sl, ip
 8005142:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8005146:	b29b      	uxth	r3, r3
 8005148:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800514c:	454f      	cmp	r7, r9
 800514e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005152:	f84a 3b04 	str.w	r3, [sl], #4
 8005156:	d82b      	bhi.n	80051b0 <__multiply+0x11e>
 8005158:	f8cc 8004 	str.w	r8, [ip, #4]
 800515c:	9b01      	ldr	r3, [sp, #4]
 800515e:	3204      	adds	r2, #4
 8005160:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8005164:	f1ba 0f00 	cmp.w	sl, #0
 8005168:	d020      	beq.n	80051ac <__multiply+0x11a>
 800516a:	4689      	mov	r9, r1
 800516c:	46a8      	mov	r8, r5
 800516e:	f04f 0b00 	mov.w	fp, #0
 8005172:	682b      	ldr	r3, [r5, #0]
 8005174:	f8b9 c000 	ldrh.w	ip, [r9]
 8005178:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800517c:	b29b      	uxth	r3, r3
 800517e:	fb0a 440c 	mla	r4, sl, ip, r4
 8005182:	46c4      	mov	ip, r8
 8005184:	445c      	add	r4, fp
 8005186:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800518a:	f84c 3b04 	str.w	r3, [ip], #4
 800518e:	f859 3b04 	ldr.w	r3, [r9], #4
 8005192:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8005196:	0c1b      	lsrs	r3, r3, #16
 8005198:	fb0a b303 	mla	r3, sl, r3, fp
 800519c:	454f      	cmp	r7, r9
 800519e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80051a2:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80051a6:	d805      	bhi.n	80051b4 <__multiply+0x122>
 80051a8:	f8c8 3004 	str.w	r3, [r8, #4]
 80051ac:	3504      	adds	r5, #4
 80051ae:	e79b      	b.n	80050e8 <__multiply+0x56>
 80051b0:	46d4      	mov	ip, sl
 80051b2:	e7b3      	b.n	800511c <__multiply+0x8a>
 80051b4:	46e0      	mov	r8, ip
 80051b6:	e7dd      	b.n	8005174 <__multiply+0xe2>
 80051b8:	3e01      	subs	r6, #1
 80051ba:	e799      	b.n	80050f0 <__multiply+0x5e>

080051bc <__pow5mult>:
 80051bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80051c0:	4615      	mov	r5, r2
 80051c2:	f012 0203 	ands.w	r2, r2, #3
 80051c6:	4606      	mov	r6, r0
 80051c8:	460f      	mov	r7, r1
 80051ca:	d007      	beq.n	80051dc <__pow5mult+0x20>
 80051cc:	4c21      	ldr	r4, [pc, #132]	; (8005254 <__pow5mult+0x98>)
 80051ce:	3a01      	subs	r2, #1
 80051d0:	2300      	movs	r3, #0
 80051d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80051d6:	f7ff feca 	bl	8004f6e <__multadd>
 80051da:	4607      	mov	r7, r0
 80051dc:	10ad      	asrs	r5, r5, #2
 80051de:	d035      	beq.n	800524c <__pow5mult+0x90>
 80051e0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80051e2:	b93c      	cbnz	r4, 80051f4 <__pow5mult+0x38>
 80051e4:	2010      	movs	r0, #16
 80051e6:	f7fe fa71 	bl	80036cc <malloc>
 80051ea:	6270      	str	r0, [r6, #36]	; 0x24
 80051ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80051f0:	6004      	str	r4, [r0, #0]
 80051f2:	60c4      	str	r4, [r0, #12]
 80051f4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80051f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80051fc:	b94c      	cbnz	r4, 8005212 <__pow5mult+0x56>
 80051fe:	f240 2171 	movw	r1, #625	; 0x271
 8005202:	4630      	mov	r0, r6
 8005204:	f7ff ff3c 	bl	8005080 <__i2b>
 8005208:	2300      	movs	r3, #0
 800520a:	4604      	mov	r4, r0
 800520c:	f8c8 0008 	str.w	r0, [r8, #8]
 8005210:	6003      	str	r3, [r0, #0]
 8005212:	f04f 0800 	mov.w	r8, #0
 8005216:	07eb      	lsls	r3, r5, #31
 8005218:	d50a      	bpl.n	8005230 <__pow5mult+0x74>
 800521a:	4639      	mov	r1, r7
 800521c:	4622      	mov	r2, r4
 800521e:	4630      	mov	r0, r6
 8005220:	f7ff ff37 	bl	8005092 <__multiply>
 8005224:	4681      	mov	r9, r0
 8005226:	4639      	mov	r1, r7
 8005228:	4630      	mov	r0, r6
 800522a:	f7ff fe89 	bl	8004f40 <_Bfree>
 800522e:	464f      	mov	r7, r9
 8005230:	106d      	asrs	r5, r5, #1
 8005232:	d00b      	beq.n	800524c <__pow5mult+0x90>
 8005234:	6820      	ldr	r0, [r4, #0]
 8005236:	b938      	cbnz	r0, 8005248 <__pow5mult+0x8c>
 8005238:	4622      	mov	r2, r4
 800523a:	4621      	mov	r1, r4
 800523c:	4630      	mov	r0, r6
 800523e:	f7ff ff28 	bl	8005092 <__multiply>
 8005242:	6020      	str	r0, [r4, #0]
 8005244:	f8c0 8000 	str.w	r8, [r0]
 8005248:	4604      	mov	r4, r0
 800524a:	e7e4      	b.n	8005216 <__pow5mult+0x5a>
 800524c:	4638      	mov	r0, r7
 800524e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005252:	bf00      	nop
 8005254:	080059c8 	.word	0x080059c8

08005258 <__lshift>:
 8005258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800525c:	460c      	mov	r4, r1
 800525e:	4607      	mov	r7, r0
 8005260:	4616      	mov	r6, r2
 8005262:	6923      	ldr	r3, [r4, #16]
 8005264:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005268:	eb0a 0903 	add.w	r9, sl, r3
 800526c:	6849      	ldr	r1, [r1, #4]
 800526e:	68a3      	ldr	r3, [r4, #8]
 8005270:	f109 0501 	add.w	r5, r9, #1
 8005274:	42ab      	cmp	r3, r5
 8005276:	db32      	blt.n	80052de <__lshift+0x86>
 8005278:	4638      	mov	r0, r7
 800527a:	f7ff fe2d 	bl	8004ed8 <_Balloc>
 800527e:	2300      	movs	r3, #0
 8005280:	4680      	mov	r8, r0
 8005282:	461a      	mov	r2, r3
 8005284:	f100 0114 	add.w	r1, r0, #20
 8005288:	4553      	cmp	r3, sl
 800528a:	db2b      	blt.n	80052e4 <__lshift+0x8c>
 800528c:	6920      	ldr	r0, [r4, #16]
 800528e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005292:	f104 0314 	add.w	r3, r4, #20
 8005296:	f016 021f 	ands.w	r2, r6, #31
 800529a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800529e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80052a2:	d025      	beq.n	80052f0 <__lshift+0x98>
 80052a4:	2000      	movs	r0, #0
 80052a6:	f1c2 0e20 	rsb	lr, r2, #32
 80052aa:	468a      	mov	sl, r1
 80052ac:	681e      	ldr	r6, [r3, #0]
 80052ae:	4096      	lsls	r6, r2
 80052b0:	4330      	orrs	r0, r6
 80052b2:	f84a 0b04 	str.w	r0, [sl], #4
 80052b6:	f853 0b04 	ldr.w	r0, [r3], #4
 80052ba:	459c      	cmp	ip, r3
 80052bc:	fa20 f00e 	lsr.w	r0, r0, lr
 80052c0:	d814      	bhi.n	80052ec <__lshift+0x94>
 80052c2:	6048      	str	r0, [r1, #4]
 80052c4:	b108      	cbz	r0, 80052ca <__lshift+0x72>
 80052c6:	f109 0502 	add.w	r5, r9, #2
 80052ca:	3d01      	subs	r5, #1
 80052cc:	4638      	mov	r0, r7
 80052ce:	f8c8 5010 	str.w	r5, [r8, #16]
 80052d2:	4621      	mov	r1, r4
 80052d4:	f7ff fe34 	bl	8004f40 <_Bfree>
 80052d8:	4640      	mov	r0, r8
 80052da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052de:	3101      	adds	r1, #1
 80052e0:	005b      	lsls	r3, r3, #1
 80052e2:	e7c7      	b.n	8005274 <__lshift+0x1c>
 80052e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80052e8:	3301      	adds	r3, #1
 80052ea:	e7cd      	b.n	8005288 <__lshift+0x30>
 80052ec:	4651      	mov	r1, sl
 80052ee:	e7dc      	b.n	80052aa <__lshift+0x52>
 80052f0:	3904      	subs	r1, #4
 80052f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80052f6:	459c      	cmp	ip, r3
 80052f8:	f841 2f04 	str.w	r2, [r1, #4]!
 80052fc:	d8f9      	bhi.n	80052f2 <__lshift+0x9a>
 80052fe:	e7e4      	b.n	80052ca <__lshift+0x72>

08005300 <__mcmp>:
 8005300:	6903      	ldr	r3, [r0, #16]
 8005302:	690a      	ldr	r2, [r1, #16]
 8005304:	b530      	push	{r4, r5, lr}
 8005306:	1a9b      	subs	r3, r3, r2
 8005308:	d10c      	bne.n	8005324 <__mcmp+0x24>
 800530a:	0092      	lsls	r2, r2, #2
 800530c:	3014      	adds	r0, #20
 800530e:	3114      	adds	r1, #20
 8005310:	1884      	adds	r4, r0, r2
 8005312:	4411      	add	r1, r2
 8005314:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005318:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800531c:	4295      	cmp	r5, r2
 800531e:	d003      	beq.n	8005328 <__mcmp+0x28>
 8005320:	d305      	bcc.n	800532e <__mcmp+0x2e>
 8005322:	2301      	movs	r3, #1
 8005324:	4618      	mov	r0, r3
 8005326:	bd30      	pop	{r4, r5, pc}
 8005328:	42a0      	cmp	r0, r4
 800532a:	d3f3      	bcc.n	8005314 <__mcmp+0x14>
 800532c:	e7fa      	b.n	8005324 <__mcmp+0x24>
 800532e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005332:	e7f7      	b.n	8005324 <__mcmp+0x24>

08005334 <__mdiff>:
 8005334:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005338:	460d      	mov	r5, r1
 800533a:	4607      	mov	r7, r0
 800533c:	4611      	mov	r1, r2
 800533e:	4628      	mov	r0, r5
 8005340:	4614      	mov	r4, r2
 8005342:	f7ff ffdd 	bl	8005300 <__mcmp>
 8005346:	1e06      	subs	r6, r0, #0
 8005348:	d108      	bne.n	800535c <__mdiff+0x28>
 800534a:	4631      	mov	r1, r6
 800534c:	4638      	mov	r0, r7
 800534e:	f7ff fdc3 	bl	8004ed8 <_Balloc>
 8005352:	2301      	movs	r3, #1
 8005354:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800535c:	bfa4      	itt	ge
 800535e:	4623      	movge	r3, r4
 8005360:	462c      	movge	r4, r5
 8005362:	4638      	mov	r0, r7
 8005364:	6861      	ldr	r1, [r4, #4]
 8005366:	bfa6      	itte	ge
 8005368:	461d      	movge	r5, r3
 800536a:	2600      	movge	r6, #0
 800536c:	2601      	movlt	r6, #1
 800536e:	f7ff fdb3 	bl	8004ed8 <_Balloc>
 8005372:	f04f 0e00 	mov.w	lr, #0
 8005376:	60c6      	str	r6, [r0, #12]
 8005378:	692b      	ldr	r3, [r5, #16]
 800537a:	6926      	ldr	r6, [r4, #16]
 800537c:	f104 0214 	add.w	r2, r4, #20
 8005380:	f105 0914 	add.w	r9, r5, #20
 8005384:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8005388:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800538c:	f100 0114 	add.w	r1, r0, #20
 8005390:	f852 ab04 	ldr.w	sl, [r2], #4
 8005394:	f859 5b04 	ldr.w	r5, [r9], #4
 8005398:	fa1f f38a 	uxth.w	r3, sl
 800539c:	4473      	add	r3, lr
 800539e:	b2ac      	uxth	r4, r5
 80053a0:	1b1b      	subs	r3, r3, r4
 80053a2:	0c2c      	lsrs	r4, r5, #16
 80053a4:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 80053a8:	eb04 4423 	add.w	r4, r4, r3, asr #16
 80053ac:	b29b      	uxth	r3, r3
 80053ae:	ea4f 4e24 	mov.w	lr, r4, asr #16
 80053b2:	45c8      	cmp	r8, r9
 80053b4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80053b8:	4694      	mov	ip, r2
 80053ba:	f841 4b04 	str.w	r4, [r1], #4
 80053be:	d8e7      	bhi.n	8005390 <__mdiff+0x5c>
 80053c0:	45bc      	cmp	ip, r7
 80053c2:	d304      	bcc.n	80053ce <__mdiff+0x9a>
 80053c4:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80053c8:	b183      	cbz	r3, 80053ec <__mdiff+0xb8>
 80053ca:	6106      	str	r6, [r0, #16]
 80053cc:	e7c4      	b.n	8005358 <__mdiff+0x24>
 80053ce:	f85c 4b04 	ldr.w	r4, [ip], #4
 80053d2:	b2a2      	uxth	r2, r4
 80053d4:	4472      	add	r2, lr
 80053d6:	1413      	asrs	r3, r2, #16
 80053d8:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80053dc:	b292      	uxth	r2, r2
 80053de:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80053e2:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80053e6:	f841 2b04 	str.w	r2, [r1], #4
 80053ea:	e7e9      	b.n	80053c0 <__mdiff+0x8c>
 80053ec:	3e01      	subs	r6, #1
 80053ee:	e7e9      	b.n	80053c4 <__mdiff+0x90>

080053f0 <__d2b>:
 80053f0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80053f4:	461c      	mov	r4, r3
 80053f6:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 80053fa:	2101      	movs	r1, #1
 80053fc:	4690      	mov	r8, r2
 80053fe:	f7ff fd6b 	bl	8004ed8 <_Balloc>
 8005402:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8005406:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800540a:	4607      	mov	r7, r0
 800540c:	bb34      	cbnz	r4, 800545c <__d2b+0x6c>
 800540e:	9201      	str	r2, [sp, #4]
 8005410:	f1b8 0200 	subs.w	r2, r8, #0
 8005414:	d027      	beq.n	8005466 <__d2b+0x76>
 8005416:	a802      	add	r0, sp, #8
 8005418:	f840 2d08 	str.w	r2, [r0, #-8]!
 800541c:	f7ff fe01 	bl	8005022 <__lo0bits>
 8005420:	9900      	ldr	r1, [sp, #0]
 8005422:	b1f0      	cbz	r0, 8005462 <__d2b+0x72>
 8005424:	9a01      	ldr	r2, [sp, #4]
 8005426:	f1c0 0320 	rsb	r3, r0, #32
 800542a:	fa02 f303 	lsl.w	r3, r2, r3
 800542e:	430b      	orrs	r3, r1
 8005430:	40c2      	lsrs	r2, r0
 8005432:	617b      	str	r3, [r7, #20]
 8005434:	9201      	str	r2, [sp, #4]
 8005436:	9b01      	ldr	r3, [sp, #4]
 8005438:	2b00      	cmp	r3, #0
 800543a:	bf14      	ite	ne
 800543c:	2102      	movne	r1, #2
 800543e:	2101      	moveq	r1, #1
 8005440:	61bb      	str	r3, [r7, #24]
 8005442:	6139      	str	r1, [r7, #16]
 8005444:	b1c4      	cbz	r4, 8005478 <__d2b+0x88>
 8005446:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800544a:	4404      	add	r4, r0
 800544c:	6034      	str	r4, [r6, #0]
 800544e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005452:	6028      	str	r0, [r5, #0]
 8005454:	4638      	mov	r0, r7
 8005456:	b002      	add	sp, #8
 8005458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800545c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005460:	e7d5      	b.n	800540e <__d2b+0x1e>
 8005462:	6179      	str	r1, [r7, #20]
 8005464:	e7e7      	b.n	8005436 <__d2b+0x46>
 8005466:	a801      	add	r0, sp, #4
 8005468:	f7ff fddb 	bl	8005022 <__lo0bits>
 800546c:	2101      	movs	r1, #1
 800546e:	9b01      	ldr	r3, [sp, #4]
 8005470:	6139      	str	r1, [r7, #16]
 8005472:	617b      	str	r3, [r7, #20]
 8005474:	3020      	adds	r0, #32
 8005476:	e7e5      	b.n	8005444 <__d2b+0x54>
 8005478:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800547c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8005480:	6030      	str	r0, [r6, #0]
 8005482:	6918      	ldr	r0, [r3, #16]
 8005484:	f7ff fdae 	bl	8004fe4 <__hi0bits>
 8005488:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800548c:	e7e1      	b.n	8005452 <__d2b+0x62>

0800548e <_calloc_r>:
 800548e:	b538      	push	{r3, r4, r5, lr}
 8005490:	fb02 f401 	mul.w	r4, r2, r1
 8005494:	4621      	mov	r1, r4
 8005496:	f7fe f9af 	bl	80037f8 <_malloc_r>
 800549a:	4605      	mov	r5, r0
 800549c:	b118      	cbz	r0, 80054a6 <_calloc_r+0x18>
 800549e:	4622      	mov	r2, r4
 80054a0:	2100      	movs	r1, #0
 80054a2:	f7fe f955 	bl	8003750 <memset>
 80054a6:	4628      	mov	r0, r5
 80054a8:	bd38      	pop	{r3, r4, r5, pc}

080054aa <__ssputs_r>:
 80054aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054ae:	688e      	ldr	r6, [r1, #8]
 80054b0:	4682      	mov	sl, r0
 80054b2:	429e      	cmp	r6, r3
 80054b4:	460c      	mov	r4, r1
 80054b6:	4690      	mov	r8, r2
 80054b8:	4699      	mov	r9, r3
 80054ba:	d837      	bhi.n	800552c <__ssputs_r+0x82>
 80054bc:	898a      	ldrh	r2, [r1, #12]
 80054be:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80054c2:	d031      	beq.n	8005528 <__ssputs_r+0x7e>
 80054c4:	2302      	movs	r3, #2
 80054c6:	6825      	ldr	r5, [r4, #0]
 80054c8:	6909      	ldr	r1, [r1, #16]
 80054ca:	1a6f      	subs	r7, r5, r1
 80054cc:	6965      	ldr	r5, [r4, #20]
 80054ce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80054d2:	fb95 f5f3 	sdiv	r5, r5, r3
 80054d6:	f109 0301 	add.w	r3, r9, #1
 80054da:	443b      	add	r3, r7
 80054dc:	429d      	cmp	r5, r3
 80054de:	bf38      	it	cc
 80054e0:	461d      	movcc	r5, r3
 80054e2:	0553      	lsls	r3, r2, #21
 80054e4:	d530      	bpl.n	8005548 <__ssputs_r+0x9e>
 80054e6:	4629      	mov	r1, r5
 80054e8:	f7fe f986 	bl	80037f8 <_malloc_r>
 80054ec:	4606      	mov	r6, r0
 80054ee:	b950      	cbnz	r0, 8005506 <__ssputs_r+0x5c>
 80054f0:	230c      	movs	r3, #12
 80054f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80054f6:	f8ca 3000 	str.w	r3, [sl]
 80054fa:	89a3      	ldrh	r3, [r4, #12]
 80054fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005500:	81a3      	strh	r3, [r4, #12]
 8005502:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005506:	463a      	mov	r2, r7
 8005508:	6921      	ldr	r1, [r4, #16]
 800550a:	f7fe f8fd 	bl	8003708 <memcpy>
 800550e:	89a3      	ldrh	r3, [r4, #12]
 8005510:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005514:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005518:	81a3      	strh	r3, [r4, #12]
 800551a:	6126      	str	r6, [r4, #16]
 800551c:	443e      	add	r6, r7
 800551e:	6026      	str	r6, [r4, #0]
 8005520:	464e      	mov	r6, r9
 8005522:	6165      	str	r5, [r4, #20]
 8005524:	1bed      	subs	r5, r5, r7
 8005526:	60a5      	str	r5, [r4, #8]
 8005528:	454e      	cmp	r6, r9
 800552a:	d900      	bls.n	800552e <__ssputs_r+0x84>
 800552c:	464e      	mov	r6, r9
 800552e:	4632      	mov	r2, r6
 8005530:	4641      	mov	r1, r8
 8005532:	6820      	ldr	r0, [r4, #0]
 8005534:	f7fe f8f3 	bl	800371e <memmove>
 8005538:	68a3      	ldr	r3, [r4, #8]
 800553a:	2000      	movs	r0, #0
 800553c:	1b9b      	subs	r3, r3, r6
 800553e:	60a3      	str	r3, [r4, #8]
 8005540:	6823      	ldr	r3, [r4, #0]
 8005542:	441e      	add	r6, r3
 8005544:	6026      	str	r6, [r4, #0]
 8005546:	e7dc      	b.n	8005502 <__ssputs_r+0x58>
 8005548:	462a      	mov	r2, r5
 800554a:	f000 f913 	bl	8005774 <_realloc_r>
 800554e:	4606      	mov	r6, r0
 8005550:	2800      	cmp	r0, #0
 8005552:	d1e2      	bne.n	800551a <__ssputs_r+0x70>
 8005554:	6921      	ldr	r1, [r4, #16]
 8005556:	4650      	mov	r0, sl
 8005558:	f7fe f902 	bl	8003760 <_free_r>
 800555c:	e7c8      	b.n	80054f0 <__ssputs_r+0x46>
	...

08005560 <_svfiprintf_r>:
 8005560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005564:	461d      	mov	r5, r3
 8005566:	898b      	ldrh	r3, [r1, #12]
 8005568:	b09d      	sub	sp, #116	; 0x74
 800556a:	061f      	lsls	r7, r3, #24
 800556c:	4680      	mov	r8, r0
 800556e:	460c      	mov	r4, r1
 8005570:	4616      	mov	r6, r2
 8005572:	d50f      	bpl.n	8005594 <_svfiprintf_r+0x34>
 8005574:	690b      	ldr	r3, [r1, #16]
 8005576:	b96b      	cbnz	r3, 8005594 <_svfiprintf_r+0x34>
 8005578:	2140      	movs	r1, #64	; 0x40
 800557a:	f7fe f93d 	bl	80037f8 <_malloc_r>
 800557e:	6020      	str	r0, [r4, #0]
 8005580:	6120      	str	r0, [r4, #16]
 8005582:	b928      	cbnz	r0, 8005590 <_svfiprintf_r+0x30>
 8005584:	230c      	movs	r3, #12
 8005586:	f8c8 3000 	str.w	r3, [r8]
 800558a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800558e:	e0c8      	b.n	8005722 <_svfiprintf_r+0x1c2>
 8005590:	2340      	movs	r3, #64	; 0x40
 8005592:	6163      	str	r3, [r4, #20]
 8005594:	2300      	movs	r3, #0
 8005596:	9309      	str	r3, [sp, #36]	; 0x24
 8005598:	2320      	movs	r3, #32
 800559a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800559e:	2330      	movs	r3, #48	; 0x30
 80055a0:	f04f 0b01 	mov.w	fp, #1
 80055a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80055a8:	9503      	str	r5, [sp, #12]
 80055aa:	4637      	mov	r7, r6
 80055ac:	463d      	mov	r5, r7
 80055ae:	f815 3b01 	ldrb.w	r3, [r5], #1
 80055b2:	b10b      	cbz	r3, 80055b8 <_svfiprintf_r+0x58>
 80055b4:	2b25      	cmp	r3, #37	; 0x25
 80055b6:	d13e      	bne.n	8005636 <_svfiprintf_r+0xd6>
 80055b8:	ebb7 0a06 	subs.w	sl, r7, r6
 80055bc:	d00b      	beq.n	80055d6 <_svfiprintf_r+0x76>
 80055be:	4653      	mov	r3, sl
 80055c0:	4632      	mov	r2, r6
 80055c2:	4621      	mov	r1, r4
 80055c4:	4640      	mov	r0, r8
 80055c6:	f7ff ff70 	bl	80054aa <__ssputs_r>
 80055ca:	3001      	adds	r0, #1
 80055cc:	f000 80a4 	beq.w	8005718 <_svfiprintf_r+0x1b8>
 80055d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055d2:	4453      	add	r3, sl
 80055d4:	9309      	str	r3, [sp, #36]	; 0x24
 80055d6:	783b      	ldrb	r3, [r7, #0]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	f000 809d 	beq.w	8005718 <_svfiprintf_r+0x1b8>
 80055de:	2300      	movs	r3, #0
 80055e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80055e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80055e8:	9304      	str	r3, [sp, #16]
 80055ea:	9307      	str	r3, [sp, #28]
 80055ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80055f0:	931a      	str	r3, [sp, #104]	; 0x68
 80055f2:	462f      	mov	r7, r5
 80055f4:	2205      	movs	r2, #5
 80055f6:	f817 1b01 	ldrb.w	r1, [r7], #1
 80055fa:	4850      	ldr	r0, [pc, #320]	; (800573c <_svfiprintf_r+0x1dc>)
 80055fc:	f7fe f876 	bl	80036ec <memchr>
 8005600:	9b04      	ldr	r3, [sp, #16]
 8005602:	b9d0      	cbnz	r0, 800563a <_svfiprintf_r+0xda>
 8005604:	06d9      	lsls	r1, r3, #27
 8005606:	bf44      	itt	mi
 8005608:	2220      	movmi	r2, #32
 800560a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800560e:	071a      	lsls	r2, r3, #28
 8005610:	bf44      	itt	mi
 8005612:	222b      	movmi	r2, #43	; 0x2b
 8005614:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005618:	782a      	ldrb	r2, [r5, #0]
 800561a:	2a2a      	cmp	r2, #42	; 0x2a
 800561c:	d015      	beq.n	800564a <_svfiprintf_r+0xea>
 800561e:	462f      	mov	r7, r5
 8005620:	2000      	movs	r0, #0
 8005622:	250a      	movs	r5, #10
 8005624:	9a07      	ldr	r2, [sp, #28]
 8005626:	4639      	mov	r1, r7
 8005628:	f811 3b01 	ldrb.w	r3, [r1], #1
 800562c:	3b30      	subs	r3, #48	; 0x30
 800562e:	2b09      	cmp	r3, #9
 8005630:	d94d      	bls.n	80056ce <_svfiprintf_r+0x16e>
 8005632:	b1b8      	cbz	r0, 8005664 <_svfiprintf_r+0x104>
 8005634:	e00f      	b.n	8005656 <_svfiprintf_r+0xf6>
 8005636:	462f      	mov	r7, r5
 8005638:	e7b8      	b.n	80055ac <_svfiprintf_r+0x4c>
 800563a:	4a40      	ldr	r2, [pc, #256]	; (800573c <_svfiprintf_r+0x1dc>)
 800563c:	463d      	mov	r5, r7
 800563e:	1a80      	subs	r0, r0, r2
 8005640:	fa0b f000 	lsl.w	r0, fp, r0
 8005644:	4318      	orrs	r0, r3
 8005646:	9004      	str	r0, [sp, #16]
 8005648:	e7d3      	b.n	80055f2 <_svfiprintf_r+0x92>
 800564a:	9a03      	ldr	r2, [sp, #12]
 800564c:	1d11      	adds	r1, r2, #4
 800564e:	6812      	ldr	r2, [r2, #0]
 8005650:	9103      	str	r1, [sp, #12]
 8005652:	2a00      	cmp	r2, #0
 8005654:	db01      	blt.n	800565a <_svfiprintf_r+0xfa>
 8005656:	9207      	str	r2, [sp, #28]
 8005658:	e004      	b.n	8005664 <_svfiprintf_r+0x104>
 800565a:	4252      	negs	r2, r2
 800565c:	f043 0302 	orr.w	r3, r3, #2
 8005660:	9207      	str	r2, [sp, #28]
 8005662:	9304      	str	r3, [sp, #16]
 8005664:	783b      	ldrb	r3, [r7, #0]
 8005666:	2b2e      	cmp	r3, #46	; 0x2e
 8005668:	d10c      	bne.n	8005684 <_svfiprintf_r+0x124>
 800566a:	787b      	ldrb	r3, [r7, #1]
 800566c:	2b2a      	cmp	r3, #42	; 0x2a
 800566e:	d133      	bne.n	80056d8 <_svfiprintf_r+0x178>
 8005670:	9b03      	ldr	r3, [sp, #12]
 8005672:	3702      	adds	r7, #2
 8005674:	1d1a      	adds	r2, r3, #4
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	9203      	str	r2, [sp, #12]
 800567a:	2b00      	cmp	r3, #0
 800567c:	bfb8      	it	lt
 800567e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005682:	9305      	str	r3, [sp, #20]
 8005684:	4d2e      	ldr	r5, [pc, #184]	; (8005740 <_svfiprintf_r+0x1e0>)
 8005686:	2203      	movs	r2, #3
 8005688:	7839      	ldrb	r1, [r7, #0]
 800568a:	4628      	mov	r0, r5
 800568c:	f7fe f82e 	bl	80036ec <memchr>
 8005690:	b138      	cbz	r0, 80056a2 <_svfiprintf_r+0x142>
 8005692:	2340      	movs	r3, #64	; 0x40
 8005694:	1b40      	subs	r0, r0, r5
 8005696:	fa03 f000 	lsl.w	r0, r3, r0
 800569a:	9b04      	ldr	r3, [sp, #16]
 800569c:	3701      	adds	r7, #1
 800569e:	4303      	orrs	r3, r0
 80056a0:	9304      	str	r3, [sp, #16]
 80056a2:	7839      	ldrb	r1, [r7, #0]
 80056a4:	2206      	movs	r2, #6
 80056a6:	4827      	ldr	r0, [pc, #156]	; (8005744 <_svfiprintf_r+0x1e4>)
 80056a8:	1c7e      	adds	r6, r7, #1
 80056aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80056ae:	f7fe f81d 	bl	80036ec <memchr>
 80056b2:	2800      	cmp	r0, #0
 80056b4:	d038      	beq.n	8005728 <_svfiprintf_r+0x1c8>
 80056b6:	4b24      	ldr	r3, [pc, #144]	; (8005748 <_svfiprintf_r+0x1e8>)
 80056b8:	bb13      	cbnz	r3, 8005700 <_svfiprintf_r+0x1a0>
 80056ba:	9b03      	ldr	r3, [sp, #12]
 80056bc:	3307      	adds	r3, #7
 80056be:	f023 0307 	bic.w	r3, r3, #7
 80056c2:	3308      	adds	r3, #8
 80056c4:	9303      	str	r3, [sp, #12]
 80056c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056c8:	444b      	add	r3, r9
 80056ca:	9309      	str	r3, [sp, #36]	; 0x24
 80056cc:	e76d      	b.n	80055aa <_svfiprintf_r+0x4a>
 80056ce:	fb05 3202 	mla	r2, r5, r2, r3
 80056d2:	2001      	movs	r0, #1
 80056d4:	460f      	mov	r7, r1
 80056d6:	e7a6      	b.n	8005626 <_svfiprintf_r+0xc6>
 80056d8:	2300      	movs	r3, #0
 80056da:	250a      	movs	r5, #10
 80056dc:	4619      	mov	r1, r3
 80056de:	3701      	adds	r7, #1
 80056e0:	9305      	str	r3, [sp, #20]
 80056e2:	4638      	mov	r0, r7
 80056e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80056e8:	3a30      	subs	r2, #48	; 0x30
 80056ea:	2a09      	cmp	r2, #9
 80056ec:	d903      	bls.n	80056f6 <_svfiprintf_r+0x196>
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d0c8      	beq.n	8005684 <_svfiprintf_r+0x124>
 80056f2:	9105      	str	r1, [sp, #20]
 80056f4:	e7c6      	b.n	8005684 <_svfiprintf_r+0x124>
 80056f6:	fb05 2101 	mla	r1, r5, r1, r2
 80056fa:	2301      	movs	r3, #1
 80056fc:	4607      	mov	r7, r0
 80056fe:	e7f0      	b.n	80056e2 <_svfiprintf_r+0x182>
 8005700:	ab03      	add	r3, sp, #12
 8005702:	9300      	str	r3, [sp, #0]
 8005704:	4622      	mov	r2, r4
 8005706:	4b11      	ldr	r3, [pc, #68]	; (800574c <_svfiprintf_r+0x1ec>)
 8005708:	a904      	add	r1, sp, #16
 800570a:	4640      	mov	r0, r8
 800570c:	f7fe f960 	bl	80039d0 <_printf_float>
 8005710:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8005714:	4681      	mov	r9, r0
 8005716:	d1d6      	bne.n	80056c6 <_svfiprintf_r+0x166>
 8005718:	89a3      	ldrh	r3, [r4, #12]
 800571a:	065b      	lsls	r3, r3, #25
 800571c:	f53f af35 	bmi.w	800558a <_svfiprintf_r+0x2a>
 8005720:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005722:	b01d      	add	sp, #116	; 0x74
 8005724:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005728:	ab03      	add	r3, sp, #12
 800572a:	9300      	str	r3, [sp, #0]
 800572c:	4622      	mov	r2, r4
 800572e:	4b07      	ldr	r3, [pc, #28]	; (800574c <_svfiprintf_r+0x1ec>)
 8005730:	a904      	add	r1, sp, #16
 8005732:	4640      	mov	r0, r8
 8005734:	f7fe fbf8 	bl	8003f28 <_printf_i>
 8005738:	e7ea      	b.n	8005710 <_svfiprintf_r+0x1b0>
 800573a:	bf00      	nop
 800573c:	080059d4 	.word	0x080059d4
 8005740:	080059da 	.word	0x080059da
 8005744:	080059de 	.word	0x080059de
 8005748:	080039d1 	.word	0x080039d1
 800574c:	080054ab 	.word	0x080054ab

08005750 <__ascii_mbtowc>:
 8005750:	b082      	sub	sp, #8
 8005752:	b901      	cbnz	r1, 8005756 <__ascii_mbtowc+0x6>
 8005754:	a901      	add	r1, sp, #4
 8005756:	b142      	cbz	r2, 800576a <__ascii_mbtowc+0x1a>
 8005758:	b14b      	cbz	r3, 800576e <__ascii_mbtowc+0x1e>
 800575a:	7813      	ldrb	r3, [r2, #0]
 800575c:	600b      	str	r3, [r1, #0]
 800575e:	7812      	ldrb	r2, [r2, #0]
 8005760:	1c10      	adds	r0, r2, #0
 8005762:	bf18      	it	ne
 8005764:	2001      	movne	r0, #1
 8005766:	b002      	add	sp, #8
 8005768:	4770      	bx	lr
 800576a:	4610      	mov	r0, r2
 800576c:	e7fb      	b.n	8005766 <__ascii_mbtowc+0x16>
 800576e:	f06f 0001 	mvn.w	r0, #1
 8005772:	e7f8      	b.n	8005766 <__ascii_mbtowc+0x16>

08005774 <_realloc_r>:
 8005774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005776:	4607      	mov	r7, r0
 8005778:	4614      	mov	r4, r2
 800577a:	460e      	mov	r6, r1
 800577c:	b921      	cbnz	r1, 8005788 <_realloc_r+0x14>
 800577e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005782:	4611      	mov	r1, r2
 8005784:	f7fe b838 	b.w	80037f8 <_malloc_r>
 8005788:	b922      	cbnz	r2, 8005794 <_realloc_r+0x20>
 800578a:	f7fd ffe9 	bl	8003760 <_free_r>
 800578e:	4625      	mov	r5, r4
 8005790:	4628      	mov	r0, r5
 8005792:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005794:	f000 f821 	bl	80057da <_malloc_usable_size_r>
 8005798:	42a0      	cmp	r0, r4
 800579a:	d20f      	bcs.n	80057bc <_realloc_r+0x48>
 800579c:	4621      	mov	r1, r4
 800579e:	4638      	mov	r0, r7
 80057a0:	f7fe f82a 	bl	80037f8 <_malloc_r>
 80057a4:	4605      	mov	r5, r0
 80057a6:	2800      	cmp	r0, #0
 80057a8:	d0f2      	beq.n	8005790 <_realloc_r+0x1c>
 80057aa:	4631      	mov	r1, r6
 80057ac:	4622      	mov	r2, r4
 80057ae:	f7fd ffab 	bl	8003708 <memcpy>
 80057b2:	4631      	mov	r1, r6
 80057b4:	4638      	mov	r0, r7
 80057b6:	f7fd ffd3 	bl	8003760 <_free_r>
 80057ba:	e7e9      	b.n	8005790 <_realloc_r+0x1c>
 80057bc:	4635      	mov	r5, r6
 80057be:	e7e7      	b.n	8005790 <_realloc_r+0x1c>

080057c0 <__ascii_wctomb>:
 80057c0:	b149      	cbz	r1, 80057d6 <__ascii_wctomb+0x16>
 80057c2:	2aff      	cmp	r2, #255	; 0xff
 80057c4:	bf8b      	itete	hi
 80057c6:	238a      	movhi	r3, #138	; 0x8a
 80057c8:	700a      	strbls	r2, [r1, #0]
 80057ca:	6003      	strhi	r3, [r0, #0]
 80057cc:	2001      	movls	r0, #1
 80057ce:	bf88      	it	hi
 80057d0:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80057d4:	4770      	bx	lr
 80057d6:	4608      	mov	r0, r1
 80057d8:	4770      	bx	lr

080057da <_malloc_usable_size_r>:
 80057da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80057de:	1f18      	subs	r0, r3, #4
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	bfbc      	itt	lt
 80057e4:	580b      	ldrlt	r3, [r1, r0]
 80057e6:	18c0      	addlt	r0, r0, r3
 80057e8:	4770      	bx	lr
	...

080057ec <_init>:
 80057ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057ee:	bf00      	nop
 80057f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057f2:	bc08      	pop	{r3}
 80057f4:	469e      	mov	lr, r3
 80057f6:	4770      	bx	lr

080057f8 <_fini>:
 80057f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057fa:	bf00      	nop
 80057fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057fe:	bc08      	pop	{r3}
 8005800:	469e      	mov	lr, r3
 8005802:	4770      	bx	lr
